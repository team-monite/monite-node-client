/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { MoniteClient } from "../../src/Client";

describe("DataExports", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    count: 1,
                    created_by_entity_user_id: "created_by_entity_user_id",
                    end_datetime: "2024-01-15T09:30:00Z",
                    entity_id: "entity_id",
                    format: "format",
                    language: "language",
                    source_url: "source_url",
                    start_datetime: "2024-01-15T09:30:00Z",
                    status: "status",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        };
        server.mockEndpoint().get("/data_exports").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.dataExports.get();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    count: 1,
                    created_by_entity_user_id: "created_by_entity_user_id",
                    end_datetime: "2024-01-15T09:30:00Z",
                    entity_id: "entity_id",
                    format: "format",
                    language: "language",
                    source_url: "source_url",
                    start_datetime: "2024-01-15T09:30:00Z",
                    status: "status",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {
            date_from: "date_from",
            date_to: "date_to",
            format: "csv",
            objects: [{ statuses: ["draft"], name: "payable" }],
        };
        const rawResponseBody = { id: "id" };
        server
            .mockEndpoint()
            .post("/data_exports")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dataExports.create({
            date_from: "date_from",
            date_to: "date_to",
            format: "csv",
            objects: [
                {
                    name: "payable",
                    statuses: ["draft"],
                },
            ],
        });
        expect(response).toEqual({
            id: "id",
        });
    });

    test("get_supported_formats", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = [{ available_types: { key: ["csv"] }, object_type: "payable" }];
        server
            .mockEndpoint()
            .get("/data_exports/supported_formats")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dataExports.getSupportedFormats();
        expect(response).toEqual([
            {
                available_types: {
                    key: ["csv"],
                },
                object_type: "payable",
            },
        ]);
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            count: 1,
            created_by_entity_user_id: "created_by_entity_user_id",
            end_datetime: "2024-01-15T09:30:00Z",
            entity_id: "entity_id",
            format: "format",
            language: "language",
            source_url: "source_url",
            start_datetime: "2024-01-15T09:30:00Z",
            status: "status",
        };
        server
            .mockEndpoint()
            .get("/data_exports/document_export_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dataExports.getById("document_export_id");
        expect(response).toEqual({
            id: "id",
            count: 1,
            created_by_entity_user_id: "created_by_entity_user_id",
            end_datetime: "2024-01-15T09:30:00Z",
            entity_id: "entity_id",
            format: "format",
            language: "language",
            source_url: "source_url",
            start_datetime: "2024-01-15T09:30:00Z",
            status: "status",
        });
    });
});
