/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { MoniteClient } from "../../src/Client";

describe("Counterparts", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    created_automatically: true,
                    default_billing_address_id: "default_billing_address_id",
                    default_shipping_address_id: "default_shipping_address_id",
                    created_by_entity_user_id: "created_by_entity_user_id",
                    external_reference: "123456789",
                    individual: {
                        email: "asingh@example.net",
                        first_name: "Adnan",
                        is_customer: true,
                        is_vendor: true,
                        last_name: "Singh",
                        phone: "5553211234",
                        tags: [
                            {
                                id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                                created_at: "2022-09-07T16:35:18Z",
                                updated_at: "2022-09-07T16:35:18Z",
                                created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                                description: "Tag for the Marketing Department",
                                name: "Marketing",
                            },
                        ],
                        title: "Mr.",
                    },
                    language: "ab",
                    reminders_enabled: true,
                    tax_id: "tax_id",
                    type: "individual",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        };
        server.mockEndpoint().get("/counterparts").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.counterparts.get({
            sort_code: "123456",
        });
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    created_automatically: true,
                    default_billing_address_id: "default_billing_address_id",
                    default_shipping_address_id: "default_shipping_address_id",
                    created_by_entity_user_id: "created_by_entity_user_id",
                    external_reference: "123456789",
                    individual: {
                        email: "asingh@example.net",
                        first_name: "Adnan",
                        is_customer: true,
                        is_vendor: true,
                        last_name: "Singh",
                        phone: "5553211234",
                        tags: [
                            {
                                id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                                created_at: "2022-09-07T16:35:18Z",
                                updated_at: "2022-09-07T16:35:18Z",
                                created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                                description: "Tag for the Marketing Department",
                                name: "Marketing",
                            },
                        ],
                        title: "Mr.",
                    },
                    language: "ab",
                    reminders_enabled: true,
                    tax_id: "tax_id",
                    type: "individual",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {
            organization: {
                address: { city: "Berlin", country: "AF", line1: "Flughafenstrasse 52", postal_code: "10115" },
                is_customer: true,
                is_vendor: true,
                legal_name: "Acme Inc.",
            },
            type: "organization",
        };
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_automatically: true,
            default_billing_address_id: "default_billing_address_id",
            default_shipping_address_id: "default_shipping_address_id",
            created_by_entity_user_id: "created_by_entity_user_id",
            external_reference: "123456789",
            individual: {
                email: "asingh@example.net",
                first_name: "Adnan",
                is_customer: true,
                is_vendor: true,
                last_name: "Singh",
                phone: "5553211234",
                tags: [
                    {
                        id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                        created_at: "2022-09-07T16:35:18Z",
                        updated_at: "2022-09-07T16:35:18Z",
                        created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                        description: "Tag for the Marketing Department",
                        name: "Marketing",
                    },
                ],
                title: "Mr.",
            },
            language: "ab",
            reminders_enabled: true,
            tax_id: "tax_id",
            type: "individual",
        };
        server
            .mockEndpoint()
            .post("/counterparts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.counterparts.create({
            type: "organization",
            organization: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    postal_code: "10115",
                },
                is_customer: true,
                is_vendor: true,
                legal_name: "Acme Inc.",
            },
        });
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_automatically: true,
            default_billing_address_id: "default_billing_address_id",
            default_shipping_address_id: "default_shipping_address_id",
            created_by_entity_user_id: "created_by_entity_user_id",
            external_reference: "123456789",
            individual: {
                email: "asingh@example.net",
                first_name: "Adnan",
                is_customer: true,
                is_vendor: true,
                last_name: "Singh",
                phone: "5553211234",
                tags: [
                    {
                        id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                        created_at: "2022-09-07T16:35:18Z",
                        updated_at: "2022-09-07T16:35:18Z",
                        created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                        description: "Tag for the Marketing Department",
                        name: "Marketing",
                    },
                ],
                title: "Mr.",
            },
            language: "ab",
            reminders_enabled: true,
            tax_id: "tax_id",
            type: "individual",
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_automatically: true,
            default_billing_address_id: "default_billing_address_id",
            default_shipping_address_id: "default_shipping_address_id",
            created_by_entity_user_id: "created_by_entity_user_id",
            external_reference: "123456789",
            individual: {
                email: "asingh@example.net",
                first_name: "Adnan",
                is_customer: true,
                is_vendor: true,
                last_name: "Singh",
                phone: "5553211234",
                tags: [
                    {
                        id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                        created_at: "2022-09-07T16:35:18Z",
                        updated_at: "2022-09-07T16:35:18Z",
                        created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                        description: "Tag for the Marketing Department",
                        name: "Marketing",
                    },
                ],
                title: "Mr.",
            },
            language: "ab",
            reminders_enabled: true,
            tax_id: "tax_id",
            type: "individual",
        };
        server
            .mockEndpoint()
            .get("/counterparts/counterpart_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.counterparts.getById("counterpart_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_automatically: true,
            default_billing_address_id: "default_billing_address_id",
            default_shipping_address_id: "default_shipping_address_id",
            created_by_entity_user_id: "created_by_entity_user_id",
            external_reference: "123456789",
            individual: {
                email: "asingh@example.net",
                first_name: "Adnan",
                is_customer: true,
                is_vendor: true,
                last_name: "Singh",
                phone: "5553211234",
                tags: [
                    {
                        id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                        created_at: "2022-09-07T16:35:18Z",
                        updated_at: "2022-09-07T16:35:18Z",
                        created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                        description: "Tag for the Marketing Department",
                        name: "Marketing",
                    },
                ],
                title: "Mr.",
            },
            language: "ab",
            reminders_enabled: true,
            tax_id: "tax_id",
            type: "individual",
        });
    });

    test("delete_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        server.mockEndpoint().delete("/counterparts/counterpart_id").respondWith().statusCode(200).build();

        const response = await client.counterparts.deleteById("counterpart_id");
        expect(response).toEqual(undefined);
    });

    test("update_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { individual: {} };
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_automatically: true,
            default_billing_address_id: "default_billing_address_id",
            default_shipping_address_id: "default_shipping_address_id",
            created_by_entity_user_id: "created_by_entity_user_id",
            external_reference: "123456789",
            individual: {
                email: "asingh@example.net",
                first_name: "Adnan",
                is_customer: true,
                is_vendor: true,
                last_name: "Singh",
                phone: "5553211234",
                tags: [
                    {
                        id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                        created_at: "2022-09-07T16:35:18Z",
                        updated_at: "2022-09-07T16:35:18Z",
                        created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                        description: "Tag for the Marketing Department",
                        name: "Marketing",
                    },
                ],
                title: "Mr.",
            },
            language: "ab",
            reminders_enabled: true,
            tax_id: "tax_id",
            type: "individual",
        };
        server
            .mockEndpoint()
            .patch("/counterparts/counterpart_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.counterparts.updateById("counterpart_id", {
            individual: {},
        });
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_automatically: true,
            default_billing_address_id: "default_billing_address_id",
            default_shipping_address_id: "default_shipping_address_id",
            created_by_entity_user_id: "created_by_entity_user_id",
            external_reference: "123456789",
            individual: {
                email: "asingh@example.net",
                first_name: "Adnan",
                is_customer: true,
                is_vendor: true,
                last_name: "Singh",
                phone: "5553211234",
                tags: [
                    {
                        id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                        created_at: "2022-09-07T16:35:18Z",
                        updated_at: "2022-09-07T16:35:18Z",
                        created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                        description: "Tag for the Marketing Department",
                        name: "Marketing",
                    },
                ],
                title: "Mr.",
            },
            language: "ab",
            reminders_enabled: true,
            tax_id: "tax_id",
            type: "individual",
        });
    });

    test("get_partner_metadata_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = { metadata: { key: "value" } };
        server
            .mockEndpoint()
            .get("/counterparts/counterpart_id/partner_metadata")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.counterparts.getPartnerMetadataById("counterpart_id");
        expect(response).toEqual({
            metadata: {
                key: "value",
            },
        });
    });

    test("update_partner_metadata_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { metadata: { key: "value" } };
        const rawResponseBody = { metadata: { key: "value" } };
        server
            .mockEndpoint()
            .put("/counterparts/counterpart_id/partner_metadata")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.counterparts.updatePartnerMetadataById("counterpart_id", {
            metadata: {
                key: "value",
            },
        });
        expect(response).toEqual({
            metadata: {
                key: "value",
            },
        });
    });
});
