/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { MoniteClient } from "../../../src/Client";

describe("VatIds", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [{ id: "id", country: "AF", entity_id: "entity_id", type: "ae_trn", value: "123456789" }],
        };
        server
            .mockEndpoint()
            .get("/entities/entity_id/vat_ids")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entities.vatIds.get("entity_id");
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    country: "AF",
                    entity_id: "entity_id",
                    type: "ae_trn",
                    value: "123456789",
                },
            ],
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { country: "AF", value: "123456789" };
        const rawResponseBody = { id: "id", country: "AF", entity_id: "entity_id", type: "ae_trn", value: "123456789" };
        server
            .mockEndpoint()
            .post("/entities/entity_id/vat_ids")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entities.vatIds.create("entity_id", {
            country: "AF",
            value: "123456789",
        });
        expect(response).toEqual({
            id: "id",
            country: "AF",
            entity_id: "entity_id",
            type: "ae_trn",
            value: "123456789",
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = { id: "id", country: "AF", entity_id: "entity_id", type: "ae_trn", value: "123456789" };
        server
            .mockEndpoint()
            .get("/entities/entity_id/vat_ids/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entities.vatIds.getById("id", "entity_id");
        expect(response).toEqual({
            id: "id",
            country: "AF",
            entity_id: "entity_id",
            type: "ae_trn",
            value: "123456789",
        });
    });

    test("delete_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        server.mockEndpoint().delete("/entities/entity_id/vat_ids/id").respondWith().statusCode(200).build();

        const response = await client.entities.vatIds.deleteById("id", "entity_id");
        expect(response).toEqual(undefined);
    });

    test("update_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = { id: "id", country: "AF", entity_id: "entity_id", type: "ae_trn", value: "123456789" };
        server
            .mockEndpoint()
            .patch("/entities/entity_id/vat_ids/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entities.vatIds.updateById("id", "entity_id");
        expect(response).toEqual({
            id: "id",
            country: "AF",
            entity_id: "entity_id",
            type: "ae_trn",
            value: "123456789",
        });
    });
});
