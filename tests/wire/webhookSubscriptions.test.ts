/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { MoniteClient } from "../../src/Client";

describe("WebhookSubscriptions", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [{ id: "id", event_types: ["event_types"], object_type: "account", status: "enabled", url: "url" }],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        };
        server
            .mockEndpoint()
            .get("/webhook_subscriptions")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.webhookSubscriptions.get();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    event_types: ["event_types"],
                    object_type: "account",
                    status: "enabled",
                    url: "url",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { object_type: "account", url: "url" };
        const rawResponseBody = {
            id: "id",
            event_types: ["event_types"],
            object_type: "account",
            secret: "secret",
            status: "enabled",
            url: "url",
        };
        server
            .mockEndpoint()
            .post("/webhook_subscriptions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.webhookSubscriptions.create({
            object_type: "account",
            url: "url",
        });
        expect(response).toEqual({
            id: "id",
            event_types: ["event_types"],
            object_type: "account",
            secret: "secret",
            status: "enabled",
            url: "url",
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            event_types: ["event_types"],
            object_type: "account",
            status: "enabled",
            url: "url",
        };
        server
            .mockEndpoint()
            .get("/webhook_subscriptions/webhook_subscription_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.webhookSubscriptions.getById("webhook_subscription_id");
        expect(response).toEqual({
            id: "id",
            event_types: ["event_types"],
            object_type: "account",
            status: "enabled",
            url: "url",
        });
    });

    test("delete_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        server
            .mockEndpoint()
            .delete("/webhook_subscriptions/webhook_subscription_id")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.webhookSubscriptions.deleteById("webhook_subscription_id");
        expect(response).toEqual(undefined);
    });

    test("update_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            event_types: ["event_types"],
            object_type: "account",
            status: "enabled",
            url: "url",
        };
        server
            .mockEndpoint()
            .patch("/webhook_subscriptions/webhook_subscription_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.webhookSubscriptions.updateById("webhook_subscription_id");
        expect(response).toEqual({
            id: "id",
            event_types: ["event_types"],
            object_type: "account",
            status: "enabled",
            url: "url",
        });
    });

    test("disable_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            event_types: ["event_types"],
            object_type: "account",
            status: "enabled",
            url: "url",
        };
        server
            .mockEndpoint()
            .post("/webhook_subscriptions/webhook_subscription_id/disable")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.webhookSubscriptions.disableById("webhook_subscription_id");
        expect(response).toEqual({
            id: "id",
            event_types: ["event_types"],
            object_type: "account",
            status: "enabled",
            url: "url",
        });
    });

    test("enable_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            event_types: ["event_types"],
            object_type: "account",
            status: "enabled",
            url: "url",
        };
        server
            .mockEndpoint()
            .post("/webhook_subscriptions/webhook_subscription_id/enable")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.webhookSubscriptions.enableById("webhook_subscription_id");
        expect(response).toEqual({
            id: "id",
            event_types: ["event_types"],
            object_type: "account",
            status: "enabled",
            url: "url",
        });
    });

    test("regenerate_secret_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            event_types: ["event_types"],
            object_type: "account",
            secret: "secret",
            status: "enabled",
            url: "url",
        };
        server
            .mockEndpoint()
            .post("/webhook_subscriptions/webhook_subscription_id/regenerate_secret")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.webhookSubscriptions.regenerateSecretById("webhook_subscription_id");
        expect(response).toEqual({
            id: "id",
            event_types: ["event_types"],
            object_type: "account",
            secret: "secret",
            status: "enabled",
            url: "url",
        });
    });
});
