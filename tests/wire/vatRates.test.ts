/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { MoniteClient } from "../../src/Client";

describe("VatRates", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    components: [{ name: "name", value: 1.1 }],
                    country: "AF",
                    status: "active",
                    valid_from: "valid_from",
                    valid_until: "valid_until",
                    value: 1,
                },
            ],
        };
        server.mockEndpoint().get("/vat_rates").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.vatRates.get();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    components: [
                        {
                            name: "name",
                            value: 1.1,
                        },
                    ],
                    country: "AF",
                    status: "active",
                    valid_from: "valid_from",
                    valid_until: "valid_until",
                    value: 1,
                },
            ],
        });
    });
});
