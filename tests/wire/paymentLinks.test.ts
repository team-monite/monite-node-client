/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { MoniteClient } from "../../src/Client";

describe("PaymentLinks", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { payment_methods: ["sepa_credit"], recipient: { id: "id", type: "entity" } };
        const rawResponseBody = {
            id: "id",
            amount: 1,
            currency: "AED",
            expires_at: "2024-01-15T09:30:00Z",
            invoice: {
                due_date: "due_date",
                file: { mimetype: "mimetype", name: "name", url: "url" },
                issue_date: "issue_date",
            },
            payer: {
                id: "id",
                bank_accounts: [
                    {
                        id: "id",
                        account_holder_name: "Bob Jones",
                        account_number: "12345678",
                        bic: "DEUTDEFFXXX",
                        display_name: "Primary account",
                        iban: "DE74500700100100000900",
                        name: "Primary account",
                        sort_code: "123456",
                    },
                ],
                name: "name",
                type: "entity",
            },
            payment_intent: {
                id: "id",
                updated_at: "2024-01-15T09:30:00Z",
                application_fee_amount: 1,
                object: { id: "id", type: "payable" },
                provider: "provider",
                selected_payment_method: "selected_payment_method",
                status: "status",
            },
            payment_intent_id: "payment_intent_id",
            payment_methods: ["payment_methods"],
            payment_page_url: "payment_page_url",
            payment_reference: "payment_reference",
            recipient: {
                id: "id",
                bank_accounts: [
                    {
                        id: "id",
                        account_holder_name: "Bob Jones",
                        account_number: "12345678",
                        bic: "DEUTDEFFXXX",
                        display_name: "Primary account",
                        iban: "DE74500700100100000900",
                        name: "Primary account",
                        sort_code: "123456",
                    },
                ],
                name: "name",
                type: "entity",
            },
            return_url: "https://pay.example.com/complete",
            status: "status",
        };
        server
            .mockEndpoint()
            .post("/payment_links")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paymentLinks.create({
            payment_methods: ["sepa_credit"],
            recipient: {
                id: "id",
                type: "entity",
            },
        });
        expect(response).toEqual({
            id: "id",
            amount: 1,
            currency: "AED",
            expires_at: "2024-01-15T09:30:00Z",
            invoice: {
                due_date: "due_date",
                file: {
                    mimetype: "mimetype",
                    name: "name",
                    url: "url",
                },
                issue_date: "issue_date",
            },
            payer: {
                id: "id",
                bank_accounts: [
                    {
                        id: "id",
                        account_holder_name: "Bob Jones",
                        account_number: "12345678",
                        bic: "DEUTDEFFXXX",
                        display_name: "Primary account",
                        iban: "DE74500700100100000900",
                        name: "Primary account",
                        sort_code: "123456",
                    },
                ],
                name: "name",
                type: "entity",
            },
            payment_intent: {
                id: "id",
                updated_at: "2024-01-15T09:30:00Z",
                application_fee_amount: 1,
                object: {
                    id: "id",
                    type: "payable",
                },
                provider: "provider",
                selected_payment_method: "selected_payment_method",
                status: "status",
            },
            payment_intent_id: "payment_intent_id",
            payment_methods: ["payment_methods"],
            payment_page_url: "payment_page_url",
            payment_reference: "payment_reference",
            recipient: {
                id: "id",
                bank_accounts: [
                    {
                        id: "id",
                        account_holder_name: "Bob Jones",
                        account_number: "12345678",
                        bic: "DEUTDEFFXXX",
                        display_name: "Primary account",
                        iban: "DE74500700100100000900",
                        name: "Primary account",
                        sort_code: "123456",
                    },
                ],
                name: "name",
                type: "entity",
            },
            return_url: "https://pay.example.com/complete",
            status: "status",
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            amount: 1,
            currency: "AED",
            expires_at: "2024-01-15T09:30:00Z",
            invoice: {
                due_date: "due_date",
                file: { mimetype: "mimetype", name: "name", url: "url" },
                issue_date: "issue_date",
            },
            payer: {
                id: "id",
                bank_accounts: [
                    {
                        id: "id",
                        account_holder_name: "Bob Jones",
                        account_number: "12345678",
                        bic: "DEUTDEFFXXX",
                        display_name: "Primary account",
                        iban: "DE74500700100100000900",
                        name: "Primary account",
                        sort_code: "123456",
                    },
                ],
                name: "name",
                type: "entity",
            },
            payment_intent: {
                id: "id",
                updated_at: "2024-01-15T09:30:00Z",
                application_fee_amount: 1,
                object: { id: "id", type: "payable" },
                provider: "provider",
                selected_payment_method: "selected_payment_method",
                status: "status",
            },
            payment_intent_id: "payment_intent_id",
            payment_methods: ["payment_methods"],
            payment_page_url: "payment_page_url",
            payment_reference: "payment_reference",
            recipient: {
                id: "id",
                bank_accounts: [
                    {
                        id: "id",
                        account_holder_name: "Bob Jones",
                        account_number: "12345678",
                        bic: "DEUTDEFFXXX",
                        display_name: "Primary account",
                        iban: "DE74500700100100000900",
                        name: "Primary account",
                        sort_code: "123456",
                    },
                ],
                name: "name",
                type: "entity",
            },
            return_url: "https://pay.example.com/complete",
            status: "status",
        };
        server
            .mockEndpoint()
            .get("/payment_links/payment_link_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paymentLinks.getById("payment_link_id");
        expect(response).toEqual({
            id: "id",
            amount: 1,
            currency: "AED",
            expires_at: "2024-01-15T09:30:00Z",
            invoice: {
                due_date: "due_date",
                file: {
                    mimetype: "mimetype",
                    name: "name",
                    url: "url",
                },
                issue_date: "issue_date",
            },
            payer: {
                id: "id",
                bank_accounts: [
                    {
                        id: "id",
                        account_holder_name: "Bob Jones",
                        account_number: "12345678",
                        bic: "DEUTDEFFXXX",
                        display_name: "Primary account",
                        iban: "DE74500700100100000900",
                        name: "Primary account",
                        sort_code: "123456",
                    },
                ],
                name: "name",
                type: "entity",
            },
            payment_intent: {
                id: "id",
                updated_at: "2024-01-15T09:30:00Z",
                application_fee_amount: 1,
                object: {
                    id: "id",
                    type: "payable",
                },
                provider: "provider",
                selected_payment_method: "selected_payment_method",
                status: "status",
            },
            payment_intent_id: "payment_intent_id",
            payment_methods: ["payment_methods"],
            payment_page_url: "payment_page_url",
            payment_reference: "payment_reference",
            recipient: {
                id: "id",
                bank_accounts: [
                    {
                        id: "id",
                        account_holder_name: "Bob Jones",
                        account_number: "12345678",
                        bic: "DEUTDEFFXXX",
                        display_name: "Primary account",
                        iban: "DE74500700100100000900",
                        name: "Primary account",
                        sort_code: "123456",
                    },
                ],
                name: "name",
                type: "entity",
            },
            return_url: "https://pay.example.com/complete",
            status: "status",
        });
    });

    test("expire_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            amount: 1,
            currency: "AED",
            expires_at: "2024-01-15T09:30:00Z",
            invoice: {
                due_date: "due_date",
                file: { mimetype: "mimetype", name: "name", url: "url" },
                issue_date: "issue_date",
            },
            payer: {
                id: "id",
                bank_accounts: [
                    {
                        id: "id",
                        account_holder_name: "Bob Jones",
                        account_number: "12345678",
                        bic: "DEUTDEFFXXX",
                        display_name: "Primary account",
                        iban: "DE74500700100100000900",
                        name: "Primary account",
                        sort_code: "123456",
                    },
                ],
                name: "name",
                type: "entity",
            },
            payment_intent: {
                id: "id",
                updated_at: "2024-01-15T09:30:00Z",
                application_fee_amount: 1,
                object: { id: "id", type: "payable" },
                provider: "provider",
                selected_payment_method: "selected_payment_method",
                status: "status",
            },
            payment_intent_id: "payment_intent_id",
            payment_methods: ["payment_methods"],
            payment_page_url: "payment_page_url",
            payment_reference: "payment_reference",
            recipient: {
                id: "id",
                bank_accounts: [
                    {
                        id: "id",
                        account_holder_name: "Bob Jones",
                        account_number: "12345678",
                        bic: "DEUTDEFFXXX",
                        display_name: "Primary account",
                        iban: "DE74500700100100000900",
                        name: "Primary account",
                        sort_code: "123456",
                    },
                ],
                name: "name",
                type: "entity",
            },
            return_url: "https://pay.example.com/complete",
            status: "status",
        };
        server
            .mockEndpoint()
            .post("/payment_links/payment_link_id/expire")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paymentLinks.expireById("payment_link_id");
        expect(response).toEqual({
            id: "id",
            amount: 1,
            currency: "AED",
            expires_at: "2024-01-15T09:30:00Z",
            invoice: {
                due_date: "due_date",
                file: {
                    mimetype: "mimetype",
                    name: "name",
                    url: "url",
                },
                issue_date: "issue_date",
            },
            payer: {
                id: "id",
                bank_accounts: [
                    {
                        id: "id",
                        account_holder_name: "Bob Jones",
                        account_number: "12345678",
                        bic: "DEUTDEFFXXX",
                        display_name: "Primary account",
                        iban: "DE74500700100100000900",
                        name: "Primary account",
                        sort_code: "123456",
                    },
                ],
                name: "name",
                type: "entity",
            },
            payment_intent: {
                id: "id",
                updated_at: "2024-01-15T09:30:00Z",
                application_fee_amount: 1,
                object: {
                    id: "id",
                    type: "payable",
                },
                provider: "provider",
                selected_payment_method: "selected_payment_method",
                status: "status",
            },
            payment_intent_id: "payment_intent_id",
            payment_methods: ["payment_methods"],
            payment_page_url: "payment_page_url",
            payment_reference: "payment_reference",
            recipient: {
                id: "id",
                bank_accounts: [
                    {
                        id: "id",
                        account_holder_name: "Bob Jones",
                        account_number: "12345678",
                        bic: "DEUTDEFFXXX",
                        display_name: "Primary account",
                        iban: "DE74500700100100000900",
                        name: "Primary account",
                        sort_code: "123456",
                    },
                ],
                name: "name",
                type: "entity",
            },
            return_url: "https://pay.example.com/complete",
            status: "status",
        });
    });
});
