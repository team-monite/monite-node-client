/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Monite from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";
import * as fs from "fs";
import { BankAccounts } from "../resources/bankAccounts/client/Client.js";
import { OnboardingData } from "../resources/onboardingData/client/Client.js";
import { PaymentMethods } from "../resources/paymentMethods/client/Client.js";
import { VatIds } from "../resources/vatIds/client/Client.js";
import { Persons } from "../resources/persons/client/Client.js";

export declare namespace Entities {
    export interface Options {
        environment?: core.Supplier<environments.MoniteEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the x-monite-version header */
        moniteVersion: core.Supplier<string>;
        /** Override the x-monite-entity-id header */
        moniteEntityId?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-monite-version header */
        moniteVersion?: string;
        /** Override the x-monite-entity-id header */
        moniteEntityId?: string | undefined;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Entities {
    protected readonly _options: Entities.Options;
    protected _bankAccounts: BankAccounts | undefined;
    protected _onboardingData: OnboardingData | undefined;
    protected _paymentMethods: PaymentMethods | undefined;
    protected _vatIds: VatIds | undefined;
    protected _persons: Persons | undefined;

    constructor(_options: Entities.Options) {
        this._options = _options;
    }

    public get bankAccounts(): BankAccounts {
        return (this._bankAccounts ??= new BankAccounts(this._options));
    }

    public get onboardingData(): OnboardingData {
        return (this._onboardingData ??= new OnboardingData(this._options));
    }

    public get paymentMethods(): PaymentMethods {
        return (this._paymentMethods ??= new PaymentMethods(this._options));
    }

    public get vatIds(): VatIds {
        return (this._vatIds ??= new VatIds(this._options));
    }

    public get persons(): Persons {
        return (this._persons ??= new Persons(this._options));
    }

    /**
     * Retrieve a list of all entities.
     *
     * @param {Monite.EntitiesGetRequest} request
     * @param {Entities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.BadRequestError}
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.ForbiddenError}
     * @throws {@link Monite.NotAcceptableError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.entities.get()
     */
    public get(
        request: Monite.EntitiesGetRequest = {},
        requestOptions?: Entities.RequestOptions,
    ): core.HttpResponsePromise<Monite.EntityPaginationResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(request, requestOptions));
    }

    private async __get(
        request: Monite.EntitiesGetRequest = {},
        requestOptions?: Entities.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.EntityPaginationResponse>> {
        const {
            order,
            limit,
            pagination_token: paginationToken,
            sort,
            type: type_,
            created_at__gt: createdAtGt,
            created_at__lt: createdAtLt,
            created_at__gte: createdAtGte,
            created_at__lte: createdAtLte,
            id__in: idIn,
            id__not_in: idNotIn,
            email,
            email__in: emailIn,
            email__not_in: emailNotIn,
            status,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (order != null) {
            _queryParams["order"] = order;
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (paginationToken != null) {
            _queryParams["pagination_token"] = paginationToken;
        }

        if (sort != null) {
            _queryParams["sort"] = sort;
        }

        if (type_ != null) {
            _queryParams["type"] = type_;
        }

        if (createdAtGt != null) {
            _queryParams["created_at__gt"] = createdAtGt;
        }

        if (createdAtLt != null) {
            _queryParams["created_at__lt"] = createdAtLt;
        }

        if (createdAtGte != null) {
            _queryParams["created_at__gte"] = createdAtGte;
        }

        if (createdAtLte != null) {
            _queryParams["created_at__lte"] = createdAtLte;
        }

        if (idIn != null) {
            if (Array.isArray(idIn)) {
                _queryParams["id__in"] = idIn.map((item) => item);
            } else {
                _queryParams["id__in"] = idIn;
            }
        }

        if (idNotIn != null) {
            if (Array.isArray(idNotIn)) {
                _queryParams["id__not_in"] = idNotIn.map((item) => item);
            } else {
                _queryParams["id__not_in"] = idNotIn;
            }
        }

        if (email != null) {
            _queryParams["email"] = email;
        }

        if (emailIn != null) {
            if (Array.isArray(emailIn)) {
                _queryParams["email__in"] = emailIn.map((item) => item);
            } else {
                _queryParams["email__in"] = emailIn;
            }
        }

        if (emailNotIn != null) {
            if (Array.isArray(emailNotIn)) {
                _queryParams["email__not_in"] = emailNotIn.map((item) => item);
            } else {
                _queryParams["email__not_in"] = emailNotIn;
            }
        }

        if (status != null) {
            _queryParams["status"] = status;
        }

        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                "entities",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.EntityPaginationResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Monite.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Monite.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 406:
                    throw new Monite.NotAcceptableError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError("Timeout exceeded when calling GET /entities.");
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Create a new entity from the specified values.
     *
     * @param {Monite.CreateEntityRequest} request
     * @param {Entities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.BadRequestError}
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.ForbiddenError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.entities.create({
     *         address: {
     *             city: "city",
     *             country: "AF",
     *             line1: "line1",
     *             postal_code: "postal_code"
     *         },
     *         email: "email",
     *         type: "individual"
     *     })
     */
    public create(
        request: Monite.CreateEntityRequest,
        requestOptions?: Entities.RequestOptions,
    ): core.HttpResponsePromise<Monite.EntityResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Monite.CreateEntityRequest,
        requestOptions?: Entities.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.EntityResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                "entities",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.EntityResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Monite.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Monite.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError("Timeout exceeded when calling POST /entities.");
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deprecated. Use `GET /entity_users/my_entity` instead.
     *
     * @param {Entities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.BadRequestError}
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.entities.getEntitiesMe()
     */
    public getEntitiesMe(requestOptions?: Entities.RequestOptions): core.HttpResponsePromise<Monite.EntityResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getEntitiesMe(requestOptions));
    }

    private async __getEntitiesMe(
        requestOptions?: Entities.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.EntityResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                "entities/me",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.EntityResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Monite.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError("Timeout exceeded when calling GET /entities/me.");
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deprecated. Use `PATCH /entity_users/my_entity` instead.
     *
     * @param {Monite.UpdateEntityRequest} request
     * @param {Entities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.BadRequestError}
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.entities.patchEntitiesMe({})
     */
    public patchEntitiesMe(
        request: Monite.UpdateEntityRequest,
        requestOptions?: Entities.RequestOptions,
    ): core.HttpResponsePromise<Monite.EntityResponse> {
        return core.HttpResponsePromise.fromPromise(this.__patchEntitiesMe(request, requestOptions));
    }

    private async __patchEntitiesMe(
        request: Monite.UpdateEntityRequest,
        requestOptions?: Entities.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.EntityResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                "entities/me",
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.EntityResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Monite.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError("Timeout exceeded when calling PATCH /entities/me.");
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns entity information for the specified entity ID.
     *
     * This endpoint requires a partner access token and can be used to get any of the partner's entities.
     *
     * To get entity information by using an entity user token, use [`GET /entity_users/my_entity`](https://docs.monite.com/api/entities/get-entity-users-my-entity) instead.
     *
     * Related endpoints:
     *
     *  * [Get entity settings](https://docs.monite.com/api/entities/get-entities-id-settings)
     *
     * @param {string} entityId - A unique ID to specify the entity.
     * @param {Entities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.BadRequestError}
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.entities.getById("ea837e28-509b-4b6a-a600-d54b6aa0b1f5")
     */
    public getById(
        entityId: string,
        requestOptions?: Entities.RequestOptions,
    ): core.HttpResponsePromise<Monite.EntityResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getById(entityId, requestOptions));
    }

    private async __getById(
        entityId: string,
        requestOptions?: Entities.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.EntityResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `entities/${encodeURIComponent(entityId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.EntityResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Monite.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError("Timeout exceeded when calling GET /entities/{entity_id}.");
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update entity information for the specified entity ID.
     *
     * This endpoint requires a partner access token and can be used to update any of the partner's entities.
     *
     * To update an entity by using an entity user token, use [`PATCH /entity_users/my_entity`](https://docs.monite.com/api/entities/patch-entity-users-my-entity) instead.
     *
     * Related endpoints:
     *
     *  * [Update entity settings](https://docs.monite.com/api/entities/patch-entities-id-settings)
     *  * [Update entity logo](https://docs.monite.com/api/entities/put-entities-id-logo)
     *
     * @param {string} entityId - A unique ID to specify the entity.
     * @param {Monite.UpdateEntityRequest} request
     * @param {Entities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.BadRequestError}
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.ForbiddenError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.entities.updateById("ea837e28-509b-4b6a-a600-d54b6aa0b1f5", {})
     */
    public updateById(
        entityId: string,
        request: Monite.UpdateEntityRequest,
        requestOptions?: Entities.RequestOptions,
    ): core.HttpResponsePromise<Monite.EntityResponse> {
        return core.HttpResponsePromise.fromPromise(this.__updateById(entityId, request, requestOptions));
    }

    private async __updateById(
        entityId: string,
        request: Monite.UpdateEntityRequest,
        requestOptions?: Entities.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.EntityResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `entities/${encodeURIComponent(entityId)}`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.EntityResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Monite.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Monite.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError("Timeout exceeded when calling PATCH /entities/{entity_id}.");
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Activate an entity to allow it to perform any operations.
     *
     * @param {string} entityId - A unique ID to specify the entity.
     * @param {Entities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.BadRequestError}
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.ForbiddenError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.entities.postEntitiesIdActivate("ea837e28-509b-4b6a-a600-d54b6aa0b1f5")
     */
    public postEntitiesIdActivate(
        entityId: string,
        requestOptions?: Entities.RequestOptions,
    ): core.HttpResponsePromise<Monite.EntityResponse> {
        return core.HttpResponsePromise.fromPromise(this.__postEntitiesIdActivate(entityId, requestOptions));
    }

    private async __postEntitiesIdActivate(
        entityId: string,
        requestOptions?: Entities.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.EntityResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `entities/${encodeURIComponent(entityId)}/activate`,
            ),
            method: "POST",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.EntityResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Monite.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Monite.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling POST /entities/{entity_id}/activate.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deactivate an entity to stop it from performing any operations.
     *
     * @param {string} entityId - A unique ID to specify the entity.
     * @param {Entities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.BadRequestError}
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.ForbiddenError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.entities.postEntitiesIdDeactivate("ea837e28-509b-4b6a-a600-d54b6aa0b1f5")
     */
    public postEntitiesIdDeactivate(
        entityId: string,
        requestOptions?: Entities.RequestOptions,
    ): core.HttpResponsePromise<Monite.EntityResponse> {
        return core.HttpResponsePromise.fromPromise(this.__postEntitiesIdDeactivate(entityId, requestOptions));
    }

    private async __postEntitiesIdDeactivate(
        entityId: string,
        requestOptions?: Entities.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.EntityResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `entities/${encodeURIComponent(entityId)}/deactivate`,
            ),
            method: "POST",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.EntityResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Monite.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Monite.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling POST /entities/{entity_id}/deactivate.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Entity logo can be PNG, JPG, or GIF, up to 10 MB in size. The logo is used, for example, in PDF documents created by this entity.
     *
     * Both partner tokens and entity user tokens can be used for authentication. Entity users must have a role with the `entity.update` permission.
     *
     * @param {string} entityId
     * @param {Monite.BodyPutEntitiesIdLogo} request
     * @param {Entities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.BadRequestError}
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     import { createReadStream } from "fs";
     *     await client.entities.uploadLogoById("ea837e28-509b-4b6a-a600-d54b6aa0b1f5", {
     *         file: fs.createReadStream("/path/to/your/file")
     *     })
     */
    public uploadLogoById(
        entityId: string,
        request: Monite.BodyPutEntitiesIdLogo,
        requestOptions?: Entities.RequestOptions,
    ): core.HttpResponsePromise<Monite.FileSchema2> {
        return core.HttpResponsePromise.fromPromise(this.__uploadLogoById(entityId, request, requestOptions));
    }

    private async __uploadLogoById(
        entityId: string,
        request: Monite.BodyPutEntitiesIdLogo,
        requestOptions?: Entities.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.FileSchema2>> {
        const _request = await core.newFormData();
        await _request.appendFile("file", request.file);
        const _maybeEncodedRequest = await _request.getRequest();
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
                ..._maybeEncodedRequest.headers,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `entities/${encodeURIComponent(entityId)}/logo`,
            ),
            method: "PUT",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.FileSchema2, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Monite.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError("Timeout exceeded when calling PUT /entities/{entity_id}/logo.");
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Both partner tokens and entity user tokens can be used for authentication. Entity users must have a role with the `entity.update` permission.
     *
     * @param {string} entityId - A unique ID to specify the entity.
     * @param {Entities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.NotFoundError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.entities.deleteLogoById("ea837e28-509b-4b6a-a600-d54b6aa0b1f5")
     */
    public deleteLogoById(entityId: string, requestOptions?: Entities.RequestOptions): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__deleteLogoById(entityId, requestOptions));
    }

    private async __deleteLogoById(
        entityId: string,
        requestOptions?: Entities.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `entities/${encodeURIComponent(entityId)}/logo`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Monite.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError("Timeout exceeded when calling DELETE /entities/{entity_id}/logo.");
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve a metadata object associated with this entity, usually in a JSON format.
     *
     * @param {string} entityId
     * @param {Entities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.entities.getPartnerMetadataById("entity_id")
     */
    public getPartnerMetadataById(
        entityId: string,
        requestOptions?: Entities.RequestOptions,
    ): core.HttpResponsePromise<Monite.PartnerMetadataResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getPartnerMetadataById(entityId, requestOptions));
    }

    private async __getPartnerMetadataById(
        entityId: string,
        requestOptions?: Entities.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.PartnerMetadataResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `entities/${encodeURIComponent(entityId)}/partner_metadata`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.PartnerMetadataResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling GET /entities/{entity_id}/partner_metadata.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Fully replace the current metadata object with the specified instance.
     *
     * @param {string} entityId
     * @param {Monite.PartnerMetadata} request
     * @param {Entities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.entities.updatePartnerMetadataById("entity_id", {
     *         metadata: {
     *             "key": "value"
     *         }
     *     })
     */
    public updatePartnerMetadataById(
        entityId: string,
        request: Monite.PartnerMetadata,
        requestOptions?: Entities.RequestOptions,
    ): core.HttpResponsePromise<Monite.PartnerMetadataResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__updatePartnerMetadataById(entityId, request, requestOptions),
        );
    }

    private async __updatePartnerMetadataById(
        entityId: string,
        request: Monite.PartnerMetadata,
        requestOptions?: Entities.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.PartnerMetadataResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `entities/${encodeURIComponent(entityId)}/partner_metadata`,
            ),
            method: "PUT",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.PartnerMetadataResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling PUT /entities/{entity_id}/partner_metadata.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Entity settings include configuration options for accounts payable, accounts receivable, accounting integration, and other functionality.
     *
     * Both partner tokens and entity user tokens can be used for authentication. Entity users must have a role with the `entity.read` permission.
     *
     * Related endpoints:
     *
     *  * [Get next document numbers](https://docs.monite.com/api/entities/get-entities-id-settings-next-document-numbers)
     *  * [Get partner settings](https://docs.monite.com/api/partner-settings/get-settings)
     *
     * @param {string} entityId - A unique ID to specify the entity.
     * @param {Entities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.BadRequestError}
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.entities.getSettingsById("ea837e28-509b-4b6a-a600-d54b6aa0b1f5")
     */
    public getSettingsById(
        entityId: string,
        requestOptions?: Entities.RequestOptions,
    ): core.HttpResponsePromise<Monite.SettingsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getSettingsById(entityId, requestOptions));
    }

    private async __getSettingsById(
        entityId: string,
        requestOptions?: Entities.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.SettingsResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `entities/${encodeURIComponent(entityId)}/settings`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.SettingsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Monite.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling GET /entities/{entity_id}/settings.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Entity settings include configuration options for accounts payable, accounts receivable, accounting integration, and other functionality.
     *
     * Both partner tokens and entity user tokens can be used for authentication. Entity users must have a role with the `entity.update` permission.
     *
     * Related endpoints:
     *
     *  * [Update an entity](https://docs.monite.com/api/entities/patch-entities-id)
     *  * [Update entity logo](https://docs.monite.com/api/entities/put-entities-id-logo)
     *  * [Update partner settings](https://docs.monite.com/api/partner-settings/patch-settings)
     *
     * @param {string} entityId - A unique ID to specify the entity.
     * @param {Monite.PatchSettingsPayload} request
     * @param {Entities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.BadRequestError}
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.entities.updateSettingsById("ea837e28-509b-4b6a-a600-d54b6aa0b1f5")
     */
    public updateSettingsById(
        entityId: string,
        request: Monite.PatchSettingsPayload = {},
        requestOptions?: Entities.RequestOptions,
    ): core.HttpResponsePromise<Monite.SettingsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__updateSettingsById(entityId, request, requestOptions));
    }

    private async __updateSettingsById(
        entityId: string,
        request: Monite.PatchSettingsPayload = {},
        requestOptions?: Entities.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.SettingsResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `entities/${encodeURIComponent(entityId)}/settings`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.SettingsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Monite.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling PATCH /entities/{entity_id}/settings.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns the next sequence number for various document types - invoices, quotes, credit notes, and others. For example, if the last issued invoice is `INV-00042`, the next invoice number is 43.
     *
     * To set the next document numbers, use `PATCH /entities/{entity_id}/settings`.
     *
     * For more information, see [Document number customization](https://docs.monite.com/advanced/document-number-customization).
     *
     * @param {string} entityId - Unique ID of the entity
     * @param {Entities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.ForbiddenError}
     * @throws {@link Monite.NotFoundError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.entities.getEntitiesIdSettingsNextDocumentNumbers("entity_id")
     */
    public getEntitiesIdSettingsNextDocumentNumbers(
        entityId: string,
        requestOptions?: Entities.RequestOptions,
    ): core.HttpResponsePromise<Monite.NextDocumentNumbers> {
        return core.HttpResponsePromise.fromPromise(
            this.__getEntitiesIdSettingsNextDocumentNumbers(entityId, requestOptions),
        );
    }

    private async __getEntitiesIdSettingsNextDocumentNumbers(
        entityId: string,
        requestOptions?: Entities.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.NextDocumentNumbers>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `entities/${encodeURIComponent(entityId)}/settings/next_document_numbers`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.NextDocumentNumbers, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Monite.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Monite.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling GET /entities/{entity_id}/settings/next_document_numbers.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Provide files for entity onboarding verification
     *
     * @param {Monite.EntityOnboardingDocumentsPayload} request
     * @param {Entities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.entities.uploadOnboardingDocuments()
     */
    public uploadOnboardingDocuments(
        request: Monite.EntityOnboardingDocumentsPayload = {},
        requestOptions?: Entities.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__uploadOnboardingDocuments(request, requestOptions));
    }

    private async __uploadOnboardingDocuments(
        request: Monite.EntityOnboardingDocumentsPayload = {},
        requestOptions?: Entities.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                "onboarding_documents",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError("Timeout exceeded when calling POST /onboarding_documents.");
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get onboarding requirements for the entity
     *
     * @param {Entities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.entities.getOnboardingRequirements()
     */
    public getOnboardingRequirements(
        requestOptions?: Entities.RequestOptions,
    ): core.HttpResponsePromise<Monite.GetOnboardingRequirementsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getOnboardingRequirements(requestOptions));
    }

    private async __getOnboardingRequirements(
        requestOptions?: Entities.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.GetOnboardingRequirementsResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                "onboarding_requirements",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Monite.GetOnboardingRequirementsResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError("Timeout exceeded when calling GET /onboarding_requirements.");
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
