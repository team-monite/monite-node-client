/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { MoniteClient } from "../../src/Client";

describe("MailTemplates", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    body_template: "body_template",
                    is_default: true,
                    language: "language",
                    name: "name",
                    subject_template: "subject_template",
                    type: "type",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        };
        server.mockEndpoint().get("/mail_templates").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.mailTemplates.get();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    body_template: "body_template",
                    is_default: true,
                    language: "language",
                    name: "name",
                    subject_template: "subject_template",
                    type: "type",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {
            body_template: "body_template",
            name: "name",
            subject_template: "subject_template",
            type: "receivables_quote",
        };
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            body_template: "body_template",
            is_default: true,
            language: "language",
            name: "name",
            subject_template: "subject_template",
            type: "type",
        };
        server
            .mockEndpoint()
            .post("/mail_templates")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mailTemplates.create({
            body_template: "body_template",
            name: "name",
            subject_template: "subject_template",
            type: "receivables_quote",
        });
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            body_template: "body_template",
            is_default: true,
            language: "language",
            name: "name",
            subject_template: "subject_template",
            type: "type",
        });
    });

    test("preview", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {
            body: "body",
            document_type: "receivables_quote",
            language_code: "ab",
            subject: "subject",
        };
        const rawResponseBody = { body_preview: "body_preview", subject_preview: "subject_preview" };
        server
            .mockEndpoint()
            .post("/mail_templates/preview")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mailTemplates.preview({
            body: "body",
            document_type: "receivables_quote",
            language_code: "ab",
            subject: "subject",
        });
        expect(response).toEqual({
            body_preview: "body_preview",
            subject_preview: "subject_preview",
        });
    });

    test("get_system", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    available_templates: [
                        { body_template: "body_template", language: "language", subject_template: "subject_template" },
                    ],
                    template_name: "template_name",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/mail_templates/system")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mailTemplates.getSystem();
        expect(response).toEqual({
            data: [
                {
                    available_templates: [
                        {
                            body_template: "body_template",
                            language: "language",
                            subject_template: "subject_template",
                        },
                    ],
                    template_name: "template_name",
                },
            ],
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            body_template: "body_template",
            is_default: true,
            language: "language",
            name: "name",
            subject_template: "subject_template",
            type: "type",
        };
        server
            .mockEndpoint()
            .get("/mail_templates/template_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mailTemplates.getById("template_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            body_template: "body_template",
            is_default: true,
            language: "language",
            name: "name",
            subject_template: "subject_template",
            type: "type",
        });
    });

    test("delete_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        server.mockEndpoint().delete("/mail_templates/template_id").respondWith().statusCode(200).build();

        const response = await client.mailTemplates.deleteById("template_id");
        expect(response).toEqual(undefined);
    });

    test("update_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            body_template: "body_template",
            is_default: true,
            language: "language",
            name: "name",
            subject_template: "subject_template",
            type: "type",
        };
        server
            .mockEndpoint()
            .patch("/mail_templates/template_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mailTemplates.updateById("template_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            body_template: "body_template",
            is_default: true,
            language: "language",
            name: "name",
            subject_template: "subject_template",
            type: "type",
        });
    });

    test("make_default_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            body_template: "body_template",
            is_default: true,
            language: "language",
            name: "name",
            subject_template: "subject_template",
            type: "type",
        };
        server
            .mockEndpoint()
            .post("/mail_templates/template_id/make_default")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mailTemplates.makeDefaultById("template_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            body_template: "body_template",
            is_default: true,
            language: "language",
            name: "name",
            subject_template: "subject_template",
            type: "type",
        });
    });
});
