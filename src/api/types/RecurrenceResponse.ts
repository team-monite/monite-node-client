/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Monite from "../index.js";

export interface RecurrenceResponse {
    id: string;
    /** Time at which the recurrence was created. Timestamps follow the ISO 8601 standard. */
    created_at: string;
    /** Time at which the recurrence was last updated. Timestamps follow the ISO 8601 standard. */
    updated_at: string;
    /**
     * Controls how invoices are processed when generated:
     * - "draft": Creates invoices in draft status, requiring manual review, issuing, and sending
     * - "issue": Automatically issues invoices but requires manual sending
     * - "issue_and_send": Fully automates the process (creates, issues, and sends invoices)
     *
     * Default: "issue" (or "issue_and_send" if subject_text and body_text are provided)
     *
     * Note: When using "issue_and_send", both subject_text and body_text must be provided.
     */
    automation_level: Monite.AutomationLevel;
    /** The body text for the email that will be sent with the recurring invoice. */
    body_text?: string;
    /** Current iteration number */
    current_iteration: number;
    /** Deprecated, use `start_date` instead */
    day_of_month: Monite.DayOfMonth;
    /** The end date of the recurring invoice, in the `yyyy-mm-dd` format. The end date is inclusive, that is, the last invoice will be created on this date if the last occurrence falls on this date. `end_date` is mutually exclusive with `max_occurrences`. Either `end_date` or `max_occurrences` must be specified. */
    end_date?: string;
    /** Deprecated, use `end_date` instead */
    end_month?: number;
    /** Deprecated, use `end_date` instead */
    end_year?: number;
    /** How often the invoice will be created. */
    frequency: Monite.RecurrenceFrequency;
    /** The interval between each occurrence of the invoice. For example, when using monthly frequency, an interval of 1 means invoices will be created every month, an interval of 2 means invoices will be created every 2 months. */
    interval: number;
    /** ID of the base invoice that will be used as a template for creating recurring invoices. */
    invoice_id: string;
    /** List of iterations for the recurrence */
    iterations: Monite.RecurrenceIteration[];
    /** How many times the recurring invoice will be created. The recurrence will stop after this number is reached. `max_occurrences` is mutually exclusive with `end_date`. Either `max_occurrences` or `end_date` must be specified. */
    max_occurrences?: number;
    /** An object containing the recipients (To, CC, BCC) of the recurring invoices. Can be omitted if the base invoice has the counterpart contact email specified in the `counterpart_contact.email` field. */
    recipients?: Monite.Recipients;
    /** The date when the first invoice will be created, in the `yyyy-mm-dd` format. Cannot be a past date. Subsequent invoice dates will be calculated based on `start_date`, `frequency`, and `interval`. */
    start_date: string;
    /** Deprecated, use `start_date` instead */
    start_month: number;
    /** Deprecated, use `start_date` instead */
    start_year: number;
    /** Status of the recurrence */
    status: Monite.RecurrenceStatus;
    /** The subject for the email that will be sent with the recurring invoice. */
    subject_text?: string;
}
