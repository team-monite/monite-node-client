/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { MoniteClient } from "../../src/Client";

describe("Ocr", () => {
    test("get_ocr_tasks", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    document_type: "invoice",
                    recognized_data: {
                        recipient: { address: {}, bank_account: {} },
                        sender: { address: {}, bank_account: {} },
                        type: "invoice",
                    },
                    status: "processing",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        };
        server.mockEndpoint().get("/ocr_tasks").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.ocr.getOcrTasks();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    document_type: "invoice",
                    recognized_data: {
                        type: "invoice",
                        recipient: {
                            address: {},
                            bank_account: {},
                        },
                        sender: {
                            address: {},
                            bank_account: {},
                        },
                    },
                    status: "processing",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        });
    });

    test("post_ocr_tasks", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { file_url: "file_url" };
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            document_type: "invoice",
            recognized_data: {
                amount_paid: 1.1,
                currency: "AED",
                document_number: "document_number",
                due_date: "due_date",
                issue_date: "issue_date",
                line_items: [{}],
                payment_terms: "payment_terms",
                recipient: {
                    address: {},
                    bank_account: {},
                    email: "email",
                    name: "name",
                    tax_number: "tax_number",
                    vat_number: "vat_number",
                },
                sender: {
                    address: {},
                    bank_account: {},
                    email: "email",
                    name: "name",
                    tax_number: "tax_number",
                    vat_number: "vat_number",
                },
                subtotal: 1.1,
                tax_amount: 1.1,
                tax_rate: 1.1,
                total_amount: 1.1,
                type: "invoice",
            },
            status: "processing",
        };
        server
            .mockEndpoint()
            .post("/ocr_tasks")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.ocr.postOcrTasks({
            file_url: "file_url",
        });
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            document_type: "invoice",
            recognized_data: {
                type: "invoice",
                amount_paid: 1.1,
                currency: "AED",
                document_number: "document_number",
                due_date: "due_date",
                issue_date: "issue_date",
                line_items: [{}],
                payment_terms: "payment_terms",
                recipient: {
                    address: {},
                    bank_account: {},
                    email: "email",
                    name: "name",
                    tax_number: "tax_number",
                    vat_number: "vat_number",
                },
                sender: {
                    address: {},
                    bank_account: {},
                    email: "email",
                    name: "name",
                    tax_number: "tax_number",
                    vat_number: "vat_number",
                },
                subtotal: 1.1,
                tax_amount: 1.1,
                tax_rate: 1.1,
                total_amount: 1.1,
            },
            status: "processing",
        });
    });

    test("get_ocr_tasks_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            document_type: "invoice",
            recognized_data: {
                amount_paid: 1.1,
                currency: "AED",
                document_number: "document_number",
                due_date: "due_date",
                issue_date: "issue_date",
                line_items: [{}],
                payment_terms: "payment_terms",
                recipient: {
                    address: {},
                    bank_account: {},
                    email: "email",
                    name: "name",
                    tax_number: "tax_number",
                    vat_number: "vat_number",
                },
                sender: {
                    address: {},
                    bank_account: {},
                    email: "email",
                    name: "name",
                    tax_number: "tax_number",
                    vat_number: "vat_number",
                },
                subtotal: 1.1,
                tax_amount: 1.1,
                tax_rate: 1.1,
                total_amount: 1.1,
                type: "invoice",
            },
            status: "processing",
        };
        server.mockEndpoint().get("/ocr_tasks/task_id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.ocr.getOcrTasksId("task_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            document_type: "invoice",
            recognized_data: {
                type: "invoice",
                amount_paid: 1.1,
                currency: "AED",
                document_number: "document_number",
                due_date: "due_date",
                issue_date: "issue_date",
                line_items: [{}],
                payment_terms: "payment_terms",
                recipient: {
                    address: {},
                    bank_account: {},
                    email: "email",
                    name: "name",
                    tax_number: "tax_number",
                    vat_number: "vat_number",
                },
                sender: {
                    address: {},
                    bank_account: {},
                    email: "email",
                    name: "name",
                    tax_number: "tax_number",
                    vat_number: "vat_number",
                },
                subtotal: 1.1,
                tax_amount: 1.1,
                tax_rate: 1.1,
                total_amount: 1.1,
            },
            status: "processing",
        });
    });
});
