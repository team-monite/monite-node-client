/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { MoniteClient } from "../../../src/Client";

describe("OnboardingData", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            business_profile: {
                description_of_goods_or_services: "description_of_goods_or_services",
                estimated_monthly_revenue: { amount: 1, currency: "AED" },
                mcc: "mcc",
                operating_countries: ["AF"],
                url: "url",
            },
            ownership_declaration: { date: "2024-01-15T09:30:00Z", ip: "ip" },
            tos_acceptance: { date: "2024-01-15T09:30:00Z", ip: "ip" },
            treasury_tos_acceptance: { date: "2024-01-15T09:30:00Z", ip: "ip" },
        };
        server
            .mockEndpoint()
            .get("/entities/entity_id/onboarding_data")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entities.onboardingData.get("entity_id");
        expect(response).toEqual({
            business_profile: {
                description_of_goods_or_services: "description_of_goods_or_services",
                estimated_monthly_revenue: {
                    amount: 1,
                    currency: "AED",
                },
                mcc: "mcc",
                operating_countries: ["AF"],
                url: "url",
            },
            ownership_declaration: {
                date: "2024-01-15T09:30:00Z",
                ip: "ip",
            },
            tos_acceptance: {
                date: "2024-01-15T09:30:00Z",
                ip: "ip",
            },
            treasury_tos_acceptance: {
                date: "2024-01-15T09:30:00Z",
                ip: "ip",
            },
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            business_profile: {
                description_of_goods_or_services: "description_of_goods_or_services",
                estimated_monthly_revenue: { amount: 1, currency: "AED" },
                mcc: "mcc",
                operating_countries: ["AF"],
                url: "url",
            },
            ownership_declaration: { date: "2024-01-15T09:30:00Z", ip: "ip" },
            tos_acceptance: { date: "2024-01-15T09:30:00Z", ip: "ip" },
            treasury_tos_acceptance: { date: "2024-01-15T09:30:00Z", ip: "ip" },
        };
        server
            .mockEndpoint()
            .patch("/entities/entity_id/onboarding_data")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entities.onboardingData.update("entity_id");
        expect(response).toEqual({
            business_profile: {
                description_of_goods_or_services: "description_of_goods_or_services",
                estimated_monthly_revenue: {
                    amount: 1,
                    currency: "AED",
                },
                mcc: "mcc",
                operating_countries: ["AF"],
                url: "url",
            },
            ownership_declaration: {
                date: "2024-01-15T09:30:00Z",
                ip: "ip",
            },
            tos_acceptance: {
                date: "2024-01-15T09:30:00Z",
                ip: "ip",
            },
            treasury_tos_acceptance: {
                date: "2024-01-15T09:30:00Z",
                ip: "ip",
            },
        });
    });
});
