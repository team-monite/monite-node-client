/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { MoniteClient } from "../../src/Client";

describe("Products", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    entity_id: "entity_id",
                    entity_user_id: "entity_user_id",
                    external_reference: "HT-1234-S-BL",
                    ledger_account_id: "ledger_account_id",
                    measure_unit_id: "measure_unit_id",
                    name: "name",
                    price: { currency: "AED", value: 1 },
                    smallest_amount: 1.1,
                    type: "product",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        };
        server.mockEndpoint().get("/products").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.products.get();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    entity_id: "entity_id",
                    entity_user_id: "entity_user_id",
                    external_reference: "HT-1234-S-BL",
                    ledger_account_id: "ledger_account_id",
                    measure_unit_id: "measure_unit_id",
                    name: "name",
                    price: {
                        currency: "AED",
                        value: 1,
                    },
                    smallest_amount: 1.1,
                    type: "product",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            description: "description",
            entity_id: "entity_id",
            entity_user_id: "entity_user_id",
            external_reference: "HT-1234-S-BL",
            ledger_account_id: "ledger_account_id",
            measure_unit_id: "measure_unit_id",
            name: "name",
            price: { currency: "AED", value: 1 },
            smallest_amount: 1.1,
            type: "product",
        };
        server
            .mockEndpoint()
            .post("/products")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.products.create({
            name: "name",
        });
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            description: "description",
            entity_id: "entity_id",
            entity_user_id: "entity_user_id",
            external_reference: "HT-1234-S-BL",
            ledger_account_id: "ledger_account_id",
            measure_unit_id: "measure_unit_id",
            name: "name",
            price: {
                currency: "AED",
                value: 1,
            },
            smallest_amount: 1.1,
            type: "product",
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            description: "description",
            entity_id: "entity_id",
            entity_user_id: "entity_user_id",
            external_reference: "HT-1234-S-BL",
            ledger_account_id: "ledger_account_id",
            measure_unit_id: "measure_unit_id",
            name: "name",
            price: { currency: "AED", value: 1 },
            smallest_amount: 1.1,
            type: "product",
        };
        server
            .mockEndpoint()
            .get("/products/product_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.products.getById("product_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            description: "description",
            entity_id: "entity_id",
            entity_user_id: "entity_user_id",
            external_reference: "HT-1234-S-BL",
            ledger_account_id: "ledger_account_id",
            measure_unit_id: "measure_unit_id",
            name: "name",
            price: {
                currency: "AED",
                value: 1,
            },
            smallest_amount: 1.1,
            type: "product",
        });
    });

    test("delete_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        server.mockEndpoint().delete("/products/product_id").respondWith().statusCode(200).build();

        const response = await client.products.deleteById("product_id");
        expect(response).toEqual(undefined);
    });

    test("update_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            description: "description",
            entity_id: "entity_id",
            entity_user_id: "entity_user_id",
            external_reference: "HT-1234-S-BL",
            ledger_account_id: "ledger_account_id",
            measure_unit_id: "measure_unit_id",
            name: "name",
            price: { currency: "AED", value: 1 },
            smallest_amount: 1.1,
            type: "product",
        };
        server
            .mockEndpoint()
            .patch("/products/product_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.products.updateById("product_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            description: "description",
            entity_id: "entity_id",
            entity_user_id: "entity_user_id",
            external_reference: "HT-1234-S-BL",
            ledger_account_id: "ledger_account_id",
            measure_unit_id: "measure_unit_id",
            name: "name",
            price: {
                currency: "AED",
                value: 1,
            },
            smallest_amount: 1.1,
            type: "product",
        });
    });
});
