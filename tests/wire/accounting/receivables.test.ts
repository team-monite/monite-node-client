/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { MoniteClient } from "../../../src/Client";

describe("Receivables", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    currency: "EUR",
                    currency_rate: 1.1,
                    customer_ref: { id: "120", company_name: "Acme Inc." },
                    due_date: "2024-01-15T09:30:00Z",
                    invoice_number: "invoice_number",
                    lines: [{ description: "Logo design" }],
                    memo: "memo",
                    pass_through: { key: "value" },
                    posted_date: "posted_date",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/accounting/receivables")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounting.receivables.get();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    currency: "EUR",
                    currency_rate: 1.1,
                    customer_ref: {
                        id: "120",
                        company_name: "Acme Inc.",
                    },
                    due_date: "2024-01-15T09:30:00Z",
                    invoice_number: "invoice_number",
                    lines: [
                        {
                            description: "Logo design",
                        },
                    ],
                    memo: "memo",
                    pass_through: {
                        key: "value",
                    },
                    posted_date: "posted_date",
                },
            ],
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            currency: "EUR",
            currency_rate: 1.1,
            customer_ref: { id: "120", company_name: "Acme Inc." },
            due_date: "2024-01-15T09:30:00Z",
            invoice_number: "invoice_number",
            lines: [
                {
                    description: "Logo design",
                    discount_amount: 1.1,
                    discount_percentage: 1.1,
                    ledger_account_id: "ledger_account_id",
                    quantity: 1.1,
                    unit_amount: 1.1,
                },
            ],
            memo: "memo",
            pass_through: { key: "value" },
            posted_date: "posted_date",
        };
        server
            .mockEndpoint()
            .get("/accounting/receivables/invoice_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounting.receivables.getById("invoice_id");
        expect(response).toEqual({
            id: "id",
            currency: "EUR",
            currency_rate: 1.1,
            customer_ref: {
                id: "120",
                company_name: "Acme Inc.",
            },
            due_date: "2024-01-15T09:30:00Z",
            invoice_number: "invoice_number",
            lines: [
                {
                    description: "Logo design",
                    discount_amount: 1.1,
                    discount_percentage: 1.1,
                    ledger_account_id: "ledger_account_id",
                    quantity: 1.1,
                    unit_amount: 1.1,
                },
            ],
            memo: "memo",
            pass_through: {
                key: "value",
            },
            posted_date: "posted_date",
        });
    });
});
