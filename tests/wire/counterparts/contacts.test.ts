/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { MoniteClient } from "../../../src/Client";

describe("Contacts", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    address: { city: "Berlin", country: "AF", line1: "Flughafenstrasse 52", postal_code: "10115" },
                    counterpart_id: "counterpart_id",
                    email: "contact@example.org",
                    first_name: "Mary",
                    is_default: true,
                    last_name: "O'Brien",
                    phone: "5551235476",
                    title: "Ms.",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/counterparts/counterpart_id/contacts")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.counterparts.contacts.get("counterpart_id");
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    address: {
                        city: "Berlin",
                        country: "AF",
                        line1: "Flughafenstrasse 52",
                        postal_code: "10115",
                    },
                    counterpart_id: "counterpart_id",
                    email: "contact@example.org",
                    first_name: "Mary",
                    is_default: true,
                    last_name: "O'Brien",
                    phone: "5551235476",
                    title: "Ms.",
                },
            ],
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {
            address: { city: "Berlin", country: "AF", line1: "Flughafenstrasse 52", postal_code: "10115" },
            first_name: "Mary",
            last_name: "O'Brien",
        };
        const rawResponseBody = {
            id: "id",
            address: {
                city: "Berlin",
                country: "AF",
                line1: "Flughafenstrasse 52",
                line2: "line2",
                postal_code: "10115",
                state: "state",
            },
            counterpart_id: "counterpart_id",
            email: "contact@example.org",
            first_name: "Mary",
            is_default: true,
            last_name: "O'Brien",
            phone: "5551235476",
            title: "Ms.",
        };
        server
            .mockEndpoint()
            .post("/counterparts/counterpart_id/contacts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.counterparts.contacts.create("counterpart_id", {
            address: {
                city: "Berlin",
                country: "AF",
                line1: "Flughafenstrasse 52",
                postal_code: "10115",
            },
            first_name: "Mary",
            last_name: "O'Brien",
        });
        expect(response).toEqual({
            id: "id",
            address: {
                city: "Berlin",
                country: "AF",
                line1: "Flughafenstrasse 52",
                line2: "line2",
                postal_code: "10115",
                state: "state",
            },
            counterpart_id: "counterpart_id",
            email: "contact@example.org",
            first_name: "Mary",
            is_default: true,
            last_name: "O'Brien",
            phone: "5551235476",
            title: "Ms.",
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            address: {
                city: "Berlin",
                country: "AF",
                line1: "Flughafenstrasse 52",
                line2: "line2",
                postal_code: "10115",
                state: "state",
            },
            counterpart_id: "counterpart_id",
            email: "contact@example.org",
            first_name: "Mary",
            is_default: true,
            last_name: "O'Brien",
            phone: "5551235476",
            title: "Ms.",
        };
        server
            .mockEndpoint()
            .get("/counterparts/counterpart_id/contacts/contact_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.counterparts.contacts.getById("contact_id", "counterpart_id");
        expect(response).toEqual({
            id: "id",
            address: {
                city: "Berlin",
                country: "AF",
                line1: "Flughafenstrasse 52",
                line2: "line2",
                postal_code: "10115",
                state: "state",
            },
            counterpart_id: "counterpart_id",
            email: "contact@example.org",
            first_name: "Mary",
            is_default: true,
            last_name: "O'Brien",
            phone: "5551235476",
            title: "Ms.",
        });
    });

    test("delete_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        server
            .mockEndpoint()
            .delete("/counterparts/counterpart_id/contacts/contact_id")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.counterparts.contacts.deleteById("contact_id", "counterpart_id");
        expect(response).toEqual(undefined);
    });

    test("update_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            address: {
                city: "Berlin",
                country: "AF",
                line1: "Flughafenstrasse 52",
                line2: "line2",
                postal_code: "10115",
                state: "state",
            },
            counterpart_id: "counterpart_id",
            email: "contact@example.org",
            first_name: "Mary",
            is_default: true,
            last_name: "O'Brien",
            phone: "5551235476",
            title: "Ms.",
        };
        server
            .mockEndpoint()
            .patch("/counterparts/counterpart_id/contacts/contact_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.counterparts.contacts.updateById("contact_id", "counterpart_id");
        expect(response).toEqual({
            id: "id",
            address: {
                city: "Berlin",
                country: "AF",
                line1: "Flughafenstrasse 52",
                line2: "line2",
                postal_code: "10115",
                state: "state",
            },
            counterpart_id: "counterpart_id",
            email: "contact@example.org",
            first_name: "Mary",
            is_default: true,
            last_name: "O'Brien",
            phone: "5551235476",
            title: "Ms.",
        });
    });

    test("make_default_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            address: {
                city: "Berlin",
                country: "AF",
                line1: "Flughafenstrasse 52",
                line2: "line2",
                postal_code: "10115",
                state: "state",
            },
            counterpart_id: "counterpart_id",
            email: "contact@example.org",
            first_name: "Mary",
            is_default: true,
            last_name: "O'Brien",
            phone: "5551235476",
            title: "Ms.",
        };
        server
            .mockEndpoint()
            .post("/counterparts/counterpart_id/contacts/contact_id/make_default")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.counterparts.contacts.makeDefaultById("contact_id", "counterpart_id");
        expect(response).toEqual({
            id: "id",
            address: {
                city: "Berlin",
                country: "AF",
                line1: "Flughafenstrasse 52",
                line2: "line2",
                postal_code: "10115",
                state: "state",
            },
            counterpart_id: "counterpart_id",
            email: "contact@example.org",
            first_name: "Mary",
            is_default: true,
            last_name: "O'Brien",
            phone: "5551235476",
            title: "Ms.",
        });
    });
});
