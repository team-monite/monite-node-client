/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { MoniteClient } from "../../src/Client";

describe("PaymentIntents", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    updated_at: "2024-01-15T09:30:00Z",
                    amount: 1,
                    application_fee_amount: 1,
                    batch_payment_id: "batch_payment_id",
                    currency: "currency",
                    invoice: {
                        file: {
                            mimetype: "application/pdf",
                            name: "INV-00042.pdf",
                            url: "https://example.com/path/to/invoice.pdf",
                        },
                    },
                    object: { id: "id", type: "payable" },
                    payer: { id: "id", type: "entity" },
                    payment_link_id: "payment_link_id",
                    payment_methods: ["sepa_credit"],
                    payment_reference: "payment_reference",
                    provider: "provider",
                    recipient: { id: "id", type: "entity" },
                    selected_payment_method: "sepa_credit",
                    status: "status",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        };
        server.mockEndpoint().get("/payment_intents").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.paymentIntents.get();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    updated_at: "2024-01-15T09:30:00Z",
                    amount: 1,
                    application_fee_amount: 1,
                    batch_payment_id: "batch_payment_id",
                    currency: "currency",
                    invoice: {
                        file: {
                            mimetype: "application/pdf",
                            name: "INV-00042.pdf",
                            url: "https://example.com/path/to/invoice.pdf",
                        },
                    },
                    object: {
                        id: "id",
                        type: "payable",
                    },
                    payer: {
                        id: "id",
                        type: "entity",
                    },
                    payment_link_id: "payment_link_id",
                    payment_methods: ["sepa_credit"],
                    payment_reference: "payment_reference",
                    provider: "provider",
                    recipient: {
                        id: "id",
                        type: "entity",
                    },
                    selected_payment_method: "sepa_credit",
                    status: "status",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            updated_at: "2024-01-15T09:30:00Z",
            amount: 1,
            application_fee_amount: 1,
            batch_payment_id: "batch_payment_id",
            currency: "currency",
            invoice: {
                due_date: "due_date",
                file: {
                    mimetype: "application/pdf",
                    name: "INV-00042.pdf",
                    url: "https://example.com/path/to/invoice.pdf",
                },
                issue_date: "issue_date",
            },
            object: { id: "id", type: "payable" },
            payer: {
                id: "id",
                bank_accounts: [
                    {
                        id: "id",
                        account_holder_name: "Bob Jones",
                        account_number: "12345678",
                        bic: "DEUTDEFFXXX",
                        display_name: "Primary account",
                        iban: "DE74500700100100000900",
                        name: "Primary account",
                        sort_code: "123456",
                    },
                ],
                name: "name",
                type: "entity",
            },
            payment_link_id: "payment_link_id",
            payment_methods: ["sepa_credit"],
            payment_reference: "payment_reference",
            provider: "provider",
            recipient: {
                id: "id",
                bank_accounts: [
                    {
                        id: "id",
                        account_holder_name: "Bob Jones",
                        account_number: "12345678",
                        bic: "DEUTDEFFXXX",
                        display_name: "Primary account",
                        iban: "DE74500700100100000900",
                        name: "Primary account",
                        sort_code: "123456",
                    },
                ],
                name: "name",
                type: "entity",
            },
            selected_payment_method: "sepa_credit",
            status: "status",
        };
        server
            .mockEndpoint()
            .get("/payment_intents/payment_intent_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paymentIntents.getById("payment_intent_id");
        expect(response).toEqual({
            id: "id",
            updated_at: "2024-01-15T09:30:00Z",
            amount: 1,
            application_fee_amount: 1,
            batch_payment_id: "batch_payment_id",
            currency: "currency",
            invoice: {
                due_date: "due_date",
                file: {
                    mimetype: "application/pdf",
                    name: "INV-00042.pdf",
                    url: "https://example.com/path/to/invoice.pdf",
                },
                issue_date: "issue_date",
            },
            object: {
                id: "id",
                type: "payable",
            },
            payer: {
                id: "id",
                bank_accounts: [
                    {
                        id: "id",
                        account_holder_name: "Bob Jones",
                        account_number: "12345678",
                        bic: "DEUTDEFFXXX",
                        display_name: "Primary account",
                        iban: "DE74500700100100000900",
                        name: "Primary account",
                        sort_code: "123456",
                    },
                ],
                name: "name",
                type: "entity",
            },
            payment_link_id: "payment_link_id",
            payment_methods: ["sepa_credit"],
            payment_reference: "payment_reference",
            provider: "provider",
            recipient: {
                id: "id",
                bank_accounts: [
                    {
                        id: "id",
                        account_holder_name: "Bob Jones",
                        account_number: "12345678",
                        bic: "DEUTDEFFXXX",
                        display_name: "Primary account",
                        iban: "DE74500700100100000900",
                        name: "Primary account",
                        sort_code: "123456",
                    },
                ],
                name: "name",
                type: "entity",
            },
            selected_payment_method: "sepa_credit",
            status: "status",
        });
    });

    test("update_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { amount: 1 };
        const rawResponseBody = {
            id: "id",
            updated_at: "2024-01-15T09:30:00Z",
            amount: 1,
            application_fee_amount: 1,
            batch_payment_id: "batch_payment_id",
            currency: "currency",
            invoice: {
                due_date: "due_date",
                file: {
                    mimetype: "application/pdf",
                    name: "INV-00042.pdf",
                    url: "https://example.com/path/to/invoice.pdf",
                },
                issue_date: "issue_date",
            },
            object: { id: "id", type: "payable" },
            payer: {
                id: "id",
                bank_accounts: [
                    {
                        id: "id",
                        account_holder_name: "Bob Jones",
                        account_number: "12345678",
                        bic: "DEUTDEFFXXX",
                        display_name: "Primary account",
                        iban: "DE74500700100100000900",
                        name: "Primary account",
                        sort_code: "123456",
                    },
                ],
                name: "name",
                type: "entity",
            },
            payment_link_id: "payment_link_id",
            payment_methods: ["sepa_credit"],
            payment_reference: "payment_reference",
            provider: "provider",
            recipient: {
                id: "id",
                bank_accounts: [
                    {
                        id: "id",
                        account_holder_name: "Bob Jones",
                        account_number: "12345678",
                        bic: "DEUTDEFFXXX",
                        display_name: "Primary account",
                        iban: "DE74500700100100000900",
                        name: "Primary account",
                        sort_code: "123456",
                    },
                ],
                name: "name",
                type: "entity",
            },
            selected_payment_method: "sepa_credit",
            status: "status",
        };
        server
            .mockEndpoint()
            .patch("/payment_intents/payment_intent_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paymentIntents.updateById("payment_intent_id", {
            amount: 1,
        });
        expect(response).toEqual({
            id: "id",
            updated_at: "2024-01-15T09:30:00Z",
            amount: 1,
            application_fee_amount: 1,
            batch_payment_id: "batch_payment_id",
            currency: "currency",
            invoice: {
                due_date: "due_date",
                file: {
                    mimetype: "application/pdf",
                    name: "INV-00042.pdf",
                    url: "https://example.com/path/to/invoice.pdf",
                },
                issue_date: "issue_date",
            },
            object: {
                id: "id",
                type: "payable",
            },
            payer: {
                id: "id",
                bank_accounts: [
                    {
                        id: "id",
                        account_holder_name: "Bob Jones",
                        account_number: "12345678",
                        bic: "DEUTDEFFXXX",
                        display_name: "Primary account",
                        iban: "DE74500700100100000900",
                        name: "Primary account",
                        sort_code: "123456",
                    },
                ],
                name: "name",
                type: "entity",
            },
            payment_link_id: "payment_link_id",
            payment_methods: ["sepa_credit"],
            payment_reference: "payment_reference",
            provider: "provider",
            recipient: {
                id: "id",
                bank_accounts: [
                    {
                        id: "id",
                        account_holder_name: "Bob Jones",
                        account_number: "12345678",
                        bic: "DEUTDEFFXXX",
                        display_name: "Primary account",
                        iban: "DE74500700100100000900",
                        name: "Primary account",
                        sort_code: "123456",
                    },
                ],
                name: "name",
                type: "entity",
            },
            selected_payment_method: "sepa_credit",
            status: "status",
        });
    });

    test("get_history_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    payment_intent_id: "payment_intent_id",
                    status: "status",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/payment_intents/payment_intent_id/history")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paymentIntents.getHistoryById("payment_intent_id");
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    payment_intent_id: "payment_intent_id",
                    status: "status",
                },
            ],
        });
    });
});
