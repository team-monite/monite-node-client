/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { MoniteClient } from "../../../src/Client";

describe("PaymentMethods", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [{ direction: "receive", name: "SEPA Payments", status: "active", type: "sepa_credit" }],
        };
        server
            .mockEndpoint()
            .get("/entities/entity_id/payment_methods")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entities.paymentMethods.get("entity_id");
        expect(response).toEqual({
            data: [
                {
                    direction: "receive",
                    name: "SEPA Payments",
                    status: "active",
                    type: "sepa_credit",
                },
            ],
        });
    });

    test("set", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {
            payment_methods_receive: ["card", "sepa_credit", "sepa_debit"],
            payment_methods_send: ["sepa_credit"],
        };
        const rawResponseBody = {
            data: [{ direction: "receive", name: "SEPA Payments", status: "active", type: "sepa_credit" }],
        };
        server
            .mockEndpoint()
            .put("/entities/entity_id/payment_methods")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entities.paymentMethods.set("entity_id", {
            payment_methods_receive: ["card", "sepa_credit", "sepa_debit"],
            payment_methods_send: ["sepa_credit"],
        });
        expect(response).toEqual({
            data: [
                {
                    direction: "receive",
                    name: "SEPA Payments",
                    status: "active",
                    type: "sepa_credit",
                },
            ],
        });
    });
});
