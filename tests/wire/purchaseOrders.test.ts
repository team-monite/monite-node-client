/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { MoniteClient } from "../../src/Client";

describe("PurchaseOrders", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    counterpart: {
                        id: "id",
                        created_at: "2024-01-15T09:30:00Z",
                        updated_at: "2024-01-15T09:30:00Z",
                        individual: {
                            email: "asingh@example.net",
                            first_name: "Adnan",
                            is_customer: true,
                            is_vendor: true,
                            last_name: "Singh",
                            phone: "5553211234",
                            title: "Mr.",
                        },
                        type: "individual",
                    },
                    counterpart_address: {
                        city: "Berlin",
                        country: "AF",
                        line1: "Flughafenstrasse 52",
                        postal_code: "10115",
                    },
                    counterpart_address_id: "counterpart_address_id",
                    counterpart_id: "counterpart_id",
                    created_by_user_id: "created_by_user_id",
                    currency: "AED",
                    document_id: "document_id",
                    entity: {
                        id: "id",
                        created_at: "2024-01-15T09:30:00Z",
                        updated_at: "2024-01-15T09:30:00Z",
                        address: { city: "city", line1: "line1", postal_code: "postal_code" },
                        individual: { first_name: "first_name", last_name: "last_name" },
                        logo: {
                            id: "id",
                            created_at: "2024-01-15T09:30:00Z",
                            file_type: "payables",
                            md5: "31d1a2dd1ad3dfc39be849d70a68dac0",
                            mimetype: "application/pdf",
                            name: "invoice.pdf",
                            pages: [
                                {
                                    id: "id",
                                    mimetype: "image/png",
                                    number: 0,
                                    size: 21972,
                                    url: "https://bucket.s3.amazonaws.com/123/456.png",
                                },
                            ],
                            previews: [
                                { height: 400, url: "https://bucketname.s3.amazonaws.com/1/2/3.png", width: 200 },
                            ],
                            region: "eu-central-1",
                            size: 24381,
                            url: "https://bucketname.s3.amazonaws.com/12345/67890.pdf",
                        },
                        status: "active",
                    },
                    entity_id: "entity_id",
                    entity_vat_id: {
                        id: "id",
                        country: "country",
                        entity_id: "entity_id",
                        type: "type",
                        value: "value",
                    },
                    file_id: "file_id",
                    file_url: "file_url",
                    issued_at: "issued_at",
                    items: [{ currency: "AED", name: "name", price: 1, quantity: 1, unit: "unit", vat_rate: 1 }],
                    message: "message",
                    project_id: "project_id",
                    status: "status",
                    valid_for_days: 1,
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        };
        server
            .mockEndpoint()
            .get("/payable_purchase_orders")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.purchaseOrders.get();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    counterpart: {
                        id: "id",
                        created_at: "2024-01-15T09:30:00Z",
                        updated_at: "2024-01-15T09:30:00Z",
                        individual: {
                            email: "asingh@example.net",
                            first_name: "Adnan",
                            is_customer: true,
                            is_vendor: true,
                            last_name: "Singh",
                            phone: "5553211234",
                            title: "Mr.",
                        },
                        type: "individual",
                    },
                    counterpart_address: {
                        city: "Berlin",
                        country: "AF",
                        line1: "Flughafenstrasse 52",
                        postal_code: "10115",
                    },
                    counterpart_address_id: "counterpart_address_id",
                    counterpart_id: "counterpart_id",
                    created_by_user_id: "created_by_user_id",
                    currency: "AED",
                    document_id: "document_id",
                    entity: {
                        id: "id",
                        created_at: "2024-01-15T09:30:00Z",
                        updated_at: "2024-01-15T09:30:00Z",
                        address: {
                            city: "city",
                            line1: "line1",
                            postal_code: "postal_code",
                        },
                        individual: {
                            first_name: "first_name",
                            last_name: "last_name",
                        },
                        logo: {
                            id: "id",
                            created_at: "2024-01-15T09:30:00Z",
                            file_type: "payables",
                            md5: "31d1a2dd1ad3dfc39be849d70a68dac0",
                            mimetype: "application/pdf",
                            name: "invoice.pdf",
                            pages: [
                                {
                                    id: "id",
                                    mimetype: "image/png",
                                    number: 0,
                                    size: 21972,
                                    url: "https://bucket.s3.amazonaws.com/123/456.png",
                                },
                            ],
                            previews: [
                                {
                                    height: 400,
                                    url: "https://bucketname.s3.amazonaws.com/1/2/3.png",
                                    width: 200,
                                },
                            ],
                            region: "eu-central-1",
                            size: 24381,
                            url: "https://bucketname.s3.amazonaws.com/12345/67890.pdf",
                        },
                        status: "active",
                    },
                    entity_id: "entity_id",
                    entity_vat_id: {
                        id: "id",
                        country: "country",
                        entity_id: "entity_id",
                        type: "type",
                        value: "value",
                    },
                    file_id: "file_id",
                    file_url: "file_url",
                    issued_at: "issued_at",
                    items: [
                        {
                            currency: "AED",
                            name: "name",
                            price: 1,
                            quantity: 1,
                            unit: "unit",
                            vat_rate: 1,
                        },
                    ],
                    message: "message",
                    project_id: "project_id",
                    status: "status",
                    valid_for_days: 1,
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {
            counterpart_id: "counterpart_id",
            currency: "AED",
            items: [{ currency: "AED", name: "name", price: 1, quantity: 1, unit: "unit", vat_rate: 1 }],
            message: "message",
            valid_for_days: 1,
        };
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            counterpart: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                created_automatically: true,
                created_by_entity_user_id: "created_by_entity_user_id",
                default_billing_address_id: "default_billing_address_id",
                default_shipping_address_id: "default_shipping_address_id",
                individual: {
                    email: "asingh@example.net",
                    first_name: "Adnan",
                    is_customer: true,
                    is_vendor: true,
                    last_name: "Singh",
                    phone: "5553211234",
                    title: "Mr.",
                },
                language: "ab",
                reminders_enabled: true,
                tax_id: "tax_id",
                type: "individual",
            },
            counterpart_address: {
                city: "Berlin",
                country: "AF",
                line1: "Flughafenstrasse 52",
                line2: "line2",
                postal_code: "10115",
                state: "state",
            },
            counterpart_address_id: "counterpart_address_id",
            counterpart_id: "counterpart_id",
            created_by_user_id: "created_by_user_id",
            currency: "AED",
            document_id: "document_id",
            entity: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                address: {
                    city: "city",
                    country: "AF",
                    line1: "line1",
                    line2: "line2",
                    postal_code: "postal_code",
                    state: "state",
                },
                email: "email",
                individual: {
                    date_of_birth: "date_of_birth",
                    first_name: "first_name",
                    id_number: "id_number",
                    last_name: "last_name",
                    ssn_last_4: "ssn_last_4",
                    title: "title",
                },
                logo: {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    file_type: "payables",
                    md5: "31d1a2dd1ad3dfc39be849d70a68dac0",
                    mimetype: "application/pdf",
                    name: "invoice.pdf",
                    pages: [
                        {
                            id: "id",
                            mimetype: "image/png",
                            number: 0,
                            size: 21972,
                            url: "https://bucket.s3.amazonaws.com/123/456.png",
                        },
                    ],
                    previews: [{ height: 400, url: "https://bucketname.s3.amazonaws.com/1/2/3.png", width: 200 }],
                    region: "eu-central-1",
                    size: 24381,
                    url: "https://bucketname.s3.amazonaws.com/12345/67890.pdf",
                },
                phone: "phone",
                status: "active",
                tax_id: "tax_id",
                website: "website",
            },
            entity_id: "entity_id",
            entity_vat_id: { id: "id", country: "country", entity_id: "entity_id", type: "type", value: "value" },
            file_id: "file_id",
            file_url: "file_url",
            issued_at: "issued_at",
            items: [{ currency: "AED", name: "name", price: 1, quantity: 1, unit: "unit", vat_rate: 1 }],
            message: "message",
            project_id: "project_id",
            status: "status",
            valid_for_days: 1,
        };
        server
            .mockEndpoint()
            .post("/payable_purchase_orders")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.purchaseOrders.create({
            counterpart_id: "counterpart_id",
            currency: "AED",
            items: [
                {
                    currency: "AED",
                    name: "name",
                    price: 1,
                    quantity: 1,
                    unit: "unit",
                    vat_rate: 1,
                },
            ],
            message: "message",
            valid_for_days: 1,
        });
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            counterpart: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                created_automatically: true,
                created_by_entity_user_id: "created_by_entity_user_id",
                default_billing_address_id: "default_billing_address_id",
                default_shipping_address_id: "default_shipping_address_id",
                individual: {
                    email: "asingh@example.net",
                    first_name: "Adnan",
                    is_customer: true,
                    is_vendor: true,
                    last_name: "Singh",
                    phone: "5553211234",
                    title: "Mr.",
                },
                language: "ab",
                reminders_enabled: true,
                tax_id: "tax_id",
                type: "individual",
            },
            counterpart_address: {
                city: "Berlin",
                country: "AF",
                line1: "Flughafenstrasse 52",
                line2: "line2",
                postal_code: "10115",
                state: "state",
            },
            counterpart_address_id: "counterpart_address_id",
            counterpart_id: "counterpart_id",
            created_by_user_id: "created_by_user_id",
            currency: "AED",
            document_id: "document_id",
            entity: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                address: {
                    city: "city",
                    country: "AF",
                    line1: "line1",
                    line2: "line2",
                    postal_code: "postal_code",
                    state: "state",
                },
                email: "email",
                individual: {
                    date_of_birth: "date_of_birth",
                    first_name: "first_name",
                    id_number: "id_number",
                    last_name: "last_name",
                    ssn_last_4: "ssn_last_4",
                    title: "title",
                },
                logo: {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    file_type: "payables",
                    md5: "31d1a2dd1ad3dfc39be849d70a68dac0",
                    mimetype: "application/pdf",
                    name: "invoice.pdf",
                    pages: [
                        {
                            id: "id",
                            mimetype: "image/png",
                            number: 0,
                            size: 21972,
                            url: "https://bucket.s3.amazonaws.com/123/456.png",
                        },
                    ],
                    previews: [
                        {
                            height: 400,
                            url: "https://bucketname.s3.amazonaws.com/1/2/3.png",
                            width: 200,
                        },
                    ],
                    region: "eu-central-1",
                    size: 24381,
                    url: "https://bucketname.s3.amazonaws.com/12345/67890.pdf",
                },
                phone: "phone",
                status: "active",
                tax_id: "tax_id",
                website: "website",
            },
            entity_id: "entity_id",
            entity_vat_id: {
                id: "id",
                country: "country",
                entity_id: "entity_id",
                type: "type",
                value: "value",
            },
            file_id: "file_id",
            file_url: "file_url",
            issued_at: "issued_at",
            items: [
                {
                    currency: "AED",
                    name: "name",
                    price: 1,
                    quantity: 1,
                    unit: "unit",
                    vat_rate: 1,
                },
            ],
            message: "message",
            project_id: "project_id",
            status: "status",
            valid_for_days: 1,
        });
    });

    test("get_variables", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    object_subtype: "receivable",
                    object_type: "object_type",
                    variables: [{ description: "description", name: "name" }],
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/payable_purchase_orders/variables")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.purchaseOrders.getVariables();
        expect(response).toEqual({
            data: [
                {
                    object_subtype: "receivable",
                    object_type: "object_type",
                    variables: [
                        {
                            description: "description",
                            name: "name",
                        },
                    ],
                },
            ],
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            counterpart: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                created_automatically: true,
                created_by_entity_user_id: "created_by_entity_user_id",
                default_billing_address_id: "default_billing_address_id",
                default_shipping_address_id: "default_shipping_address_id",
                individual: {
                    email: "asingh@example.net",
                    first_name: "Adnan",
                    is_customer: true,
                    is_vendor: true,
                    last_name: "Singh",
                    phone: "5553211234",
                    title: "Mr.",
                },
                language: "ab",
                reminders_enabled: true,
                tax_id: "tax_id",
                type: "individual",
            },
            counterpart_address: {
                city: "Berlin",
                country: "AF",
                line1: "Flughafenstrasse 52",
                line2: "line2",
                postal_code: "10115",
                state: "state",
            },
            counterpart_address_id: "counterpart_address_id",
            counterpart_id: "counterpart_id",
            created_by_user_id: "created_by_user_id",
            currency: "AED",
            document_id: "document_id",
            entity: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                address: {
                    city: "city",
                    country: "AF",
                    line1: "line1",
                    line2: "line2",
                    postal_code: "postal_code",
                    state: "state",
                },
                email: "email",
                individual: {
                    date_of_birth: "date_of_birth",
                    first_name: "first_name",
                    id_number: "id_number",
                    last_name: "last_name",
                    ssn_last_4: "ssn_last_4",
                    title: "title",
                },
                logo: {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    file_type: "payables",
                    md5: "31d1a2dd1ad3dfc39be849d70a68dac0",
                    mimetype: "application/pdf",
                    name: "invoice.pdf",
                    pages: [
                        {
                            id: "id",
                            mimetype: "image/png",
                            number: 0,
                            size: 21972,
                            url: "https://bucket.s3.amazonaws.com/123/456.png",
                        },
                    ],
                    previews: [{ height: 400, url: "https://bucketname.s3.amazonaws.com/1/2/3.png", width: 200 }],
                    region: "eu-central-1",
                    size: 24381,
                    url: "https://bucketname.s3.amazonaws.com/12345/67890.pdf",
                },
                phone: "phone",
                status: "active",
                tax_id: "tax_id",
                website: "website",
            },
            entity_id: "entity_id",
            entity_vat_id: { id: "id", country: "country", entity_id: "entity_id", type: "type", value: "value" },
            file_id: "file_id",
            file_url: "file_url",
            issued_at: "issued_at",
            items: [{ currency: "AED", name: "name", price: 1, quantity: 1, unit: "unit", vat_rate: 1 }],
            message: "message",
            project_id: "project_id",
            status: "status",
            valid_for_days: 1,
        };
        server
            .mockEndpoint()
            .get("/payable_purchase_orders/purchase_order_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.purchaseOrders.getById("purchase_order_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            counterpart: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                created_automatically: true,
                created_by_entity_user_id: "created_by_entity_user_id",
                default_billing_address_id: "default_billing_address_id",
                default_shipping_address_id: "default_shipping_address_id",
                individual: {
                    email: "asingh@example.net",
                    first_name: "Adnan",
                    is_customer: true,
                    is_vendor: true,
                    last_name: "Singh",
                    phone: "5553211234",
                    title: "Mr.",
                },
                language: "ab",
                reminders_enabled: true,
                tax_id: "tax_id",
                type: "individual",
            },
            counterpart_address: {
                city: "Berlin",
                country: "AF",
                line1: "Flughafenstrasse 52",
                line2: "line2",
                postal_code: "10115",
                state: "state",
            },
            counterpart_address_id: "counterpart_address_id",
            counterpart_id: "counterpart_id",
            created_by_user_id: "created_by_user_id",
            currency: "AED",
            document_id: "document_id",
            entity: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                address: {
                    city: "city",
                    country: "AF",
                    line1: "line1",
                    line2: "line2",
                    postal_code: "postal_code",
                    state: "state",
                },
                email: "email",
                individual: {
                    date_of_birth: "date_of_birth",
                    first_name: "first_name",
                    id_number: "id_number",
                    last_name: "last_name",
                    ssn_last_4: "ssn_last_4",
                    title: "title",
                },
                logo: {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    file_type: "payables",
                    md5: "31d1a2dd1ad3dfc39be849d70a68dac0",
                    mimetype: "application/pdf",
                    name: "invoice.pdf",
                    pages: [
                        {
                            id: "id",
                            mimetype: "image/png",
                            number: 0,
                            size: 21972,
                            url: "https://bucket.s3.amazonaws.com/123/456.png",
                        },
                    ],
                    previews: [
                        {
                            height: 400,
                            url: "https://bucketname.s3.amazonaws.com/1/2/3.png",
                            width: 200,
                        },
                    ],
                    region: "eu-central-1",
                    size: 24381,
                    url: "https://bucketname.s3.amazonaws.com/12345/67890.pdf",
                },
                phone: "phone",
                status: "active",
                tax_id: "tax_id",
                website: "website",
            },
            entity_id: "entity_id",
            entity_vat_id: {
                id: "id",
                country: "country",
                entity_id: "entity_id",
                type: "type",
                value: "value",
            },
            file_id: "file_id",
            file_url: "file_url",
            issued_at: "issued_at",
            items: [
                {
                    currency: "AED",
                    name: "name",
                    price: 1,
                    quantity: 1,
                    unit: "unit",
                    vat_rate: 1,
                },
            ],
            message: "message",
            project_id: "project_id",
            status: "status",
            valid_for_days: 1,
        });
    });

    test("delete_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        server
            .mockEndpoint()
            .delete("/payable_purchase_orders/purchase_order_id")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.purchaseOrders.deleteById("purchase_order_id");
        expect(response).toEqual(undefined);
    });

    test("update_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            counterpart: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                created_automatically: true,
                created_by_entity_user_id: "created_by_entity_user_id",
                default_billing_address_id: "default_billing_address_id",
                default_shipping_address_id: "default_shipping_address_id",
                individual: {
                    email: "asingh@example.net",
                    first_name: "Adnan",
                    is_customer: true,
                    is_vendor: true,
                    last_name: "Singh",
                    phone: "5553211234",
                    title: "Mr.",
                },
                language: "ab",
                reminders_enabled: true,
                tax_id: "tax_id",
                type: "individual",
            },
            counterpart_address: {
                city: "Berlin",
                country: "AF",
                line1: "Flughafenstrasse 52",
                line2: "line2",
                postal_code: "10115",
                state: "state",
            },
            counterpart_address_id: "counterpart_address_id",
            counterpart_id: "counterpart_id",
            created_by_user_id: "created_by_user_id",
            currency: "AED",
            document_id: "document_id",
            entity: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                address: {
                    city: "city",
                    country: "AF",
                    line1: "line1",
                    line2: "line2",
                    postal_code: "postal_code",
                    state: "state",
                },
                email: "email",
                individual: {
                    date_of_birth: "date_of_birth",
                    first_name: "first_name",
                    id_number: "id_number",
                    last_name: "last_name",
                    ssn_last_4: "ssn_last_4",
                    title: "title",
                },
                logo: {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    file_type: "payables",
                    md5: "31d1a2dd1ad3dfc39be849d70a68dac0",
                    mimetype: "application/pdf",
                    name: "invoice.pdf",
                    pages: [
                        {
                            id: "id",
                            mimetype: "image/png",
                            number: 0,
                            size: 21972,
                            url: "https://bucket.s3.amazonaws.com/123/456.png",
                        },
                    ],
                    previews: [{ height: 400, url: "https://bucketname.s3.amazonaws.com/1/2/3.png", width: 200 }],
                    region: "eu-central-1",
                    size: 24381,
                    url: "https://bucketname.s3.amazonaws.com/12345/67890.pdf",
                },
                phone: "phone",
                status: "active",
                tax_id: "tax_id",
                website: "website",
            },
            entity_id: "entity_id",
            entity_vat_id: { id: "id", country: "country", entity_id: "entity_id", type: "type", value: "value" },
            file_id: "file_id",
            file_url: "file_url",
            issued_at: "issued_at",
            items: [{ currency: "AED", name: "name", price: 1, quantity: 1, unit: "unit", vat_rate: 1 }],
            message: "message",
            project_id: "project_id",
            status: "status",
            valid_for_days: 1,
        };
        server
            .mockEndpoint()
            .patch("/payable_purchase_orders/purchase_order_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.purchaseOrders.updateById("purchase_order_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            counterpart: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                created_automatically: true,
                created_by_entity_user_id: "created_by_entity_user_id",
                default_billing_address_id: "default_billing_address_id",
                default_shipping_address_id: "default_shipping_address_id",
                individual: {
                    email: "asingh@example.net",
                    first_name: "Adnan",
                    is_customer: true,
                    is_vendor: true,
                    last_name: "Singh",
                    phone: "5553211234",
                    title: "Mr.",
                },
                language: "ab",
                reminders_enabled: true,
                tax_id: "tax_id",
                type: "individual",
            },
            counterpart_address: {
                city: "Berlin",
                country: "AF",
                line1: "Flughafenstrasse 52",
                line2: "line2",
                postal_code: "10115",
                state: "state",
            },
            counterpart_address_id: "counterpart_address_id",
            counterpart_id: "counterpart_id",
            created_by_user_id: "created_by_user_id",
            currency: "AED",
            document_id: "document_id",
            entity: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                address: {
                    city: "city",
                    country: "AF",
                    line1: "line1",
                    line2: "line2",
                    postal_code: "postal_code",
                    state: "state",
                },
                email: "email",
                individual: {
                    date_of_birth: "date_of_birth",
                    first_name: "first_name",
                    id_number: "id_number",
                    last_name: "last_name",
                    ssn_last_4: "ssn_last_4",
                    title: "title",
                },
                logo: {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    file_type: "payables",
                    md5: "31d1a2dd1ad3dfc39be849d70a68dac0",
                    mimetype: "application/pdf",
                    name: "invoice.pdf",
                    pages: [
                        {
                            id: "id",
                            mimetype: "image/png",
                            number: 0,
                            size: 21972,
                            url: "https://bucket.s3.amazonaws.com/123/456.png",
                        },
                    ],
                    previews: [
                        {
                            height: 400,
                            url: "https://bucketname.s3.amazonaws.com/1/2/3.png",
                            width: 200,
                        },
                    ],
                    region: "eu-central-1",
                    size: 24381,
                    url: "https://bucketname.s3.amazonaws.com/12345/67890.pdf",
                },
                phone: "phone",
                status: "active",
                tax_id: "tax_id",
                website: "website",
            },
            entity_id: "entity_id",
            entity_vat_id: {
                id: "id",
                country: "country",
                entity_id: "entity_id",
                type: "type",
                value: "value",
            },
            file_id: "file_id",
            file_url: "file_url",
            issued_at: "issued_at",
            items: [
                {
                    currency: "AED",
                    name: "name",
                    price: 1,
                    quantity: 1,
                    unit: "unit",
                    vat_rate: 1,
                },
            ],
            message: "message",
            project_id: "project_id",
            status: "status",
            valid_for_days: 1,
        });
    });

    test("preview_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { body_text: "body_text", subject_text: "subject_text" };
        const rawResponseBody = { body_preview: "body_preview", subject_preview: "subject_preview" };
        server
            .mockEndpoint()
            .post("/payable_purchase_orders/purchase_order_id/preview")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.purchaseOrders.previewById("purchase_order_id", {
            body_text: "body_text",
            subject_text: "subject_text",
        });
        expect(response).toEqual({
            body_preview: "body_preview",
            subject_preview: "subject_preview",
        });
    });

    test("send_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { body_text: "body_text", subject_text: "subject_text" };
        const rawResponseBody = { mail_id: "mail_id" };
        server
            .mockEndpoint()
            .post("/payable_purchase_orders/purchase_order_id/send")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.purchaseOrders.sendById("purchase_order_id", {
            body_text: "body_text",
            subject_text: "subject_text",
        });
        expect(response).toEqual({
            mail_id: "mail_id",
        });
    });
});
