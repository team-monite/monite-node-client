/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { MoniteClient } from "../../src/Client";

describe("Analytics", () => {
    test("get_analytics_credit_notes", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = { data: [{ dimension_value: "dimension_value", metric_value: 1.1 }] };
        server
            .mockEndpoint()
            .get("/analytics/credit_notes")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.analytics.getAnalyticsCreditNotes({
            metric: "id",
            aggregation_function: "count",
        });
        expect(response).toEqual({
            data: [
                {
                    dimension_value: "dimension_value",
                    metric_value: 1.1,
                },
            ],
        });
    });

    test("get_analytics_payables", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = { data: [{ dimension_value: "dimension_value", metric_value: 1.1 }] };
        server
            .mockEndpoint()
            .get("/analytics/payables")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.analytics.getAnalyticsPayables({
            metric: "id",
            aggregation_function: "count",
        });
        expect(response).toEqual({
            data: [
                {
                    dimension_value: "dimension_value",
                    metric_value: 1.1,
                },
            ],
        });
    });

    test("get_analytics_receivables", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = { data: [{ dimension_value: "dimension_value", metric_value: 1 }] };
        server
            .mockEndpoint()
            .get("/analytics/receivables")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.analytics.getAnalyticsReceivables({
            metric: "id",
            aggregation_function: "count",
        });
        expect(response).toEqual({
            data: [
                {
                    dimension_value: "dimension_value",
                    metric_value: 1,
                },
            ],
        });
    });
});
