/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { MoniteClient } from "../../src/Client";
import * as Monite from "../../src/api/index";

describe("Entities", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    address: { city: "city", country: "AF", line1: "line1", postal_code: "postal_code" },
                    email: "email",
                    individual: { first_name: "first_name", last_name: "last_name" },
                    logo: {
                        id: "id",
                        created_at: "2024-01-15T09:30:00Z",
                        file_type: "payables",
                        md5: "31d1a2dd1ad3dfc39be849d70a68dac0",
                        mimetype: "application/pdf",
                        name: "invoice.pdf",
                        region: "eu-central-1",
                        size: 24381,
                        url: "https://bucketname.s3.amazonaws.com/12345/67890.pdf",
                    },
                    phone: "phone",
                    registration_authority: "registration_authority",
                    registration_number: "registration_number",
                    status: "active",
                    tax_id: "tax_id",
                    website: "website",
                    type: "individual",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        };
        server.mockEndpoint().get("/entities").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.entities.get();
        expect(response).toEqual({
            data: [
                {
                    type: "individual",
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    address: {
                        city: "city",
                        country: "AF",
                        line1: "line1",
                        postal_code: "postal_code",
                    },
                    email: "email",
                    individual: {
                        first_name: "first_name",
                        last_name: "last_name",
                    },
                    logo: {
                        id: "id",
                        created_at: "2024-01-15T09:30:00Z",
                        file_type: "payables",
                        md5: "31d1a2dd1ad3dfc39be849d70a68dac0",
                        mimetype: "application/pdf",
                        name: "invoice.pdf",
                        region: "eu-central-1",
                        size: 24381,
                        url: "https://bucketname.s3.amazonaws.com/12345/67890.pdf",
                    },
                    phone: "phone",
                    registration_authority: "registration_authority",
                    registration_number: "registration_number",
                    status: "active",
                    tax_id: "tax_id",
                    website: "website",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {
            address: { city: "city", country: "AF", line1: "line1", postal_code: "postal_code" },
            email: "email",
            type: "individual",
        };
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                city: "city",
                country: "AF",
                line1: "line1",
                line2: "line2",
                postal_code: "postal_code",
                state: "state",
            },
            email: "email",
            individual: {
                date_of_birth: "date_of_birth",
                first_name: "first_name",
                id_number: "id_number",
                last_name: "last_name",
                ssn_last_4: "ssn_last_4",
                title: "title",
            },
            logo: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                file_type: "payables",
                md5: "31d1a2dd1ad3dfc39be849d70a68dac0",
                mimetype: "application/pdf",
                name: "invoice.pdf",
                pages: [
                    {
                        id: "id",
                        mimetype: "image/png",
                        number: 0,
                        size: 21972,
                        url: "https://bucket.s3.amazonaws.com/123/456.png",
                    },
                ],
                previews: [{ height: 400, url: "https://bucketname.s3.amazonaws.com/1/2/3.png", width: 200 }],
                region: "eu-central-1",
                size: 24381,
                url: "https://bucketname.s3.amazonaws.com/12345/67890.pdf",
            },
            phone: "phone",
            registration_authority: "registration_authority",
            registration_number: "registration_number",
            status: "active",
            tax_id: "tax_id",
            website: "website",
            type: "individual",
        };
        server
            .mockEndpoint()
            .post("/entities")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entities.create({
            address: {
                city: "city",
                country: "AF",
                line1: "line1",
                postal_code: "postal_code",
            },
            email: "email",
            type: "individual",
        });
        expect(response).toEqual({
            type: "individual",
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                city: "city",
                country: "AF",
                line1: "line1",
                line2: "line2",
                postal_code: "postal_code",
                state: "state",
            },
            email: "email",
            individual: {
                date_of_birth: "date_of_birth",
                first_name: "first_name",
                id_number: "id_number",
                last_name: "last_name",
                ssn_last_4: "ssn_last_4",
                title: "title",
            },
            logo: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                file_type: "payables",
                md5: "31d1a2dd1ad3dfc39be849d70a68dac0",
                mimetype: "application/pdf",
                name: "invoice.pdf",
                pages: [
                    {
                        id: "id",
                        mimetype: "image/png",
                        number: 0,
                        size: 21972,
                        url: "https://bucket.s3.amazonaws.com/123/456.png",
                    },
                ],
                previews: [
                    {
                        height: 400,
                        url: "https://bucketname.s3.amazonaws.com/1/2/3.png",
                        width: 200,
                    },
                ],
                region: "eu-central-1",
                size: 24381,
                url: "https://bucketname.s3.amazonaws.com/12345/67890.pdf",
            },
            phone: "phone",
            registration_authority: "registration_authority",
            registration_number: "registration_number",
            status: "active",
            tax_id: "tax_id",
            website: "website",
        });
    });

    test("get_entities_me", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                city: "city",
                country: "AF",
                line1: "line1",
                line2: "line2",
                postal_code: "postal_code",
                state: "state",
            },
            email: "email",
            individual: {
                date_of_birth: "date_of_birth",
                first_name: "first_name",
                id_number: "id_number",
                last_name: "last_name",
                ssn_last_4: "ssn_last_4",
                title: "title",
            },
            logo: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                file_type: "payables",
                md5: "31d1a2dd1ad3dfc39be849d70a68dac0",
                mimetype: "application/pdf",
                name: "invoice.pdf",
                pages: [
                    {
                        id: "id",
                        mimetype: "image/png",
                        number: 0,
                        size: 21972,
                        url: "https://bucket.s3.amazonaws.com/123/456.png",
                    },
                ],
                previews: [{ height: 400, url: "https://bucketname.s3.amazonaws.com/1/2/3.png", width: 200 }],
                region: "eu-central-1",
                size: 24381,
                url: "https://bucketname.s3.amazonaws.com/12345/67890.pdf",
            },
            phone: "phone",
            registration_authority: "registration_authority",
            registration_number: "registration_number",
            status: "active",
            tax_id: "tax_id",
            website: "website",
            type: "individual",
        };
        server.mockEndpoint().get("/entities/me").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.entities.getEntitiesMe();
        expect(response).toEqual({
            type: "individual",
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                city: "city",
                country: "AF",
                line1: "line1",
                line2: "line2",
                postal_code: "postal_code",
                state: "state",
            },
            email: "email",
            individual: {
                date_of_birth: "date_of_birth",
                first_name: "first_name",
                id_number: "id_number",
                last_name: "last_name",
                ssn_last_4: "ssn_last_4",
                title: "title",
            },
            logo: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                file_type: "payables",
                md5: "31d1a2dd1ad3dfc39be849d70a68dac0",
                mimetype: "application/pdf",
                name: "invoice.pdf",
                pages: [
                    {
                        id: "id",
                        mimetype: "image/png",
                        number: 0,
                        size: 21972,
                        url: "https://bucket.s3.amazonaws.com/123/456.png",
                    },
                ],
                previews: [
                    {
                        height: 400,
                        url: "https://bucketname.s3.amazonaws.com/1/2/3.png",
                        width: 200,
                    },
                ],
                region: "eu-central-1",
                size: 24381,
                url: "https://bucketname.s3.amazonaws.com/12345/67890.pdf",
            },
            phone: "phone",
            registration_authority: "registration_authority",
            registration_number: "registration_number",
            status: "active",
            tax_id: "tax_id",
            website: "website",
        });
    });

    test("patch_entities_me", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                city: "city",
                country: "AF",
                line1: "line1",
                line2: "line2",
                postal_code: "postal_code",
                state: "state",
            },
            email: "email",
            individual: {
                date_of_birth: "date_of_birth",
                first_name: "first_name",
                id_number: "id_number",
                last_name: "last_name",
                ssn_last_4: "ssn_last_4",
                title: "title",
            },
            logo: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                file_type: "payables",
                md5: "31d1a2dd1ad3dfc39be849d70a68dac0",
                mimetype: "application/pdf",
                name: "invoice.pdf",
                pages: [
                    {
                        id: "id",
                        mimetype: "image/png",
                        number: 0,
                        size: 21972,
                        url: "https://bucket.s3.amazonaws.com/123/456.png",
                    },
                ],
                previews: [{ height: 400, url: "https://bucketname.s3.amazonaws.com/1/2/3.png", width: 200 }],
                region: "eu-central-1",
                size: 24381,
                url: "https://bucketname.s3.amazonaws.com/12345/67890.pdf",
            },
            phone: "phone",
            registration_authority: "registration_authority",
            registration_number: "registration_number",
            status: "active",
            tax_id: "tax_id",
            website: "website",
            type: "individual",
        };
        server
            .mockEndpoint()
            .patch("/entities/me")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entities.patchEntitiesMe({});
        expect(response).toEqual({
            type: "individual",
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                city: "city",
                country: "AF",
                line1: "line1",
                line2: "line2",
                postal_code: "postal_code",
                state: "state",
            },
            email: "email",
            individual: {
                date_of_birth: "date_of_birth",
                first_name: "first_name",
                id_number: "id_number",
                last_name: "last_name",
                ssn_last_4: "ssn_last_4",
                title: "title",
            },
            logo: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                file_type: "payables",
                md5: "31d1a2dd1ad3dfc39be849d70a68dac0",
                mimetype: "application/pdf",
                name: "invoice.pdf",
                pages: [
                    {
                        id: "id",
                        mimetype: "image/png",
                        number: 0,
                        size: 21972,
                        url: "https://bucket.s3.amazonaws.com/123/456.png",
                    },
                ],
                previews: [
                    {
                        height: 400,
                        url: "https://bucketname.s3.amazonaws.com/1/2/3.png",
                        width: 200,
                    },
                ],
                region: "eu-central-1",
                size: 24381,
                url: "https://bucketname.s3.amazonaws.com/12345/67890.pdf",
            },
            phone: "phone",
            registration_authority: "registration_authority",
            registration_number: "registration_number",
            status: "active",
            tax_id: "tax_id",
            website: "website",
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                city: "city",
                country: "AF",
                line1: "line1",
                line2: "line2",
                postal_code: "postal_code",
                state: "state",
            },
            email: "email",
            individual: {
                date_of_birth: "date_of_birth",
                first_name: "first_name",
                id_number: "id_number",
                last_name: "last_name",
                ssn_last_4: "ssn_last_4",
                title: "title",
            },
            logo: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                file_type: "payables",
                md5: "31d1a2dd1ad3dfc39be849d70a68dac0",
                mimetype: "application/pdf",
                name: "invoice.pdf",
                pages: [
                    {
                        id: "id",
                        mimetype: "image/png",
                        number: 0,
                        size: 21972,
                        url: "https://bucket.s3.amazonaws.com/123/456.png",
                    },
                ],
                previews: [{ height: 400, url: "https://bucketname.s3.amazonaws.com/1/2/3.png", width: 200 }],
                region: "eu-central-1",
                size: 24381,
                url: "https://bucketname.s3.amazonaws.com/12345/67890.pdf",
            },
            phone: "phone",
            registration_authority: "registration_authority",
            registration_number: "registration_number",
            status: "active",
            tax_id: "tax_id",
            website: "website",
            type: "individual",
        };
        server
            .mockEndpoint()
            .get("/entities/ea837e28-509b-4b6a-a600-d54b6aa0b1f5")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entities.getById("ea837e28-509b-4b6a-a600-d54b6aa0b1f5");
        expect(response).toEqual({
            type: "individual",
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                city: "city",
                country: "AF",
                line1: "line1",
                line2: "line2",
                postal_code: "postal_code",
                state: "state",
            },
            email: "email",
            individual: {
                date_of_birth: "date_of_birth",
                first_name: "first_name",
                id_number: "id_number",
                last_name: "last_name",
                ssn_last_4: "ssn_last_4",
                title: "title",
            },
            logo: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                file_type: "payables",
                md5: "31d1a2dd1ad3dfc39be849d70a68dac0",
                mimetype: "application/pdf",
                name: "invoice.pdf",
                pages: [
                    {
                        id: "id",
                        mimetype: "image/png",
                        number: 0,
                        size: 21972,
                        url: "https://bucket.s3.amazonaws.com/123/456.png",
                    },
                ],
                previews: [
                    {
                        height: 400,
                        url: "https://bucketname.s3.amazonaws.com/1/2/3.png",
                        width: 200,
                    },
                ],
                region: "eu-central-1",
                size: 24381,
                url: "https://bucketname.s3.amazonaws.com/12345/67890.pdf",
            },
            phone: "phone",
            registration_authority: "registration_authority",
            registration_number: "registration_number",
            status: "active",
            tax_id: "tax_id",
            website: "website",
        });
    });

    test("update_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                city: "city",
                country: "AF",
                line1: "line1",
                line2: "line2",
                postal_code: "postal_code",
                state: "state",
            },
            email: "email",
            individual: {
                date_of_birth: "date_of_birth",
                first_name: "first_name",
                id_number: "id_number",
                last_name: "last_name",
                ssn_last_4: "ssn_last_4",
                title: "title",
            },
            logo: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                file_type: "payables",
                md5: "31d1a2dd1ad3dfc39be849d70a68dac0",
                mimetype: "application/pdf",
                name: "invoice.pdf",
                pages: [
                    {
                        id: "id",
                        mimetype: "image/png",
                        number: 0,
                        size: 21972,
                        url: "https://bucket.s3.amazonaws.com/123/456.png",
                    },
                ],
                previews: [{ height: 400, url: "https://bucketname.s3.amazonaws.com/1/2/3.png", width: 200 }],
                region: "eu-central-1",
                size: 24381,
                url: "https://bucketname.s3.amazonaws.com/12345/67890.pdf",
            },
            phone: "phone",
            registration_authority: "registration_authority",
            registration_number: "registration_number",
            status: "active",
            tax_id: "tax_id",
            website: "website",
            type: "individual",
        };
        server
            .mockEndpoint()
            .patch("/entities/ea837e28-509b-4b6a-a600-d54b6aa0b1f5")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entities.updateById("ea837e28-509b-4b6a-a600-d54b6aa0b1f5", {});
        expect(response).toEqual({
            type: "individual",
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                city: "city",
                country: "AF",
                line1: "line1",
                line2: "line2",
                postal_code: "postal_code",
                state: "state",
            },
            email: "email",
            individual: {
                date_of_birth: "date_of_birth",
                first_name: "first_name",
                id_number: "id_number",
                last_name: "last_name",
                ssn_last_4: "ssn_last_4",
                title: "title",
            },
            logo: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                file_type: "payables",
                md5: "31d1a2dd1ad3dfc39be849d70a68dac0",
                mimetype: "application/pdf",
                name: "invoice.pdf",
                pages: [
                    {
                        id: "id",
                        mimetype: "image/png",
                        number: 0,
                        size: 21972,
                        url: "https://bucket.s3.amazonaws.com/123/456.png",
                    },
                ],
                previews: [
                    {
                        height: 400,
                        url: "https://bucketname.s3.amazonaws.com/1/2/3.png",
                        width: 200,
                    },
                ],
                region: "eu-central-1",
                size: 24381,
                url: "https://bucketname.s3.amazonaws.com/12345/67890.pdf",
            },
            phone: "phone",
            registration_authority: "registration_authority",
            registration_number: "registration_number",
            status: "active",
            tax_id: "tax_id",
            website: "website",
        });
    });

    test("post_entities_id_activate", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                city: "city",
                country: "AF",
                line1: "line1",
                line2: "line2",
                postal_code: "postal_code",
                state: "state",
            },
            email: "email",
            individual: {
                date_of_birth: "date_of_birth",
                first_name: "first_name",
                id_number: "id_number",
                last_name: "last_name",
                ssn_last_4: "ssn_last_4",
                title: "title",
            },
            logo: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                file_type: "payables",
                md5: "31d1a2dd1ad3dfc39be849d70a68dac0",
                mimetype: "application/pdf",
                name: "invoice.pdf",
                pages: [
                    {
                        id: "id",
                        mimetype: "image/png",
                        number: 0,
                        size: 21972,
                        url: "https://bucket.s3.amazonaws.com/123/456.png",
                    },
                ],
                previews: [{ height: 400, url: "https://bucketname.s3.amazonaws.com/1/2/3.png", width: 200 }],
                region: "eu-central-1",
                size: 24381,
                url: "https://bucketname.s3.amazonaws.com/12345/67890.pdf",
            },
            phone: "phone",
            registration_authority: "registration_authority",
            registration_number: "registration_number",
            status: "active",
            tax_id: "tax_id",
            website: "website",
            type: "individual",
        };
        server
            .mockEndpoint()
            .post("/entities/ea837e28-509b-4b6a-a600-d54b6aa0b1f5/activate")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entities.postEntitiesIdActivate("ea837e28-509b-4b6a-a600-d54b6aa0b1f5");
        expect(response).toEqual({
            type: "individual",
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                city: "city",
                country: "AF",
                line1: "line1",
                line2: "line2",
                postal_code: "postal_code",
                state: "state",
            },
            email: "email",
            individual: {
                date_of_birth: "date_of_birth",
                first_name: "first_name",
                id_number: "id_number",
                last_name: "last_name",
                ssn_last_4: "ssn_last_4",
                title: "title",
            },
            logo: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                file_type: "payables",
                md5: "31d1a2dd1ad3dfc39be849d70a68dac0",
                mimetype: "application/pdf",
                name: "invoice.pdf",
                pages: [
                    {
                        id: "id",
                        mimetype: "image/png",
                        number: 0,
                        size: 21972,
                        url: "https://bucket.s3.amazonaws.com/123/456.png",
                    },
                ],
                previews: [
                    {
                        height: 400,
                        url: "https://bucketname.s3.amazonaws.com/1/2/3.png",
                        width: 200,
                    },
                ],
                region: "eu-central-1",
                size: 24381,
                url: "https://bucketname.s3.amazonaws.com/12345/67890.pdf",
            },
            phone: "phone",
            registration_authority: "registration_authority",
            registration_number: "registration_number",
            status: "active",
            tax_id: "tax_id",
            website: "website",
        });
    });

    test("post_entities_id_deactivate", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                city: "city",
                country: "AF",
                line1: "line1",
                line2: "line2",
                postal_code: "postal_code",
                state: "state",
            },
            email: "email",
            individual: {
                date_of_birth: "date_of_birth",
                first_name: "first_name",
                id_number: "id_number",
                last_name: "last_name",
                ssn_last_4: "ssn_last_4",
                title: "title",
            },
            logo: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                file_type: "payables",
                md5: "31d1a2dd1ad3dfc39be849d70a68dac0",
                mimetype: "application/pdf",
                name: "invoice.pdf",
                pages: [
                    {
                        id: "id",
                        mimetype: "image/png",
                        number: 0,
                        size: 21972,
                        url: "https://bucket.s3.amazonaws.com/123/456.png",
                    },
                ],
                previews: [{ height: 400, url: "https://bucketname.s3.amazonaws.com/1/2/3.png", width: 200 }],
                region: "eu-central-1",
                size: 24381,
                url: "https://bucketname.s3.amazonaws.com/12345/67890.pdf",
            },
            phone: "phone",
            registration_authority: "registration_authority",
            registration_number: "registration_number",
            status: "active",
            tax_id: "tax_id",
            website: "website",
            type: "individual",
        };
        server
            .mockEndpoint()
            .post("/entities/ea837e28-509b-4b6a-a600-d54b6aa0b1f5/deactivate")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entities.postEntitiesIdDeactivate("ea837e28-509b-4b6a-a600-d54b6aa0b1f5");
        expect(response).toEqual({
            type: "individual",
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                city: "city",
                country: "AF",
                line1: "line1",
                line2: "line2",
                postal_code: "postal_code",
                state: "state",
            },
            email: "email",
            individual: {
                date_of_birth: "date_of_birth",
                first_name: "first_name",
                id_number: "id_number",
                last_name: "last_name",
                ssn_last_4: "ssn_last_4",
                title: "title",
            },
            logo: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                file_type: "payables",
                md5: "31d1a2dd1ad3dfc39be849d70a68dac0",
                mimetype: "application/pdf",
                name: "invoice.pdf",
                pages: [
                    {
                        id: "id",
                        mimetype: "image/png",
                        number: 0,
                        size: 21972,
                        url: "https://bucket.s3.amazonaws.com/123/456.png",
                    },
                ],
                previews: [
                    {
                        height: 400,
                        url: "https://bucketname.s3.amazonaws.com/1/2/3.png",
                        width: 200,
                    },
                ],
                region: "eu-central-1",
                size: 24381,
                url: "https://bucketname.s3.amazonaws.com/12345/67890.pdf",
            },
            phone: "phone",
            registration_authority: "registration_authority",
            registration_number: "registration_number",
            status: "active",
            tax_id: "tax_id",
            website: "website",
        });
    });

    test("delete_logo_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        server
            .mockEndpoint()
            .delete("/entities/ea837e28-509b-4b6a-a600-d54b6aa0b1f5/logo")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.entities.deleteLogoById("ea837e28-509b-4b6a-a600-d54b6aa0b1f5");
        expect(response).toEqual(undefined);
    });

    test("get_partner_metadata_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = { metadata: { key: "value" } };
        server
            .mockEndpoint()
            .get("/entities/entity_id/partner_metadata")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entities.getPartnerMetadataById("entity_id");
        expect(response).toEqual({
            metadata: {
                key: "value",
            },
        });
    });

    test("update_partner_metadata_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { metadata: { key: "value" } };
        const rawResponseBody = { metadata: { key: "value" } };
        server
            .mockEndpoint()
            .put("/entities/entity_id/partner_metadata")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entities.updatePartnerMetadataById("entity_id", {
            metadata: {
                key: "value",
            },
        });
        expect(response).toEqual({
            metadata: {
                key: "value",
            },
        });
    });

    test("get_settings_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            accounting: {
                ledger_account_ids: { payments: "payments", products: "products" },
                tax_ids: { deductions: "deductions" },
            },
            allow_purchase_order_autolinking: true,
            currency: { default: "AED", exchange_rates: [{ base: "AED", rate: 0.98, to: "AED" }] },
            document_ids: {
                document_type_prefix: {
                    credit_note: "credit_note",
                    delivery_note: "delivery_note",
                    invoice: "invoice",
                    purchase_order: "purchase_order",
                    quote: "quote",
                },
                include_date: true,
                min_digits: 1,
                prefix: "prefix",
                separator: "/",
            },
            document_rendering: {
                credit_note: { display_entity_bank_account: true },
                display_entity_bank_account: true,
                display_line_items: true,
                invoice: { display_entity_bank_account: true },
                quote: { display_entity_bank_account: true, display_signature: true },
            },
            generate_paid_invoice_pdf: true,
            language: "ab",
            payables_ocr_auto_tagging: [{ enabled: true, keywords: ["keywords"], tag_id: "tag_id" }],
            payables_skip_approval_flow: true,
            payment_priority: "working_capital",
            quote_signature_required: true,
            receivable_edit_flow: "compliant",
            reminder: { enabled: true },
            vat_inclusive_discount_mode: "exclusive",
            vat_mode: "exclusive",
        };
        server
            .mockEndpoint()
            .get("/entities/ea837e28-509b-4b6a-a600-d54b6aa0b1f5/settings")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entities.getSettingsById("ea837e28-509b-4b6a-a600-d54b6aa0b1f5");
        expect(response).toEqual({
            accounting: {
                ledger_account_ids: {
                    payments: "payments",
                    products: "products",
                },
                tax_ids: {
                    deductions: "deductions",
                },
            },
            allow_purchase_order_autolinking: true,
            currency: {
                default: "AED",
                exchange_rates: [
                    {
                        base: "AED",
                        rate: 0.98,
                        to: "AED",
                    },
                ],
            },
            document_ids: {
                document_type_prefix: {
                    credit_note: "credit_note",
                    delivery_note: "delivery_note",
                    invoice: "invoice",
                    purchase_order: "purchase_order",
                    quote: "quote",
                },
                include_date: true,
                min_digits: 1,
                prefix: "prefix",
                separator: "/",
            },
            document_rendering: {
                credit_note: {
                    display_entity_bank_account: true,
                },
                display_entity_bank_account: true,
                display_line_items: true,
                invoice: {
                    display_entity_bank_account: true,
                },
                quote: {
                    display_entity_bank_account: true,
                    display_signature: true,
                },
            },
            generate_paid_invoice_pdf: true,
            language: "ab",
            payables_ocr_auto_tagging: [
                {
                    enabled: true,
                    keywords: ["keywords"],
                    tag_id: "tag_id",
                },
            ],
            payables_skip_approval_flow: true,
            payment_priority: "working_capital",
            quote_signature_required: true,
            receivable_edit_flow: "compliant",
            reminder: {
                enabled: true,
            },
            vat_inclusive_discount_mode: "exclusive",
            vat_mode: "exclusive",
        });
    });

    test("update_settings_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            accounting: {
                ledger_account_ids: { payments: "payments", products: "products" },
                tax_ids: { deductions: "deductions" },
            },
            allow_purchase_order_autolinking: true,
            currency: { default: "AED", exchange_rates: [{ base: "AED", rate: 0.98, to: "AED" }] },
            document_ids: {
                document_type_prefix: {
                    credit_note: "credit_note",
                    delivery_note: "delivery_note",
                    invoice: "invoice",
                    purchase_order: "purchase_order",
                    quote: "quote",
                },
                include_date: true,
                min_digits: 1,
                prefix: "prefix",
                separator: "/",
            },
            document_rendering: {
                credit_note: { display_entity_bank_account: true },
                display_entity_bank_account: true,
                display_line_items: true,
                invoice: { display_entity_bank_account: true },
                quote: { display_entity_bank_account: true, display_signature: true },
            },
            generate_paid_invoice_pdf: true,
            language: "ab",
            payables_ocr_auto_tagging: [{ enabled: true, keywords: ["keywords"], tag_id: "tag_id" }],
            payables_skip_approval_flow: true,
            payment_priority: "working_capital",
            quote_signature_required: true,
            receivable_edit_flow: "compliant",
            reminder: { enabled: true },
            vat_inclusive_discount_mode: "exclusive",
            vat_mode: "exclusive",
        };
        server
            .mockEndpoint()
            .patch("/entities/ea837e28-509b-4b6a-a600-d54b6aa0b1f5/settings")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entities.updateSettingsById("ea837e28-509b-4b6a-a600-d54b6aa0b1f5");
        expect(response).toEqual({
            accounting: {
                ledger_account_ids: {
                    payments: "payments",
                    products: "products",
                },
                tax_ids: {
                    deductions: "deductions",
                },
            },
            allow_purchase_order_autolinking: true,
            currency: {
                default: "AED",
                exchange_rates: [
                    {
                        base: "AED",
                        rate: 0.98,
                        to: "AED",
                    },
                ],
            },
            document_ids: {
                document_type_prefix: {
                    credit_note: "credit_note",
                    delivery_note: "delivery_note",
                    invoice: "invoice",
                    purchase_order: "purchase_order",
                    quote: "quote",
                },
                include_date: true,
                min_digits: 1,
                prefix: "prefix",
                separator: "/",
            },
            document_rendering: {
                credit_note: {
                    display_entity_bank_account: true,
                },
                display_entity_bank_account: true,
                display_line_items: true,
                invoice: {
                    display_entity_bank_account: true,
                },
                quote: {
                    display_entity_bank_account: true,
                    display_signature: true,
                },
            },
            generate_paid_invoice_pdf: true,
            language: "ab",
            payables_ocr_auto_tagging: [
                {
                    enabled: true,
                    keywords: ["keywords"],
                    tag_id: "tag_id",
                },
            ],
            payables_skip_approval_flow: true,
            payment_priority: "working_capital",
            quote_signature_required: true,
            receivable_edit_flow: "compliant",
            reminder: {
                enabled: true,
            },
            vat_inclusive_discount_mode: "exclusive",
            vat_mode: "exclusive",
        });
    });

    test("get_entities_id_settings_next_document_numbers", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = { credit_note: 1, delivery_note: 1, invoice: 1, purchase_order: 1, quote: 1 };
        server
            .mockEndpoint()
            .get("/entities/entity_id/settings/next_document_numbers")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entities.getEntitiesIdSettingsNextDocumentNumbers("entity_id");
        expect(response).toEqual({
            credit_note: 1,
            delivery_note: 1,
            invoice: 1,
            purchase_order: 1,
            quote: 1,
        });
    });

    test("upload_onboarding_documents", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};

        server
            .mockEndpoint()
            .post("/onboarding_documents")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.entities.uploadOnboardingDocuments();
        expect(response).toEqual(undefined);
    });

    test("get_onboarding_requirements", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    disabled_reason: "disabled_reason",
                    payment_method: "payment_method",
                    requirements: {
                        currently_due: ["currently_due"],
                        eventually_due: ["eventually_due"],
                        past_due: ["past_due"],
                        pending_verification: ["pending_verification"],
                    },
                    requirements_errors: [{ code: "code", reason: "reason", requirement: "requirement" }],
                    verification_errors: [{ code: "code", details: "details" }],
                    verification_status: "enabled",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/onboarding_requirements")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entities.getOnboardingRequirements();
        expect(response).toEqual({
            data: [
                {
                    disabled_reason: "disabled_reason",
                    payment_method: "payment_method",
                    requirements: {
                        currently_due: ["currently_due"],
                        eventually_due: ["eventually_due"],
                        past_due: ["past_due"],
                        pending_verification: ["pending_verification"],
                    },
                    requirements_errors: [
                        {
                            code: "code",
                            reason: "reason",
                            requirement: "requirement",
                        },
                    ],
                    verification_errors: [
                        {
                            code: "code",
                            details: "details",
                        },
                    ],
                    verification_status: "enabled",
                },
            ],
        });
    });
});
