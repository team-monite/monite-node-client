/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { MoniteClient } from "../../../src/Client";

describe("Persons", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    address: { city: "city", country: "country", line1: "line1", postal_code: "postal_code" },
                    citizenship: "AF",
                    created_by_entity_user_id: "created_by_entity_user_id",
                    date_of_birth: "date_of_birth",
                    email: "email",
                    entity_id: "entity_id",
                    first_name: "first_name",
                    id_number: "id_number",
                    last_name: "last_name",
                    phone: "phone",
                    relationship: {},
                    ssn_last_4: "ssn_last_4",
                },
            ],
        };
        server.mockEndpoint().get("/persons").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.entities.persons.get();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    address: {
                        city: "city",
                        country: "country",
                        line1: "line1",
                        postal_code: "postal_code",
                    },
                    citizenship: "AF",
                    created_by_entity_user_id: "created_by_entity_user_id",
                    date_of_birth: "date_of_birth",
                    email: "email",
                    entity_id: "entity_id",
                    first_name: "first_name",
                    id_number: "id_number",
                    last_name: "last_name",
                    phone: "phone",
                    relationship: {},
                    ssn_last_4: "ssn_last_4",
                },
            ],
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { email: "email", first_name: "first_name", last_name: "last_name", relationship: {} };
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                city: "city",
                country: "country",
                line1: "line1",
                line2: "line2",
                postal_code: "postal_code",
                state: "state",
            },
            citizenship: "AF",
            created_by_entity_user_id: "created_by_entity_user_id",
            date_of_birth: "date_of_birth",
            email: "email",
            entity_id: "entity_id",
            first_name: "first_name",
            id_number: "id_number",
            last_name: "last_name",
            phone: "phone",
            relationship: {
                director: true,
                executive: true,
                owner: true,
                percent_ownership: 1.1,
                representative: true,
                title: "title",
            },
            ssn_last_4: "ssn_last_4",
        };
        server
            .mockEndpoint()
            .post("/persons")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entities.persons.create({
            email: "email",
            first_name: "first_name",
            last_name: "last_name",
            relationship: {},
        });
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                city: "city",
                country: "country",
                line1: "line1",
                line2: "line2",
                postal_code: "postal_code",
                state: "state",
            },
            citizenship: "AF",
            created_by_entity_user_id: "created_by_entity_user_id",
            date_of_birth: "date_of_birth",
            email: "email",
            entity_id: "entity_id",
            first_name: "first_name",
            id_number: "id_number",
            last_name: "last_name",
            phone: "phone",
            relationship: {
                director: true,
                executive: true,
                owner: true,
                percent_ownership: 1.1,
                representative: true,
                title: "title",
            },
            ssn_last_4: "ssn_last_4",
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                city: "city",
                country: "country",
                line1: "line1",
                line2: "line2",
                postal_code: "postal_code",
                state: "state",
            },
            citizenship: "AF",
            created_by_entity_user_id: "created_by_entity_user_id",
            date_of_birth: "date_of_birth",
            email: "email",
            entity_id: "entity_id",
            first_name: "first_name",
            id_number: "id_number",
            last_name: "last_name",
            phone: "phone",
            relationship: {
                director: true,
                executive: true,
                owner: true,
                percent_ownership: 1.1,
                representative: true,
                title: "title",
            },
            ssn_last_4: "ssn_last_4",
        };
        server.mockEndpoint().get("/persons/person_id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.entities.persons.getById("person_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                city: "city",
                country: "country",
                line1: "line1",
                line2: "line2",
                postal_code: "postal_code",
                state: "state",
            },
            citizenship: "AF",
            created_by_entity_user_id: "created_by_entity_user_id",
            date_of_birth: "date_of_birth",
            email: "email",
            entity_id: "entity_id",
            first_name: "first_name",
            id_number: "id_number",
            last_name: "last_name",
            phone: "phone",
            relationship: {
                director: true,
                executive: true,
                owner: true,
                percent_ownership: 1.1,
                representative: true,
                title: "title",
            },
            ssn_last_4: "ssn_last_4",
        });
    });

    test("delete_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        server.mockEndpoint().delete("/persons/person_id").respondWith().statusCode(200).build();

        const response = await client.entities.persons.deleteById("person_id");
        expect(response).toEqual(undefined);
    });

    test("update_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                city: "city",
                country: "country",
                line1: "line1",
                line2: "line2",
                postal_code: "postal_code",
                state: "state",
            },
            citizenship: "AF",
            created_by_entity_user_id: "created_by_entity_user_id",
            date_of_birth: "date_of_birth",
            email: "email",
            entity_id: "entity_id",
            first_name: "first_name",
            id_number: "id_number",
            last_name: "last_name",
            phone: "phone",
            relationship: {
                director: true,
                executive: true,
                owner: true,
                percent_ownership: 1.1,
                representative: true,
                title: "title",
            },
            ssn_last_4: "ssn_last_4",
        };
        server
            .mockEndpoint()
            .patch("/persons/person_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entities.persons.updateById("person_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                city: "city",
                country: "country",
                line1: "line1",
                line2: "line2",
                postal_code: "postal_code",
                state: "state",
            },
            citizenship: "AF",
            created_by_entity_user_id: "created_by_entity_user_id",
            date_of_birth: "date_of_birth",
            email: "email",
            entity_id: "entity_id",
            first_name: "first_name",
            id_number: "id_number",
            last_name: "last_name",
            phone: "phone",
            relationship: {
                director: true,
                executive: true,
                owner: true,
                percent_ownership: 1.1,
                representative: true,
                title: "title",
            },
            ssn_last_4: "ssn_last_4",
        });
    });

    test("upload_onboarding_documents", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};

        server
            .mockEndpoint()
            .post("/persons/person_id/onboarding_documents")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.entities.persons.uploadOnboardingDocuments("person_id");
        expect(response).toEqual(undefined);
    });
});
