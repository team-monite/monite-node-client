/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Monite from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";
import * as fs from "fs";

export declare namespace CreditNotes {
    export interface Options {
        environment?: core.Supplier<environments.MoniteEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the x-monite-version header */
        moniteVersion: core.Supplier<string>;
        /** Override the x-monite-entity-id header */
        moniteEntityId?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-monite-version header */
        moniteVersion?: string;
        /** Override the x-monite-entity-id header */
        moniteEntityId?: string | undefined;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class CreditNotes {
    protected readonly _options: CreditNotes.Options;

    constructor(_options: CreditNotes.Options) {
        this._options = _options;
    }

    /**
     * @param {Monite.GetPayableCreditNotesRequest} request
     * @param {CreditNotes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.BadRequestError}
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.ForbiddenError}
     * @throws {@link Monite.NotAcceptableError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.creditNotes.getPayableCreditNotes()
     */
    public getPayableCreditNotes(
        request: Monite.GetPayableCreditNotesRequest = {},
        requestOptions?: CreditNotes.RequestOptions,
    ): core.HttpResponsePromise<Monite.CreditNotePaginationResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getPayableCreditNotes(request, requestOptions));
    }

    private async __getPayableCreditNotes(
        request: Monite.GetPayableCreditNotesRequest = {},
        requestOptions?: CreditNotes.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.CreditNotePaginationResponse>> {
        const {
            order,
            limit,
            pagination_token: paginationToken,
            sort,
            created_at__gt: createdAtGt,
            created_at__lt: createdAtLt,
            created_at__gte: createdAtGte,
            created_at__lte: createdAtLte,
            issued_at: issuedAt,
            issued_at__gt: issuedAtGt,
            issued_at__lt: issuedAtLt,
            issued_at__gte: issuedAtGte,
            issued_at__lte: issuedAtLte,
            document_id: documentId,
            document_id__iexact: documentIdIexact,
            document_id__contains: documentIdContains,
            document_id__icontains: documentIdIcontains,
            has_file: hasFile,
            total_amount__gt: totalAmountGt,
            total_amount__lt: totalAmountLt,
            total_amount__gte: totalAmountGte,
            total_amount__lte: totalAmountLte,
            subtotal__gt: subtotalGt,
            subtotal__lt: subtotalLt,
            subtotal__gte: subtotalGte,
            subtotal__lte: subtotalLte,
            based_on: basedOn,
            counterpart_id: counterpartId,
            created_by_entity_user_id: createdByEntityUserId,
            status,
            status__in: statusIn,
            status__not_in: statusNotIn,
            origin,
            currency,
            project_id: projectId,
            project_id__in: projectIdIn,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (order != null) {
            _queryParams["order"] = order;
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (paginationToken != null) {
            _queryParams["pagination_token"] = paginationToken;
        }

        if (sort != null) {
            _queryParams["sort"] = sort;
        }

        if (createdAtGt != null) {
            _queryParams["created_at__gt"] = createdAtGt;
        }

        if (createdAtLt != null) {
            _queryParams["created_at__lt"] = createdAtLt;
        }

        if (createdAtGte != null) {
            _queryParams["created_at__gte"] = createdAtGte;
        }

        if (createdAtLte != null) {
            _queryParams["created_at__lte"] = createdAtLte;
        }

        if (issuedAt != null) {
            _queryParams["issued_at"] = issuedAt;
        }

        if (issuedAtGt != null) {
            _queryParams["issued_at__gt"] = issuedAtGt;
        }

        if (issuedAtLt != null) {
            _queryParams["issued_at__lt"] = issuedAtLt;
        }

        if (issuedAtGte != null) {
            _queryParams["issued_at__gte"] = issuedAtGte;
        }

        if (issuedAtLte != null) {
            _queryParams["issued_at__lte"] = issuedAtLte;
        }

        if (documentId != null) {
            _queryParams["document_id"] = documentId;
        }

        if (documentIdIexact != null) {
            _queryParams["document_id__iexact"] = documentIdIexact;
        }

        if (documentIdContains != null) {
            _queryParams["document_id__contains"] = documentIdContains;
        }

        if (documentIdIcontains != null) {
            _queryParams["document_id__icontains"] = documentIdIcontains;
        }

        if (hasFile != null) {
            _queryParams["has_file"] = hasFile.toString();
        }

        if (totalAmountGt != null) {
            _queryParams["total_amount__gt"] = totalAmountGt.toString();
        }

        if (totalAmountLt != null) {
            _queryParams["total_amount__lt"] = totalAmountLt.toString();
        }

        if (totalAmountGte != null) {
            _queryParams["total_amount__gte"] = totalAmountGte.toString();
        }

        if (totalAmountLte != null) {
            _queryParams["total_amount__lte"] = totalAmountLte.toString();
        }

        if (subtotalGt != null) {
            _queryParams["subtotal__gt"] = subtotalGt.toString();
        }

        if (subtotalLt != null) {
            _queryParams["subtotal__lt"] = subtotalLt.toString();
        }

        if (subtotalGte != null) {
            _queryParams["subtotal__gte"] = subtotalGte.toString();
        }

        if (subtotalLte != null) {
            _queryParams["subtotal__lte"] = subtotalLte.toString();
        }

        if (basedOn != null) {
            _queryParams["based_on"] = basedOn;
        }

        if (counterpartId != null) {
            _queryParams["counterpart_id"] = counterpartId;
        }

        if (createdByEntityUserId != null) {
            _queryParams["created_by_entity_user_id"] = createdByEntityUserId;
        }

        if (status != null) {
            _queryParams["status"] = status;
        }

        if (statusIn != null) {
            if (Array.isArray(statusIn)) {
                _queryParams["status__in"] = statusIn.map((item) => item);
            } else {
                _queryParams["status__in"] = statusIn;
            }
        }

        if (statusNotIn != null) {
            if (Array.isArray(statusNotIn)) {
                _queryParams["status__not_in"] = statusNotIn.map((item) => item);
            } else {
                _queryParams["status__not_in"] = statusNotIn;
            }
        }

        if (origin != null) {
            _queryParams["origin"] = origin;
        }

        if (currency != null) {
            _queryParams["currency"] = currency;
        }

        if (projectId != null) {
            _queryParams["project_id"] = projectId;
        }

        if (projectIdIn != null) {
            if (Array.isArray(projectIdIn)) {
                _queryParams["project_id__in"] = projectIdIn.map((item) => item);
            } else {
                _queryParams["project_id__in"] = projectIdIn;
            }
        }

        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                "payable_credit_notes",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.CreditNotePaginationResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Monite.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Monite.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 406:
                    throw new Monite.NotAcceptableError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError("Timeout exceeded when calling GET /payable_credit_notes.");
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Monite.CreditNoteCreateRequest} request
     * @param {CreditNotes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.BadRequestError}
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.ForbiddenError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.creditNotes.postPayableCreditNotes({
     *         document_id: "CN-2287",
     *         issued_at: "2024-01-15"
     *     })
     */
    public postPayableCreditNotes(
        request: Monite.CreditNoteCreateRequest,
        requestOptions?: CreditNotes.RequestOptions,
    ): core.HttpResponsePromise<Monite.CreditNoteResponse> {
        return core.HttpResponsePromise.fromPromise(this.__postPayableCreditNotes(request, requestOptions));
    }

    private async __postPayableCreditNotes(
        request: Monite.CreditNoteCreateRequest,
        requestOptions?: CreditNotes.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.CreditNoteResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                "payable_credit_notes",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.CreditNoteResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Monite.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Monite.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError("Timeout exceeded when calling POST /payable_credit_notes.");
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Upload an incoming credit note (payable) in PDF, PNG, or JPEG format and scan its contents. The maximum file size is 20MB.
     *
     * @param {Monite.CreditNoteUploadFile} request
     * @param {CreditNotes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.BadRequestError}
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.ForbiddenError}
     * @throws {@link Monite.ConflictError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     import { createReadStream } from "fs";
     *     await client.creditNotes.postPayableCreditNotesUploadFromFile({
     *         file: fs.createReadStream("/path/to/your/file")
     *     })
     */
    public postPayableCreditNotesUploadFromFile(
        request: Monite.CreditNoteUploadFile,
        requestOptions?: CreditNotes.RequestOptions,
    ): core.HttpResponsePromise<Monite.CreditNoteResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__postPayableCreditNotesUploadFromFile(request, requestOptions),
        );
    }

    private async __postPayableCreditNotesUploadFromFile(
        request: Monite.CreditNoteUploadFile,
        requestOptions?: CreditNotes.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.CreditNoteResponse>> {
        const _request = await core.newFormData();
        await _request.appendFile("file", request.file);
        const _maybeEncodedRequest = await _request.getRequest();
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
                ..._maybeEncodedRequest.headers,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                "payable_credit_notes/upload_from_file",
            ),
            method: "POST",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.CreditNoteResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Monite.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Monite.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 409:
                    throw new Monite.ConflictError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling POST /payable_credit_notes/upload_from_file.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get credit notes validations.
     *
     * @param {CreditNotes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.BadRequestError}
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.ForbiddenError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.creditNotes.getPayableCreditNotesValidations()
     */
    public getPayableCreditNotesValidations(
        requestOptions?: CreditNotes.RequestOptions,
    ): core.HttpResponsePromise<Monite.CreditNoteValidationsResource> {
        return core.HttpResponsePromise.fromPromise(this.__getPayableCreditNotesValidations(requestOptions));
    }

    private async __getPayableCreditNotesValidations(
        requestOptions?: CreditNotes.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.CreditNoteValidationsResource>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                "payable_credit_notes/validations",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.CreditNoteValidationsResource, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Monite.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Monite.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling GET /payable_credit_notes/validations.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update credit notes validations.
     *
     * @param {Monite.CreditNoteValidationsResource} request
     * @param {CreditNotes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.BadRequestError}
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.ForbiddenError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.creditNotes.putPayableCreditNotesValidations({
     *         required_fields: ["currency"]
     *     })
     */
    public putPayableCreditNotesValidations(
        request: Monite.CreditNoteValidationsResource,
        requestOptions?: CreditNotes.RequestOptions,
    ): core.HttpResponsePromise<Monite.CreditNoteValidationsResource> {
        return core.HttpResponsePromise.fromPromise(this.__putPayableCreditNotesValidations(request, requestOptions));
    }

    private async __putPayableCreditNotesValidations(
        request: Monite.CreditNoteValidationsResource,
        requestOptions?: CreditNotes.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.CreditNoteValidationsResource>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                "payable_credit_notes/validations",
            ),
            method: "PUT",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.CreditNoteValidationsResource, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Monite.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Monite.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling PUT /payable_credit_notes/validations.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Reset credit notes validations.
     *
     * @param {CreditNotes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.BadRequestError}
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.ForbiddenError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.creditNotes.postPayableCreditNotesValidationsReset()
     */
    public postPayableCreditNotesValidationsReset(
        requestOptions?: CreditNotes.RequestOptions,
    ): core.HttpResponsePromise<Monite.CreditNoteValidationsResource> {
        return core.HttpResponsePromise.fromPromise(this.__postPayableCreditNotesValidationsReset(requestOptions));
    }

    private async __postPayableCreditNotesValidationsReset(
        requestOptions?: CreditNotes.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.CreditNoteValidationsResource>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                "payable_credit_notes/validations/reset",
            ),
            method: "POST",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.CreditNoteValidationsResource, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Monite.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Monite.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling POST /payable_credit_notes/validations/reset.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} creditNoteId
     * @param {CreditNotes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.ForbiddenError}
     * @throws {@link Monite.NotFoundError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.creditNotes.getPayableCreditNotesId("credit_note_id")
     */
    public getPayableCreditNotesId(
        creditNoteId: string,
        requestOptions?: CreditNotes.RequestOptions,
    ): core.HttpResponsePromise<Monite.CreditNoteResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getPayableCreditNotesId(creditNoteId, requestOptions));
    }

    private async __getPayableCreditNotesId(
        creditNoteId: string,
        requestOptions?: CreditNotes.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.CreditNoteResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `payable_credit_notes/${encodeURIComponent(creditNoteId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.CreditNoteResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Monite.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Monite.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling GET /payable_credit_notes/{credit_note_id}.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} creditNoteId
     * @param {CreditNotes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.ForbiddenError}
     * @throws {@link Monite.NotFoundError}
     * @throws {@link Monite.ConflictError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.creditNotes.deletePayableCreditNotesId("credit_note_id")
     */
    public deletePayableCreditNotesId(
        creditNoteId: string,
        requestOptions?: CreditNotes.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__deletePayableCreditNotesId(creditNoteId, requestOptions));
    }

    private async __deletePayableCreditNotesId(
        creditNoteId: string,
        requestOptions?: CreditNotes.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `payable_credit_notes/${encodeURIComponent(creditNoteId)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Monite.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Monite.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 409:
                    throw new Monite.ConflictError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling DELETE /payable_credit_notes/{credit_note_id}.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} creditNoteId
     * @param {Monite.CreditNoteUpdateRequest} request
     * @param {CreditNotes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.ForbiddenError}
     * @throws {@link Monite.NotFoundError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.creditNotes.patchPayableCreditNotesId("credit_note_id")
     */
    public patchPayableCreditNotesId(
        creditNoteId: string,
        request: Monite.CreditNoteUpdateRequest = {},
        requestOptions?: CreditNotes.RequestOptions,
    ): core.HttpResponsePromise<Monite.CreditNoteResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__patchPayableCreditNotesId(creditNoteId, request, requestOptions),
        );
    }

    private async __patchPayableCreditNotesId(
        creditNoteId: string,
        request: Monite.CreditNoteUpdateRequest = {},
        requestOptions?: CreditNotes.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.CreditNoteResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `payable_credit_notes/${encodeURIComponent(creditNoteId)}`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.CreditNoteResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Monite.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Monite.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling PATCH /payable_credit_notes/{credit_note_id}.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Approve the credit note for appliance.
     *
     * @param {string} creditNoteId
     * @param {CreditNotes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.ForbiddenError}
     * @throws {@link Monite.NotFoundError}
     * @throws {@link Monite.ConflictError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.creditNotes.postPayableCreditNotesIdApprove("credit_note_id")
     */
    public postPayableCreditNotesIdApprove(
        creditNoteId: string,
        requestOptions?: CreditNotes.RequestOptions,
    ): core.HttpResponsePromise<Monite.CreditNoteResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__postPayableCreditNotesIdApprove(creditNoteId, requestOptions),
        );
    }

    private async __postPayableCreditNotesIdApprove(
        creditNoteId: string,
        requestOptions?: CreditNotes.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.CreditNoteResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `payable_credit_notes/${encodeURIComponent(creditNoteId)}/approve`,
            ),
            method: "POST",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.CreditNoteResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Monite.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Monite.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 409:
                    throw new Monite.ConflictError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling POST /payable_credit_notes/{credit_note_id}/approve.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Cancel the credit note that was not confirmed during the review.
     *
     * @param {string} creditNoteId
     * @param {CreditNotes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.ForbiddenError}
     * @throws {@link Monite.NotFoundError}
     * @throws {@link Monite.ConflictError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.creditNotes.postPayableCreditNotesIdCancel("credit_note_id")
     */
    public postPayableCreditNotesIdCancel(
        creditNoteId: string,
        requestOptions?: CreditNotes.RequestOptions,
    ): core.HttpResponsePromise<Monite.CreditNoteResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__postPayableCreditNotesIdCancel(creditNoteId, requestOptions),
        );
    }

    private async __postPayableCreditNotesIdCancel(
        creditNoteId: string,
        requestOptions?: CreditNotes.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.CreditNoteResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `payable_credit_notes/${encodeURIComponent(creditNoteId)}/cancel`,
            ),
            method: "POST",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.CreditNoteResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Monite.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Monite.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 409:
                    throw new Monite.ConflictError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling POST /payable_credit_notes/{credit_note_id}/cancel.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Request to cancel the OCR processing of the specified credit note.
     *
     * @param {string} creditNoteId
     * @param {CreditNotes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.BadRequestError}
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.ForbiddenError}
     * @throws {@link Monite.NotFoundError}
     * @throws {@link Monite.ConflictError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.creditNotes.postPayableCreditNotesIdCancelOcr("credit_note_id")
     */
    public postPayableCreditNotesIdCancelOcr(
        creditNoteId: string,
        requestOptions?: CreditNotes.RequestOptions,
    ): core.HttpResponsePromise<Monite.CreditNoteResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__postPayableCreditNotesIdCancelOcr(creditNoteId, requestOptions),
        );
    }

    private async __postPayableCreditNotesIdCancelOcr(
        creditNoteId: string,
        requestOptions?: CreditNotes.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.CreditNoteResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `payable_credit_notes/${encodeURIComponent(creditNoteId)}/cancel_ocr`,
            ),
            method: "POST",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.CreditNoteResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Monite.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Monite.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Monite.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 409:
                    throw new Monite.ConflictError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling POST /payable_credit_notes/{credit_note_id}/cancel_ocr.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} creditNoteId
     * @param {Monite.GetPayableCreditNotesIdLineItemsRequest} request
     * @param {CreditNotes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.ForbiddenError}
     * @throws {@link Monite.NotFoundError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.creditNotes.getPayableCreditNotesIdLineItems("credit_note_id")
     */
    public getPayableCreditNotesIdLineItems(
        creditNoteId: string,
        request: Monite.GetPayableCreditNotesIdLineItemsRequest = {},
        requestOptions?: CreditNotes.RequestOptions,
    ): core.HttpResponsePromise<Monite.CreditNoteLineItemPaginationResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__getPayableCreditNotesIdLineItems(creditNoteId, request, requestOptions),
        );
    }

    private async __getPayableCreditNotesIdLineItems(
        creditNoteId: string,
        request: Monite.GetPayableCreditNotesIdLineItemsRequest = {},
        requestOptions?: CreditNotes.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.CreditNoteLineItemPaginationResponse>> {
        const {
            order,
            limit,
            pagination_token: paginationToken,
            sort,
            created_at__gt: createdAtGt,
            created_at__lt: createdAtLt,
            created_at__gte: createdAtGte,
            created_at__lte: createdAtLte,
            name,
            name__iexact: nameIexact,
            name__contains: nameContains,
            name__icontains: nameIcontains,
            description,
            description__contains: descriptionContains,
            description__icontains: descriptionIcontains,
            total__gt: totalGt,
            total__lt: totalLt,
            total__gte: totalGte,
            total__lte: totalLte,
            subtotal__gt: subtotalGt,
            subtotal__lt: subtotalLt,
            subtotal__gte: subtotalGte,
            subtotal__lte: subtotalLte,
            unit_price__gt: unitPriceGt,
            unit_price__lt: unitPriceLt,
            unit_price__gte: unitPriceGte,
            unit_price__lte: unitPriceLte,
            quantity__gt: quantityGt,
            quantity__lt: quantityLt,
            quantity__gte: quantityGte,
            quantity__lte: quantityLte,
            tax__gt: taxGt,
            tax__lt: taxLt,
            tax__gte: taxGte,
            tax__lte: taxLte,
            tax_amount__gt: taxAmountGt,
            tax_amount__lt: taxAmountLt,
            tax_amount__gte: taxAmountGte,
            tax_amount__lte: taxAmountLte,
            created_by_user_id: createdByUserId,
            unit,
            unit__iexact: unitIexact,
            source,
            source_id: sourceId,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (order != null) {
            _queryParams["order"] = order;
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (paginationToken != null) {
            _queryParams["pagination_token"] = paginationToken;
        }

        if (sort != null) {
            _queryParams["sort"] = sort;
        }

        if (createdAtGt != null) {
            _queryParams["created_at__gt"] = createdAtGt;
        }

        if (createdAtLt != null) {
            _queryParams["created_at__lt"] = createdAtLt;
        }

        if (createdAtGte != null) {
            _queryParams["created_at__gte"] = createdAtGte;
        }

        if (createdAtLte != null) {
            _queryParams["created_at__lte"] = createdAtLte;
        }

        if (name != null) {
            _queryParams["name"] = name;
        }

        if (nameIexact != null) {
            _queryParams["name__iexact"] = nameIexact;
        }

        if (nameContains != null) {
            _queryParams["name__contains"] = nameContains;
        }

        if (nameIcontains != null) {
            _queryParams["name__icontains"] = nameIcontains;
        }

        if (description != null) {
            _queryParams["description"] = description;
        }

        if (descriptionContains != null) {
            _queryParams["description__contains"] = descriptionContains;
        }

        if (descriptionIcontains != null) {
            _queryParams["description__icontains"] = descriptionIcontains;
        }

        if (totalGt != null) {
            _queryParams["total__gt"] = totalGt.toString();
        }

        if (totalLt != null) {
            _queryParams["total__lt"] = totalLt.toString();
        }

        if (totalGte != null) {
            _queryParams["total__gte"] = totalGte.toString();
        }

        if (totalLte != null) {
            _queryParams["total__lte"] = totalLte.toString();
        }

        if (subtotalGt != null) {
            _queryParams["subtotal__gt"] = subtotalGt.toString();
        }

        if (subtotalLt != null) {
            _queryParams["subtotal__lt"] = subtotalLt.toString();
        }

        if (subtotalGte != null) {
            _queryParams["subtotal__gte"] = subtotalGte.toString();
        }

        if (subtotalLte != null) {
            _queryParams["subtotal__lte"] = subtotalLte.toString();
        }

        if (unitPriceGt != null) {
            _queryParams["unit_price__gt"] = unitPriceGt.toString();
        }

        if (unitPriceLt != null) {
            _queryParams["unit_price__lt"] = unitPriceLt.toString();
        }

        if (unitPriceGte != null) {
            _queryParams["unit_price__gte"] = unitPriceGte.toString();
        }

        if (unitPriceLte != null) {
            _queryParams["unit_price__lte"] = unitPriceLte.toString();
        }

        if (quantityGt != null) {
            _queryParams["quantity__gt"] = quantityGt.toString();
        }

        if (quantityLt != null) {
            _queryParams["quantity__lt"] = quantityLt.toString();
        }

        if (quantityGte != null) {
            _queryParams["quantity__gte"] = quantityGte.toString();
        }

        if (quantityLte != null) {
            _queryParams["quantity__lte"] = quantityLte.toString();
        }

        if (taxGt != null) {
            _queryParams["tax__gt"] = taxGt.toString();
        }

        if (taxLt != null) {
            _queryParams["tax__lt"] = taxLt.toString();
        }

        if (taxGte != null) {
            _queryParams["tax__gte"] = taxGte.toString();
        }

        if (taxLte != null) {
            _queryParams["tax__lte"] = taxLte.toString();
        }

        if (taxAmountGt != null) {
            _queryParams["tax_amount__gt"] = taxAmountGt.toString();
        }

        if (taxAmountLt != null) {
            _queryParams["tax_amount__lt"] = taxAmountLt.toString();
        }

        if (taxAmountGte != null) {
            _queryParams["tax_amount__gte"] = taxAmountGte.toString();
        }

        if (taxAmountLte != null) {
            _queryParams["tax_amount__lte"] = taxAmountLte.toString();
        }

        if (createdByUserId != null) {
            _queryParams["created_by_user_id"] = createdByUserId;
        }

        if (unit != null) {
            _queryParams["unit"] = unit;
        }

        if (unitIexact != null) {
            _queryParams["unit__iexact"] = unitIexact;
        }

        if (source != null) {
            _queryParams["source"] = source;
        }

        if (sourceId != null) {
            _queryParams["source_id"] = sourceId;
        }

        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `payable_credit_notes/${encodeURIComponent(creditNoteId)}/line_items`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Monite.CreditNoteLineItemPaginationResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Monite.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Monite.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling GET /payable_credit_notes/{credit_note_id}/line_items.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} creditNoteId
     * @param {Monite.CreditNoteLineItemCreateRequest} request
     * @param {CreditNotes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.ForbiddenError}
     * @throws {@link Monite.NotFoundError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.creditNotes.postPayableCreditNotesIdLineItems("credit_note_id", {})
     */
    public postPayableCreditNotesIdLineItems(
        creditNoteId: string,
        request: Monite.CreditNoteLineItemCreateRequest,
        requestOptions?: CreditNotes.RequestOptions,
    ): core.HttpResponsePromise<Monite.CreditNoteLineItemResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__postPayableCreditNotesIdLineItems(creditNoteId, request, requestOptions),
        );
    }

    private async __postPayableCreditNotesIdLineItems(
        creditNoteId: string,
        request: Monite.CreditNoteLineItemCreateRequest,
        requestOptions?: CreditNotes.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.CreditNoteLineItemResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `payable_credit_notes/${encodeURIComponent(creditNoteId)}/line_items`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.CreditNoteLineItemResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Monite.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Monite.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling POST /payable_credit_notes/{credit_note_id}/line_items.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} creditNoteId
     * @param {Monite.CreditNoteLineItemReplaceRequest} request
     * @param {CreditNotes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.ForbiddenError}
     * @throws {@link Monite.NotFoundError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.creditNotes.putPayableCreditNotesIdLineItems("credit_note_id", {
     *         data: [{}]
     *     })
     */
    public putPayableCreditNotesIdLineItems(
        creditNoteId: string,
        request: Monite.CreditNoteLineItemReplaceRequest,
        requestOptions?: CreditNotes.RequestOptions,
    ): core.HttpResponsePromise<Monite.CreditNoteLineItemPaginationResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__putPayableCreditNotesIdLineItems(creditNoteId, request, requestOptions),
        );
    }

    private async __putPayableCreditNotesIdLineItems(
        creditNoteId: string,
        request: Monite.CreditNoteLineItemReplaceRequest,
        requestOptions?: CreditNotes.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.CreditNoteLineItemPaginationResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `payable_credit_notes/${encodeURIComponent(creditNoteId)}/line_items`,
            ),
            method: "PUT",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Monite.CreditNoteLineItemPaginationResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Monite.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Monite.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling PUT /payable_credit_notes/{credit_note_id}/line_items.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} creditNoteId
     * @param {string} lineItemId
     * @param {CreditNotes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.ForbiddenError}
     * @throws {@link Monite.NotFoundError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.creditNotes.getPayableCreditNotesIdLineItemsId("credit_note_id", "line_item_id")
     */
    public getPayableCreditNotesIdLineItemsId(
        creditNoteId: string,
        lineItemId: string,
        requestOptions?: CreditNotes.RequestOptions,
    ): core.HttpResponsePromise<Monite.CreditNoteLineItemResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__getPayableCreditNotesIdLineItemsId(creditNoteId, lineItemId, requestOptions),
        );
    }

    private async __getPayableCreditNotesIdLineItemsId(
        creditNoteId: string,
        lineItemId: string,
        requestOptions?: CreditNotes.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.CreditNoteLineItemResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `payable_credit_notes/${encodeURIComponent(creditNoteId)}/line_items/${encodeURIComponent(lineItemId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.CreditNoteLineItemResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Monite.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Monite.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling GET /payable_credit_notes/{credit_note_id}/line_items/{line_item_id}.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} creditNoteId
     * @param {string} lineItemId
     * @param {CreditNotes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.ForbiddenError}
     * @throws {@link Monite.NotFoundError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.creditNotes.deletePayableCreditNotesIdLineItemsId("credit_note_id", "line_item_id")
     */
    public deletePayableCreditNotesIdLineItemsId(
        creditNoteId: string,
        lineItemId: string,
        requestOptions?: CreditNotes.RequestOptions,
    ): core.HttpResponsePromise<Monite.CreditNoteLineItemPaginationResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__deletePayableCreditNotesIdLineItemsId(creditNoteId, lineItemId, requestOptions),
        );
    }

    private async __deletePayableCreditNotesIdLineItemsId(
        creditNoteId: string,
        lineItemId: string,
        requestOptions?: CreditNotes.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.CreditNoteLineItemPaginationResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `payable_credit_notes/${encodeURIComponent(creditNoteId)}/line_items/${encodeURIComponent(lineItemId)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Monite.CreditNoteLineItemPaginationResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Monite.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Monite.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling DELETE /payable_credit_notes/{credit_note_id}/line_items/{line_item_id}.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} creditNoteId
     * @param {string} lineItemId
     * @param {Monite.CreditNoteLineItemUpdateRequest} request
     * @param {CreditNotes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.ForbiddenError}
     * @throws {@link Monite.NotFoundError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.creditNotes.patchPayableCreditNotesIdLineItemsId("credit_note_id", "line_item_id")
     */
    public patchPayableCreditNotesIdLineItemsId(
        creditNoteId: string,
        lineItemId: string,
        request: Monite.CreditNoteLineItemUpdateRequest = {},
        requestOptions?: CreditNotes.RequestOptions,
    ): core.HttpResponsePromise<Monite.CreditNoteLineItemResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__patchPayableCreditNotesIdLineItemsId(creditNoteId, lineItemId, request, requestOptions),
        );
    }

    private async __patchPayableCreditNotesIdLineItemsId(
        creditNoteId: string,
        lineItemId: string,
        request: Monite.CreditNoteLineItemUpdateRequest = {},
        requestOptions?: CreditNotes.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.CreditNoteLineItemResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `payable_credit_notes/${encodeURIComponent(creditNoteId)}/line_items/${encodeURIComponent(lineItemId)}`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.CreditNoteLineItemResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Monite.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Monite.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling PATCH /payable_credit_notes/{credit_note_id}/line_items/{line_item_id}.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Decline the credit note when an approver finds any mismatch or discrepancies.
     *
     * @param {string} creditNoteId
     * @param {CreditNotes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.ForbiddenError}
     * @throws {@link Monite.NotFoundError}
     * @throws {@link Monite.ConflictError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.creditNotes.postPayableCreditNotesIdReject("credit_note_id")
     */
    public postPayableCreditNotesIdReject(
        creditNoteId: string,
        requestOptions?: CreditNotes.RequestOptions,
    ): core.HttpResponsePromise<Monite.CreditNoteResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__postPayableCreditNotesIdReject(creditNoteId, requestOptions),
        );
    }

    private async __postPayableCreditNotesIdReject(
        creditNoteId: string,
        requestOptions?: CreditNotes.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.CreditNoteResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `payable_credit_notes/${encodeURIComponent(creditNoteId)}/reject`,
            ),
            method: "POST",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.CreditNoteResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Monite.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Monite.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 409:
                    throw new Monite.ConflictError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling POST /payable_credit_notes/{credit_note_id}/reject.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Start the approval process once the uploaded credit note is validated.
     *
     * @param {string} creditNoteId
     * @param {CreditNotes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.ForbiddenError}
     * @throws {@link Monite.NotFoundError}
     * @throws {@link Monite.ConflictError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.creditNotes.postPayableCreditNotesIdSubmitForApproval("credit_note_id")
     */
    public postPayableCreditNotesIdSubmitForApproval(
        creditNoteId: string,
        requestOptions?: CreditNotes.RequestOptions,
    ): core.HttpResponsePromise<Monite.CreditNoteResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__postPayableCreditNotesIdSubmitForApproval(creditNoteId, requestOptions),
        );
    }

    private async __postPayableCreditNotesIdSubmitForApproval(
        creditNoteId: string,
        requestOptions?: CreditNotes.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.CreditNoteResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `payable_credit_notes/${encodeURIComponent(creditNoteId)}/submit_for_approval`,
            ),
            method: "POST",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.CreditNoteResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Monite.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Monite.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 409:
                    throw new Monite.ConflictError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling POST /payable_credit_notes/{credit_note_id}/submit_for_approval.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} creditNoteId
     * @param {CreditNotes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.BadRequestError}
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.ForbiddenError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.creditNotes.getPayableCreditNotesIdValidate("credit_note_id")
     */
    public getPayableCreditNotesIdValidate(
        creditNoteId: string,
        requestOptions?: CreditNotes.RequestOptions,
    ): core.HttpResponsePromise<Monite.CreditNoteValidationResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__getPayableCreditNotesIdValidate(creditNoteId, requestOptions),
        );
    }

    private async __getPayableCreditNotesIdValidate(
        creditNoteId: string,
        requestOptions?: CreditNotes.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.CreditNoteValidationResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `payable_credit_notes/${encodeURIComponent(creditNoteId)}/validate`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.CreditNoteValidationResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Monite.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Monite.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling GET /payable_credit_notes/{credit_note_id}/validate.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
