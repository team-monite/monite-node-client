/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { MoniteClient } from "../../../src/Client";

describe("Connections", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    connection_url: "connection_url",
                    errors: [{ message: "message" }],
                    last_pull: "2024-01-15T09:30:00Z",
                    platform: "platform",
                    status: "connected",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/accounting_connections")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounting.connections.get();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    connection_url: "connection_url",
                    errors: [
                        {
                            message: "message",
                        },
                    ],
                    last_pull: "2024-01-15T09:30:00Z",
                    platform: "platform",
                    status: "connected",
                },
            ],
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            business_info: {
                base_currency: "base_currency",
                email: "email",
                legal_name: "legal_name",
                name: "name",
                type: "type",
            },
            connection_url: "connection_url",
            errors: [{ message: "message" }],
            last_pull: "2024-01-15T09:30:00Z",
            platform: "platform",
            status: "connected",
        };
        server
            .mockEndpoint()
            .post("/accounting_connections")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounting.connections.create();
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            business_info: {
                base_currency: "base_currency",
                email: "email",
                legal_name: "legal_name",
                name: "name",
                type: "type",
            },
            connection_url: "connection_url",
            errors: [
                {
                    message: "message",
                },
            ],
            last_pull: "2024-01-15T09:30:00Z",
            platform: "platform",
            status: "connected",
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            business_info: {
                base_currency: "base_currency",
                email: "email",
                legal_name: "legal_name",
                name: "name",
                type: "type",
            },
            connection_url: "connection_url",
            errors: [{ message: "message" }],
            last_pull: "2024-01-15T09:30:00Z",
            platform: "platform",
            status: "connected",
        };
        server
            .mockEndpoint()
            .get("/accounting_connections/connection_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounting.connections.getById("connection_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            business_info: {
                base_currency: "base_currency",
                email: "email",
                legal_name: "legal_name",
                name: "name",
                type: "type",
            },
            connection_url: "connection_url",
            errors: [
                {
                    message: "message",
                },
            ],
            last_pull: "2024-01-15T09:30:00Z",
            platform: "platform",
            status: "connected",
        });
    });

    test("disconnect_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            business_info: {
                base_currency: "base_currency",
                email: "email",
                legal_name: "legal_name",
                name: "name",
                type: "type",
            },
            connection_url: "connection_url",
            errors: [{ message: "message" }],
            last_pull: "2024-01-15T09:30:00Z",
            platform: "platform",
            status: "connected",
        };
        server
            .mockEndpoint()
            .post("/accounting_connections/connection_id/disconnect")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounting.connections.disconnectById("connection_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            business_info: {
                base_currency: "base_currency",
                email: "email",
                legal_name: "legal_name",
                name: "name",
                type: "type",
            },
            connection_url: "connection_url",
            errors: [
                {
                    message: "message",
                },
            ],
            last_pull: "2024-01-15T09:30:00Z",
            platform: "platform",
            status: "connected",
        });
    });

    test("sync_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = { message: "message" };
        server
            .mockEndpoint()
            .post("/accounting_connections/connection_id/sync")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounting.connections.syncById("connection_id");
        expect(response).toEqual({
            message: "message",
        });
    });
});
