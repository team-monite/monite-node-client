/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { MoniteClient } from "../../src/Client";

describe("Receipts", () => {
    test("get_receipts", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    created_by_entity_user_id: "created_by_entity_user_id",
                    currency: "AED",
                    currency_exchange: { key: "value" },
                    document_id: "document_id",
                    file_id: "123e4567-e89b-12d3-a456-426614174000",
                    file_url: "file_url",
                    issued_at: "2024-01-15T09:30:00Z",
                    merchant_location: "merchant_location",
                    merchant_name: "merchant_name",
                    ocr_request_id: "ocr_request_id",
                    ocr_status: "ocr_status",
                    partner_metadata: { key: "value" },
                    source_of_data: "ocr",
                    total_amount: 1,
                    transaction_id: "transaction_id",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        };
        server.mockEndpoint().get("/receipts").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.receipts.getReceipts();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    created_by_entity_user_id: "created_by_entity_user_id",
                    currency: "AED",
                    currency_exchange: {
                        key: "value",
                    },
                    document_id: "document_id",
                    file_id: "123e4567-e89b-12d3-a456-426614174000",
                    file_url: "file_url",
                    issued_at: "2024-01-15T09:30:00Z",
                    merchant_location: "merchant_location",
                    merchant_name: "merchant_name",
                    ocr_request_id: "ocr_request_id",
                    ocr_status: "ocr_status",
                    partner_metadata: {
                        key: "value",
                    },
                    source_of_data: "ocr",
                    total_amount: 1,
                    transaction_id: "transaction_id",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        });
    });

    test("post_receipts", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_by_entity_user_id: "created_by_entity_user_id",
            currency: "AED",
            currency_exchange: { key: "value" },
            document_id: "document_id",
            file_id: "123e4567-e89b-12d3-a456-426614174000",
            file_url: "file_url",
            issued_at: "2024-01-15T09:30:00Z",
            merchant_location: "merchant_location",
            merchant_name: "merchant_name",
            ocr_request_id: "ocr_request_id",
            ocr_status: "ocr_status",
            partner_metadata: { key: "value" },
            source_of_data: "ocr",
            total_amount: 1,
            transaction_id: "transaction_id",
        };
        server
            .mockEndpoint()
            .post("/receipts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.receipts.postReceipts();
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_by_entity_user_id: "created_by_entity_user_id",
            currency: "AED",
            currency_exchange: {
                key: "value",
            },
            document_id: "document_id",
            file_id: "123e4567-e89b-12d3-a456-426614174000",
            file_url: "file_url",
            issued_at: "2024-01-15T09:30:00Z",
            merchant_location: "merchant_location",
            merchant_name: "merchant_name",
            ocr_request_id: "ocr_request_id",
            ocr_status: "ocr_status",
            partner_metadata: {
                key: "value",
            },
            source_of_data: "ocr",
            total_amount: 1,
            transaction_id: "transaction_id",
        });
    });

    test("get_receipts_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_by_entity_user_id: "created_by_entity_user_id",
            currency: "AED",
            currency_exchange: { key: "value" },
            document_id: "document_id",
            file_id: "123e4567-e89b-12d3-a456-426614174000",
            file_url: "file_url",
            issued_at: "2024-01-15T09:30:00Z",
            merchant_location: "merchant_location",
            merchant_name: "merchant_name",
            ocr_request_id: "ocr_request_id",
            ocr_status: "ocr_status",
            partner_metadata: { key: "value" },
            source_of_data: "ocr",
            total_amount: 1,
            transaction_id: "transaction_id",
        };
        server
            .mockEndpoint()
            .get("/receipts/receipt_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.receipts.getReceiptsId("receipt_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_by_entity_user_id: "created_by_entity_user_id",
            currency: "AED",
            currency_exchange: {
                key: "value",
            },
            document_id: "document_id",
            file_id: "123e4567-e89b-12d3-a456-426614174000",
            file_url: "file_url",
            issued_at: "2024-01-15T09:30:00Z",
            merchant_location: "merchant_location",
            merchant_name: "merchant_name",
            ocr_request_id: "ocr_request_id",
            ocr_status: "ocr_status",
            partner_metadata: {
                key: "value",
            },
            source_of_data: "ocr",
            total_amount: 1,
            transaction_id: "transaction_id",
        });
    });

    test("delete_receipts_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        server.mockEndpoint().delete("/receipts/receipt_id").respondWith().statusCode(200).build();

        const response = await client.receipts.deleteReceiptsId("receipt_id");
        expect(response).toEqual(undefined);
    });

    test("patch_receipts_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_by_entity_user_id: "created_by_entity_user_id",
            currency: "AED",
            currency_exchange: { key: "value" },
            document_id: "document_id",
            file_id: "123e4567-e89b-12d3-a456-426614174000",
            file_url: "file_url",
            issued_at: "2024-01-15T09:30:00Z",
            merchant_location: "merchant_location",
            merchant_name: "merchant_name",
            ocr_request_id: "ocr_request_id",
            ocr_status: "ocr_status",
            partner_metadata: { key: "value" },
            source_of_data: "ocr",
            total_amount: 1,
            transaction_id: "transaction_id",
        };
        server
            .mockEndpoint()
            .patch("/receipts/receipt_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.receipts.patchReceiptsId("receipt_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_by_entity_user_id: "created_by_entity_user_id",
            currency: "AED",
            currency_exchange: {
                key: "value",
            },
            document_id: "document_id",
            file_id: "123e4567-e89b-12d3-a456-426614174000",
            file_url: "file_url",
            issued_at: "2024-01-15T09:30:00Z",
            merchant_location: "merchant_location",
            merchant_name: "merchant_name",
            ocr_request_id: "ocr_request_id",
            ocr_status: "ocr_status",
            partner_metadata: {
                key: "value",
            },
            source_of_data: "ocr",
            total_amount: 1,
            transaction_id: "transaction_id",
        });
    });

    test("get_receipts_id_line_items", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    accounting_tax_rate_id: "accounting_tax_rate_id",
                    cost_center_id: "cost_center_id",
                    created_by_entity_user_id: "created_by_entity_user_id",
                    name: "name",
                    receipt_id: "receipt_id",
                    total: 1,
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        };
        server
            .mockEndpoint()
            .get("/receipts/receipt_id/line_items")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.receipts.getReceiptsIdLineItems("receipt_id");
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    accounting_tax_rate_id: "accounting_tax_rate_id",
                    cost_center_id: "cost_center_id",
                    created_by_entity_user_id: "created_by_entity_user_id",
                    name: "name",
                    receipt_id: "receipt_id",
                    total: 1,
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        });
    });

    test("post_receipts_id_line_items", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            accounting_tax_rate_id: "accounting_tax_rate_id",
            cost_center_id: "cost_center_id",
            created_by_entity_user_id: "created_by_entity_user_id",
            name: "name",
            receipt_id: "receipt_id",
            total: 1,
        };
        server
            .mockEndpoint()
            .post("/receipts/receipt_id/line_items")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.receipts.postReceiptsIdLineItems("receipt_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            accounting_tax_rate_id: "accounting_tax_rate_id",
            cost_center_id: "cost_center_id",
            created_by_entity_user_id: "created_by_entity_user_id",
            name: "name",
            receipt_id: "receipt_id",
            total: 1,
        });
    });

    test("delete_receipts_id_line_items_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        server
            .mockEndpoint()
            .delete("/receipts/receipt_id/line_items/line_item_id")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.receipts.deleteReceiptsIdLineItemsId("receipt_id", "line_item_id");
        expect(response).toEqual(undefined);
    });

    test("patch_receipts_id_line_items_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            accounting_tax_rate_id: "accounting_tax_rate_id",
            cost_center_id: "cost_center_id",
            created_by_entity_user_id: "created_by_entity_user_id",
            name: "name",
            receipt_id: "receipt_id",
            total: 1,
        };
        server
            .mockEndpoint()
            .patch("/receipts/receipt_id/line_items/line_item_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.receipts.patchReceiptsIdLineItemsId("receipt_id", "line_item_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            accounting_tax_rate_id: "accounting_tax_rate_id",
            cost_center_id: "cost_center_id",
            created_by_entity_user_id: "created_by_entity_user_id",
            name: "name",
            receipt_id: "receipt_id",
            total: 1,
        });
    });
});
