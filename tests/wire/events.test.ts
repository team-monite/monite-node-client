/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { MoniteClient } from "../../src/Client";

describe("Events", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    action: "action",
                    api_version: "api_version",
                    description: "description",
                    entity_id: "entity_id",
                    object: { key: "value" },
                    object_type: "account",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        };
        server.mockEndpoint().get("/events").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.events.get();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    action: "action",
                    api_version: "api_version",
                    description: "description",
                    entity_id: "entity_id",
                    object: {
                        key: "value",
                    },
                    object_type: "account",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            action: "action",
            api_version: "api_version",
            description: "description",
            entity_id: "entity_id",
            object: { key: "value" },
            object_type: "account",
        };
        server.mockEndpoint().get("/events/event_id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.events.getById("event_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            action: "action",
            api_version: "api_version",
            description: "description",
            entity_id: "entity_id",
            object: {
                key: "value",
            },
            object_type: "account",
        });
    });
});
