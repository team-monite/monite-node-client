/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { MoniteClient } from "../../../src/Client";

describe("Payables", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    amount_due: 1.1,
                    currency: "EUR",
                    currency_rate: 1.1,
                    due_date: "2024-01-15T09:30:00Z",
                    invoice_number: "invoice_number",
                    lines: [{ description: "Logo design" }],
                    memo: "memo",
                    posted_date: "posted_date",
                    purchase_order_refs: [{ id: "10", name: "PO-1234" }],
                    status: "paid",
                    subtotal: 1.1,
                    tax_amount: 1.1,
                    total_amount: 1.1,
                    vendor_ref: { id: "120", name: "Acme Inc." },
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/accounting/payables")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounting.payables.get();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    amount_due: 1.1,
                    currency: "EUR",
                    currency_rate: 1.1,
                    due_date: "2024-01-15T09:30:00Z",
                    invoice_number: "invoice_number",
                    lines: [
                        {
                            description: "Logo design",
                        },
                    ],
                    memo: "memo",
                    posted_date: "posted_date",
                    purchase_order_refs: [
                        {
                            id: "10",
                            name: "PO-1234",
                        },
                    ],
                    status: "paid",
                    subtotal: 1.1,
                    tax_amount: 1.1,
                    total_amount: 1.1,
                    vendor_ref: {
                        id: "120",
                        name: "Acme Inc.",
                    },
                },
            ],
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            amount_due: 1.1,
            currency: "EUR",
            currency_rate: 1.1,
            due_date: "2024-01-15T09:30:00Z",
            invoice_number: "invoice_number",
            lines: [
                {
                    description: "Logo design",
                    discount_amount: 1.1,
                    discount_percentage: 1.1,
                    ledger_account_id: "ledger_account_id",
                    quantity: 1.1,
                    unit_amount: 1.1,
                },
            ],
            memo: "memo",
            posted_date: "posted_date",
            purchase_order_refs: [{ id: "10", name: "PO-1234" }],
            status: "paid",
            subtotal: 1.1,
            tax_amount: 1.1,
            total_amount: 1.1,
            vendor_ref: { id: "120", name: "Acme Inc." },
        };
        server
            .mockEndpoint()
            .get("/accounting/payables/payable_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounting.payables.getById("payable_id");
        expect(response).toEqual({
            id: "id",
            amount_due: 1.1,
            currency: "EUR",
            currency_rate: 1.1,
            due_date: "2024-01-15T09:30:00Z",
            invoice_number: "invoice_number",
            lines: [
                {
                    description: "Logo design",
                    discount_amount: 1.1,
                    discount_percentage: 1.1,
                    ledger_account_id: "ledger_account_id",
                    quantity: 1.1,
                    unit_amount: 1.1,
                },
            ],
            memo: "memo",
            posted_date: "posted_date",
            purchase_order_refs: [
                {
                    id: "10",
                    name: "PO-1234",
                },
            ],
            status: "paid",
            subtotal: 1.1,
            tax_amount: 1.1,
            total_amount: 1.1,
            vendor_ref: {
                id: "120",
                name: "Acme Inc.",
            },
        });
    });
});
