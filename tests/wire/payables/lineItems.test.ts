/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { MoniteClient } from "../../../src/Client";
import * as Monite from "../../../src/api/index";

describe("LineItems", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    accounting_tax_rate_id: "dd13735f-ef3a-4312-8c37-835d70341375",
                    description: "description",
                    ledger_account_id: "7df884fd-8be8-4eba-b6ff-417b66efe033",
                    name: "name",
                    ocr_set_quantity_to_one: false,
                    payable_id: "payable_id",
                    quantity: 1.22,
                    subtotal: 1250,
                    tax: 2000,
                    tax_amount: 250,
                    total: 1200,
                    unit: "meter",
                    unit_price: 1500,
                    was_created_by_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        };
        server
            .mockEndpoint()
            .get("/payables/payable_id/line_items")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.payables.lineItems.get("payable_id");
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    accounting_tax_rate_id: "dd13735f-ef3a-4312-8c37-835d70341375",
                    description: "description",
                    ledger_account_id: "7df884fd-8be8-4eba-b6ff-417b66efe033",
                    name: "name",
                    ocr_set_quantity_to_one: false,
                    payable_id: "payable_id",
                    quantity: 1.22,
                    subtotal: 1250,
                    tax: 2000,
                    tax_amount: 250,
                    total: 1200,
                    unit: "meter",
                    unit_price: 1500,
                    was_created_by_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            accounting_tax_rate_id: "dd13735f-ef3a-4312-8c37-835d70341375",
            description: "description",
            ledger_account_id: "7df884fd-8be8-4eba-b6ff-417b66efe033",
            name: "name",
            ocr_set_quantity_to_one: false,
            payable_id: "payable_id",
            quantity: 1.22,
            subtotal: 1250,
            tax: 2000,
            tax_amount: 250,
            total: 1200,
            unit: "meter",
            unit_price: 1500,
            was_created_by_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
        };
        server
            .mockEndpoint()
            .post("/payables/payable_id/line_items")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.payables.lineItems.create("payable_id", {});
        expect(response).toEqual({
            id: "id",
            accounting_tax_rate_id: "dd13735f-ef3a-4312-8c37-835d70341375",
            description: "description",
            ledger_account_id: "7df884fd-8be8-4eba-b6ff-417b66efe033",
            name: "name",
            ocr_set_quantity_to_one: false,
            payable_id: "payable_id",
            quantity: 1.22,
            subtotal: 1250,
            tax: 2000,
            tax_amount: 250,
            total: 1200,
            unit: "meter",
            unit_price: 1500,
            was_created_by_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
        });
    });

    test("replace", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { data: [{}] };
        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    accounting_tax_rate_id: "dd13735f-ef3a-4312-8c37-835d70341375",
                    description: "description",
                    ledger_account_id: "7df884fd-8be8-4eba-b6ff-417b66efe033",
                    name: "name",
                    ocr_set_quantity_to_one: false,
                    payable_id: "payable_id",
                    quantity: 1.22,
                    subtotal: 1250,
                    tax: 2000,
                    tax_amount: 250,
                    total: 1200,
                    unit: "meter",
                    unit_price: 1500,
                    was_created_by_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                },
            ],
        };
        server
            .mockEndpoint()
            .put("/payables/payable_id/line_items")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.payables.lineItems.replace("payable_id", {
            data: [{}],
        });
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    accounting_tax_rate_id: "dd13735f-ef3a-4312-8c37-835d70341375",
                    description: "description",
                    ledger_account_id: "7df884fd-8be8-4eba-b6ff-417b66efe033",
                    name: "name",
                    ocr_set_quantity_to_one: false,
                    payable_id: "payable_id",
                    quantity: 1.22,
                    subtotal: 1250,
                    tax: 2000,
                    tax_amount: 250,
                    total: 1200,
                    unit: "meter",
                    unit_price: 1500,
                    was_created_by_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                },
            ],
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            accounting_tax_rate_id: "dd13735f-ef3a-4312-8c37-835d70341375",
            description: "description",
            ledger_account_id: "7df884fd-8be8-4eba-b6ff-417b66efe033",
            name: "name",
            ocr_set_quantity_to_one: false,
            payable_id: "payable_id",
            quantity: 1.22,
            subtotal: 1250,
            tax: 2000,
            tax_amount: 250,
            total: 1200,
            unit: "meter",
            unit_price: 1500,
            was_created_by_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
        };
        server
            .mockEndpoint()
            .get("/payables/payable_id/line_items/line_item_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.payables.lineItems.getById("line_item_id", "payable_id");
        expect(response).toEqual({
            id: "id",
            accounting_tax_rate_id: "dd13735f-ef3a-4312-8c37-835d70341375",
            description: "description",
            ledger_account_id: "7df884fd-8be8-4eba-b6ff-417b66efe033",
            name: "name",
            ocr_set_quantity_to_one: false,
            payable_id: "payable_id",
            quantity: 1.22,
            subtotal: 1250,
            tax: 2000,
            tax_amount: 250,
            total: 1200,
            unit: "meter",
            unit_price: 1500,
            was_created_by_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
        });
    });

    test("delete_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        server
            .mockEndpoint()
            .delete("/payables/payable_id/line_items/line_item_id")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.payables.lineItems.deleteById("line_item_id", "payable_id");
        expect(response).toEqual(undefined);
    });

    test("update_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            accounting_tax_rate_id: "dd13735f-ef3a-4312-8c37-835d70341375",
            description: "description",
            ledger_account_id: "7df884fd-8be8-4eba-b6ff-417b66efe033",
            name: "name",
            ocr_set_quantity_to_one: false,
            payable_id: "payable_id",
            quantity: 1.22,
            subtotal: 1250,
            tax: 2000,
            tax_amount: 250,
            total: 1200,
            unit: "meter",
            unit_price: 1500,
            was_created_by_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
        };
        server
            .mockEndpoint()
            .patch("/payables/payable_id/line_items/line_item_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.payables.lineItems.updateById("line_item_id", "payable_id", {});
        expect(response).toEqual({
            id: "id",
            accounting_tax_rate_id: "dd13735f-ef3a-4312-8c37-835d70341375",
            description: "description",
            ledger_account_id: "7df884fd-8be8-4eba-b6ff-417b66efe033",
            name: "name",
            ocr_set_quantity_to_one: false,
            payable_id: "payable_id",
            quantity: 1.22,
            subtotal: 1250,
            tax: 2000,
            tax_amount: 250,
            total: 1200,
            unit: "meter",
            unit_price: 1500,
            was_created_by_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
        });
    });
});
