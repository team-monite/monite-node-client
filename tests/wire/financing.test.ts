/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { MoniteClient } from "../../src/Client";

describe("Financing", () => {
    test("get_financing_invoices", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    type: "payable",
                    status: "DRAFT",
                    invoice_id: "invoice_id",
                    document_id: "document_id",
                    due_date: "due_date",
                    issue_date: "issue_date",
                    total_amount: 1,
                    currency: "AED",
                    description: "description",
                    payer_type: "payer_type",
                    payer_business_name: "payer_business_name",
                    payer_first_name: "payer_first_name",
                    payer_last_name: "payer_last_name",
                    requested_amount: 1,
                    principal_amount: 1,
                    repayment_amount: 1,
                    advance_amount: 1,
                    advance_rate_percentage: 1,
                    fee_amount: 1,
                    fee_percentage: 1,
                    repayment_schedule: {
                        repayment_date: "repayment_date",
                        repayment_amount: 1,
                        repayment_fee_amount: 1,
                        repayment_principal_amount: 1,
                    },
                },
            ],
            prev_pagination_token: "prev_pagination_token",
            next_pagination_token: "next_pagination_token",
        };
        server
            .mockEndpoint()
            .get("/financing_invoices")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.financing.getFinancingInvoices();
        expect(response).toEqual({
            data: [
                {
                    type: "payable",
                    status: "DRAFT",
                    invoice_id: "invoice_id",
                    document_id: "document_id",
                    due_date: "due_date",
                    issue_date: "issue_date",
                    total_amount: 1,
                    currency: "AED",
                    description: "description",
                    payer_type: "payer_type",
                    payer_business_name: "payer_business_name",
                    payer_first_name: "payer_first_name",
                    payer_last_name: "payer_last_name",
                    requested_amount: 1,
                    principal_amount: 1,
                    repayment_amount: 1,
                    advance_amount: 1,
                    advance_rate_percentage: 1,
                    fee_amount: 1,
                    fee_percentage: 1,
                    repayment_schedule: {
                        repayment_date: "repayment_date",
                        repayment_amount: 1,
                        repayment_fee_amount: 1,
                        repayment_principal_amount: 1,
                    },
                },
            ],
            prev_pagination_token: "prev_pagination_token",
            next_pagination_token: "next_pagination_token",
        });
    });

    test("post_financing_invoices", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { invoices: [{ id: "id", type: "payable" }] };
        const rawResponseBody = { connect_token: "connect_token", session_token: "session_token" };
        server
            .mockEndpoint()
            .post("/financing_invoices")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.financing.postFinancingInvoices({
            invoices: [
                {
                    id: "id",
                    type: "payable",
                },
            ],
        });
        expect(response).toEqual({
            connect_token: "connect_token",
            session_token: "session_token",
        });
    });

    test("get_financing_offers", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            offers: [
                {
                    status: "NEW",
                    total_amount: 1000000,
                    available_amount: 500000,
                    currency: "AED",
                    pricing_plans: [
                        { advance_rate_percentage: 1, fee_percentage: 1, repayment_type: "MULTIPLE_DURATION" },
                    ],
                },
            ],
            business_status: "NEW",
        };
        server.mockEndpoint().get("/financing_offers").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.financing.getFinancingOffers();
        expect(response).toEqual({
            offers: [
                {
                    status: "NEW",
                    total_amount: 1000000,
                    available_amount: 500000,
                    currency: "AED",
                    pricing_plans: [
                        {
                            advance_rate_percentage: 1,
                            fee_percentage: 1,
                            repayment_type: "MULTIPLE_DURATION",
                        },
                    ],
                },
            ],
            business_status: "NEW",
        });
    });

    test("post_financing_tokens", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = { connect_token: "connect_token" };
        server.mockEndpoint().post("/financing_tokens").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.financing.postFinancingTokens();
        expect(response).toEqual({
            connect_token: "connect_token",
        });
    });
});
