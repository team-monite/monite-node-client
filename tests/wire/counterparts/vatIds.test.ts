/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { MoniteClient } from "../../../src/Client";

describe("VatIds", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [{ id: "id", counterpart_id: "counterpart_id", country: "AF", type: "ae_trn", value: "123456789" }],
        };
        server
            .mockEndpoint()
            .get("/counterparts/counterpart_id/vat_ids")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.counterparts.vatIds.get("counterpart_id");
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    counterpart_id: "counterpart_id",
                    country: "AF",
                    type: "ae_trn",
                    value: "123456789",
                },
            ],
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { value: "123456789" };
        const rawResponseBody = {
            id: "id",
            counterpart_id: "counterpart_id",
            country: "AF",
            type: "ae_trn",
            value: "123456789",
        };
        server
            .mockEndpoint()
            .post("/counterparts/counterpart_id/vat_ids")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.counterparts.vatIds.create("counterpart_id", {
            value: "123456789",
        });
        expect(response).toEqual({
            id: "id",
            counterpart_id: "counterpart_id",
            country: "AF",
            type: "ae_trn",
            value: "123456789",
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            counterpart_id: "counterpart_id",
            country: "AF",
            type: "ae_trn",
            value: "123456789",
        };
        server
            .mockEndpoint()
            .get("/counterparts/counterpart_id/vat_ids/vat_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.counterparts.vatIds.getById("vat_id", "counterpart_id");
        expect(response).toEqual({
            id: "id",
            counterpart_id: "counterpart_id",
            country: "AF",
            type: "ae_trn",
            value: "123456789",
        });
    });

    test("delete_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        server
            .mockEndpoint()
            .delete("/counterparts/counterpart_id/vat_ids/vat_id")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.counterparts.vatIds.deleteById("vat_id", "counterpart_id");
        expect(response).toEqual(undefined);
    });

    test("update_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            counterpart_id: "counterpart_id",
            country: "AF",
            type: "ae_trn",
            value: "123456789",
        };
        server
            .mockEndpoint()
            .patch("/counterparts/counterpart_id/vat_ids/vat_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.counterparts.vatIds.updateById("vat_id", "counterpart_id");
        expect(response).toEqual({
            id: "id",
            counterpart_id: "counterpart_id",
            country: "AF",
            type: "ae_trn",
            value: "123456789",
        });
    });
});
