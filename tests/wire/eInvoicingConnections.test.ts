/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { MoniteClient } from "../../src/Client";

describe("EInvoicingConnections", () => {
    test("get_einvoicing_connections", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    address: {
                        address_line1: "address_line1",
                        city: "city",
                        country: "DE",
                        postal_code: "postal_code",
                    },
                    credentials: [
                        {
                            id: "id",
                            created_at: "2024-01-15T09:30:00Z",
                            updated_at: "2024-01-15T09:30:00Z",
                            einvoicing_connection_id: "einvoicing_connection_id",
                            network_credentials_identifier: "12345678",
                            network_credentials_schema: "DE:VAT",
                        },
                    ],
                    entity_id: "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    is_receiver: true,
                    is_sender: true,
                    legal_name: "legal_name",
                    provider_id: "12345",
                    status: "active",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/einvoicing_connections")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.eInvoicingConnections.getEinvoicingConnections();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    address: {
                        address_line1: "address_line1",
                        city: "city",
                        country: "DE",
                        postal_code: "postal_code",
                    },
                    credentials: [
                        {
                            id: "id",
                            created_at: "2024-01-15T09:30:00Z",
                            updated_at: "2024-01-15T09:30:00Z",
                            einvoicing_connection_id: "einvoicing_connection_id",
                            network_credentials_identifier: "12345678",
                            network_credentials_schema: "DE:VAT",
                        },
                    ],
                    entity_id: "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    is_receiver: true,
                    is_sender: true,
                    legal_name: "legal_name",
                    provider_id: "12345",
                    status: "active",
                },
            ],
        });
    });

    test("post_einvoicing_connections", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {
            address: { address_line1: "address_line1", city: "city", country: "DE", postal_code: "postal_code" },
        };
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                address_line1: "address_line1",
                address_line2: "address_line2",
                city: "city",
                country: "DE",
                postal_code: "postal_code",
                state: "state",
            },
            credentials: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    einvoicing_connection_id: "einvoicing_connection_id",
                    network_credentials_identifier: "12345678",
                    network_credentials_schema: "DE:VAT",
                },
            ],
            entity_id: "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            is_receiver: true,
            is_sender: true,
            legal_name: "legal_name",
            provider_id: "12345",
            status: "active",
        };
        server
            .mockEndpoint()
            .post("/einvoicing_connections")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.eInvoicingConnections.postEinvoicingConnections({
            address: {
                address_line1: "address_line1",
                city: "city",
                country: "DE",
                postal_code: "postal_code",
            },
        });
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                address_line1: "address_line1",
                address_line2: "address_line2",
                city: "city",
                country: "DE",
                postal_code: "postal_code",
                state: "state",
            },
            credentials: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    einvoicing_connection_id: "einvoicing_connection_id",
                    network_credentials_identifier: "12345678",
                    network_credentials_schema: "DE:VAT",
                },
            ],
            entity_id: "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            is_receiver: true,
            is_sender: true,
            legal_name: "legal_name",
            provider_id: "12345",
            status: "active",
        });
    });

    test("get_einvoicing_connections_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                address_line1: "address_line1",
                address_line2: "address_line2",
                city: "city",
                country: "DE",
                postal_code: "postal_code",
                state: "state",
            },
            credentials: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    einvoicing_connection_id: "einvoicing_connection_id",
                    network_credentials_identifier: "12345678",
                    network_credentials_schema: "DE:VAT",
                },
            ],
            entity_id: "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            is_receiver: true,
            is_sender: true,
            legal_name: "legal_name",
            provider_id: "12345",
            status: "active",
        };
        server
            .mockEndpoint()
            .get("/einvoicing_connections/einvoicing_connection_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.eInvoicingConnections.getEinvoicingConnectionsId("einvoicing_connection_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                address_line1: "address_line1",
                address_line2: "address_line2",
                city: "city",
                country: "DE",
                postal_code: "postal_code",
                state: "state",
            },
            credentials: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    einvoicing_connection_id: "einvoicing_connection_id",
                    network_credentials_identifier: "12345678",
                    network_credentials_schema: "DE:VAT",
                },
            ],
            entity_id: "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            is_receiver: true,
            is_sender: true,
            legal_name: "legal_name",
            provider_id: "12345",
            status: "active",
        });
    });

    test("delete_einvoicing_connections_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        server
            .mockEndpoint()
            .delete("/einvoicing_connections/einvoicing_connection_id")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.eInvoicingConnections.deleteEinvoicingConnectionsId("einvoicing_connection_id");
        expect(response).toEqual(undefined);
    });

    test("patch_einvoicing_connections_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                address_line1: "address_line1",
                address_line2: "address_line2",
                city: "city",
                country: "DE",
                postal_code: "postal_code",
                state: "state",
            },
            credentials: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    einvoicing_connection_id: "einvoicing_connection_id",
                    network_credentials_identifier: "12345678",
                    network_credentials_schema: "DE:VAT",
                },
            ],
            entity_id: "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            is_receiver: true,
            is_sender: true,
            legal_name: "legal_name",
            provider_id: "12345",
            status: "active",
        };
        server
            .mockEndpoint()
            .patch("/einvoicing_connections/einvoicing_connection_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.eInvoicingConnections.patchEinvoicingConnectionsId("einvoicing_connection_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                address_line1: "address_line1",
                address_line2: "address_line2",
                city: "city",
                country: "DE",
                postal_code: "postal_code",
                state: "state",
            },
            credentials: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    einvoicing_connection_id: "einvoicing_connection_id",
                    network_credentials_identifier: "12345678",
                    network_credentials_schema: "DE:VAT",
                },
            ],
            entity_id: "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            is_receiver: true,
            is_sender: true,
            legal_name: "legal_name",
            provider_id: "12345",
            status: "active",
        });
    });

    test("post_einvoicing_connections_id_network_credentials", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { network_credentials_identifier: "12345678", network_credentials_schema: "DE:VAT" };
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            einvoicing_connection_id: "einvoicing_connection_id",
            network_credentials_identifier: "12345678",
            network_credentials_schema: "DE:VAT",
        };
        server
            .mockEndpoint()
            .post("/einvoicing_connections/einvoicing_connection_id/network_credentials")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.eInvoicingConnections.postEinvoicingConnectionsIdNetworkCredentials(
            "einvoicing_connection_id",
            {
                network_credentials_identifier: "12345678",
                network_credentials_schema: "DE:VAT",
            },
        );
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            einvoicing_connection_id: "einvoicing_connection_id",
            network_credentials_identifier: "12345678",
            network_credentials_schema: "DE:VAT",
        });
    });
});
