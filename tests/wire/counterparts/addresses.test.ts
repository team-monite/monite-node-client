/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { MoniteClient } from "../../../src/Client";

describe("Addresses", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    city: "Berlin",
                    counterpart_id: "counterpart_id",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/counterparts/counterpart_id/addresses")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.counterparts.addresses.get("counterpart_id");
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    city: "Berlin",
                    counterpart_id: "counterpart_id",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
            ],
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { city: "Berlin", country: "AF", line1: "Flughafenstrasse 52", postal_code: "10115" };
        const rawResponseBody = {
            id: "id",
            city: "Berlin",
            counterpart_id: "counterpart_id",
            country: "AF",
            line1: "Flughafenstrasse 52",
            line2: "line2",
            postal_code: "10115",
            state: "state",
        };
        server
            .mockEndpoint()
            .post("/counterparts/counterpart_id/addresses")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.counterparts.addresses.create("counterpart_id", {
            city: "Berlin",
            country: "AF",
            line1: "Flughafenstrasse 52",
            postal_code: "10115",
        });
        expect(response).toEqual({
            id: "id",
            city: "Berlin",
            counterpart_id: "counterpart_id",
            country: "AF",
            line1: "Flughafenstrasse 52",
            line2: "line2",
            postal_code: "10115",
            state: "state",
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            city: "Berlin",
            counterpart_id: "counterpart_id",
            country: "AF",
            line1: "Flughafenstrasse 52",
            line2: "line2",
            postal_code: "10115",
            state: "state",
        };
        server
            .mockEndpoint()
            .get("/counterparts/counterpart_id/addresses/address_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.counterparts.addresses.getById("address_id", "counterpart_id");
        expect(response).toEqual({
            id: "id",
            city: "Berlin",
            counterpart_id: "counterpart_id",
            country: "AF",
            line1: "Flughafenstrasse 52",
            line2: "line2",
            postal_code: "10115",
            state: "state",
        });
    });

    test("delete_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        server
            .mockEndpoint()
            .delete("/counterparts/counterpart_id/addresses/address_id")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.counterparts.addresses.deleteById("address_id", "counterpart_id");
        expect(response).toEqual(undefined);
    });

    test("update_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            city: "Berlin",
            counterpart_id: "counterpart_id",
            country: "AF",
            line1: "Flughafenstrasse 52",
            line2: "line2",
            postal_code: "10115",
            state: "state",
        };
        server
            .mockEndpoint()
            .patch("/counterparts/counterpart_id/addresses/address_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.counterparts.addresses.updateById("address_id", "counterpart_id");
        expect(response).toEqual({
            id: "id",
            city: "Berlin",
            counterpart_id: "counterpart_id",
            country: "AF",
            line1: "Flughafenstrasse 52",
            line2: "line2",
            postal_code: "10115",
            state: "state",
        });
    });
});
