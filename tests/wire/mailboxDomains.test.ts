/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { MoniteClient } from "../../src/Client";

describe("MailboxDomains", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    dedicated_ip: "dedicated_ip",
                    dns_records: {
                        receiving_dns_records: [
                            { is_active: true, record_type: "TXT", valid: "valid", value: "value" },
                        ],
                        sending_dns_records: [{ is_active: true, record_type: "TXT", valid: "valid", value: "value" }],
                    },
                    domain: "domain",
                    last_updated_at: "2024-01-15T09:30:00Z",
                    status: "status",
                },
            ],
        };
        server.mockEndpoint().get("/mailbox_domains").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.mailboxDomains.get();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    dedicated_ip: "dedicated_ip",
                    dns_records: {
                        receiving_dns_records: [
                            {
                                is_active: true,
                                record_type: "TXT",
                                valid: "valid",
                                value: "value",
                            },
                        ],
                        sending_dns_records: [
                            {
                                is_active: true,
                                record_type: "TXT",
                                valid: "valid",
                                value: "value",
                            },
                        ],
                    },
                    domain: "domain",
                    last_updated_at: "2024-01-15T09:30:00Z",
                    status: "status",
                },
            ],
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { domain: "domain" };
        const rawResponseBody = {
            id: "id",
            dedicated_ip: "dedicated_ip",
            dns_records: {
                receiving_dns_records: [{ is_active: true, record_type: "TXT", valid: "valid", value: "value" }],
                sending_dns_records: [{ is_active: true, record_type: "TXT", valid: "valid", value: "value" }],
            },
            domain: "domain",
            last_updated_at: "2024-01-15T09:30:00Z",
            status: "status",
        };
        server
            .mockEndpoint()
            .post("/mailbox_domains")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mailboxDomains.create({
            domain: "domain",
        });
        expect(response).toEqual({
            id: "id",
            dedicated_ip: "dedicated_ip",
            dns_records: {
                receiving_dns_records: [
                    {
                        is_active: true,
                        record_type: "TXT",
                        valid: "valid",
                        value: "value",
                    },
                ],
                sending_dns_records: [
                    {
                        is_active: true,
                        record_type: "TXT",
                        valid: "valid",
                        value: "value",
                    },
                ],
            },
            domain: "domain",
            last_updated_at: "2024-01-15T09:30:00Z",
            status: "status",
        });
    });

    test("delete_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        server.mockEndpoint().delete("/mailbox_domains/domain_id").respondWith().statusCode(200).build();

        const response = await client.mailboxDomains.deleteById("domain_id");
        expect(response).toEqual(undefined);
    });

    test("verify_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = { id: "id", domain: "domain", status: "status" };
        server
            .mockEndpoint()
            .post("/mailbox_domains/domain_id/verify")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mailboxDomains.verifyById("domain_id");
        expect(response).toEqual({
            id: "id",
            domain: "domain",
            status: "status",
        });
    });
});
