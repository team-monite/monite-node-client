/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { MoniteClient } from "../../../src/Client";

describe("TaxRates", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    code: "code",
                    components: [{}],
                    effective_tax_rate: 1,
                    name: "name",
                    status: "status",
                    total_tax_rate: 1,
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        };
        server
            .mockEndpoint()
            .get("/accounting_tax_rates")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounting.taxRates.get();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    code: "code",
                    components: [{}],
                    effective_tax_rate: 1,
                    name: "name",
                    status: "status",
                    total_tax_rate: 1,
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            code: "code",
            components: [{ is_compound: true, name: "name", rate: 1 }],
            effective_tax_rate: 1,
            name: "name",
            status: "status",
            total_tax_rate: 1,
        };
        server
            .mockEndpoint()
            .get("/accounting_tax_rates/tax_rate_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounting.taxRates.getById("tax_rate_id");
        expect(response).toEqual({
            id: "id",
            code: "code",
            components: [
                {
                    is_compound: true,
                    name: "name",
                    rate: 1,
                },
            ],
            effective_tax_rate: 1,
            name: "name",
            status: "status",
            total_tax_rate: 1,
        });
    });
});
