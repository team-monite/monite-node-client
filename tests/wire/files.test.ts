/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { MoniteClient } from "../../src/Client";

describe("Files", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    file_type: "file_type",
                    md5: "60997cbcc1a6fb2ec37d389ffa8588db",
                    mimetype: "application/pdf",
                    name: "timesheet.pdf",
                    region: "eu-central-1",
                    s3_bucket: "s3_bucket",
                    s3_file_path: "s3_file_path",
                    size: 120101,
                    url: "https://bucketname.s3.amazonaws.com/path/to/timesheet.pdf",
                },
            ],
        };
        server.mockEndpoint().get("/files").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.files.get();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    file_type: "file_type",
                    md5: "60997cbcc1a6fb2ec37d389ffa8588db",
                    mimetype: "application/pdf",
                    name: "timesheet.pdf",
                    region: "eu-central-1",
                    s3_bucket: "s3_bucket",
                    s3_file_path: "s3_file_path",
                    size: 120101,
                    url: "https://bucketname.s3.amazonaws.com/path/to/timesheet.pdf",
                },
            ],
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            file_type: "file_type",
            md5: "60997cbcc1a6fb2ec37d389ffa8588db",
            mimetype: "application/pdf",
            name: "timesheet.pdf",
            region: "eu-central-1",
            s3_bucket: "s3_bucket",
            s3_file_path: "s3_file_path",
            size: 120101,
            url: "https://bucketname.s3.amazonaws.com/path/to/timesheet.pdf",
        };
        server.mockEndpoint().get("/files/file_id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.files.getById("file_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            file_type: "file_type",
            md5: "60997cbcc1a6fb2ec37d389ffa8588db",
            mimetype: "application/pdf",
            name: "timesheet.pdf",
            region: "eu-central-1",
            s3_bucket: "s3_bucket",
            s3_file_path: "s3_file_path",
            size: 120101,
            url: "https://bucketname.s3.amazonaws.com/path/to/timesheet.pdf",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        server.mockEndpoint().delete("/files/file_id").respondWith().statusCode(200).build();

        const response = await client.files.delete("file_id");
        expect(response).toEqual(undefined);
    });
});
