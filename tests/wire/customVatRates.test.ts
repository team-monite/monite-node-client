/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { MoniteClient } from "../../src/Client";

describe("CustomVatRates", () => {
    test("get_custom_vat_rates", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    components: [{ name: "name", value: 1.1 }],
                    created_by_entity_user_id: "created_by_entity_user_id",
                    name: "name",
                    value: 1.1,
                },
            ],
        };
        server.mockEndpoint().get("/custom_vat_rates").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.customVatRates.getCustomVatRates();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    components: [
                        {
                            name: "name",
                            value: 1.1,
                        },
                    ],
                    created_by_entity_user_id: "created_by_entity_user_id",
                    name: "name",
                    value: 1.1,
                },
            ],
        });
    });

    test("post_custom_vat_rates", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { components: [{ name: "name", value: 1.1 }], name: "name" };
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            components: [{ name: "name", value: 1.1 }],
            created_by_entity_user_id: "created_by_entity_user_id",
            name: "name",
            value: 1.1,
        };
        server
            .mockEndpoint()
            .post("/custom_vat_rates")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customVatRates.postCustomVatRates({
            components: [
                {
                    name: "name",
                    value: 1.1,
                },
            ],
            name: "name",
        });
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            components: [
                {
                    name: "name",
                    value: 1.1,
                },
            ],
            created_by_entity_user_id: "created_by_entity_user_id",
            name: "name",
            value: 1.1,
        });
    });

    test("get_custom_vat_rates_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            components: [{ name: "name", value: 1.1 }],
            created_by_entity_user_id: "created_by_entity_user_id",
            name: "name",
            value: 1.1,
        };
        server
            .mockEndpoint()
            .get("/custom_vat_rates/custom_vat_rate_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customVatRates.getCustomVatRatesId("custom_vat_rate_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            components: [
                {
                    name: "name",
                    value: 1.1,
                },
            ],
            created_by_entity_user_id: "created_by_entity_user_id",
            name: "name",
            value: 1.1,
        });
    });

    test("delete_custom_vat_rates_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        server.mockEndpoint().delete("/custom_vat_rates/custom_vat_rate_id").respondWith().statusCode(200).build();

        const response = await client.customVatRates.deleteCustomVatRatesId("custom_vat_rate_id");
        expect(response).toEqual(undefined);
    });

    test("patch_custom_vat_rates_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            components: [{ name: "name", value: 1.1 }],
            created_by_entity_user_id: "created_by_entity_user_id",
            name: "name",
            value: 1.1,
        };
        server
            .mockEndpoint()
            .patch("/custom_vat_rates/custom_vat_rate_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customVatRates.patchCustomVatRatesId("custom_vat_rate_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            components: [
                {
                    name: "name",
                    value: 1.1,
                },
            ],
            created_by_entity_user_id: "created_by_entity_user_id",
            name: "name",
            value: 1.1,
        });
    });
});
