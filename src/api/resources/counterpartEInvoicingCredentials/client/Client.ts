/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Monite from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index.js";

export declare namespace CounterpartEInvoicingCredentials {
    export interface Options {
        environment?: core.Supplier<environments.MoniteEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the x-monite-version header */
        moniteVersion: core.Supplier<string>;
        /** Override the x-monite-entity-id header */
        moniteEntityId?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-monite-version header */
        moniteVersion?: string;
        /** Override the x-monite-entity-id header */
        moniteEntityId?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class CounterpartEInvoicingCredentials {
    protected readonly _options: CounterpartEInvoicingCredentials.Options;

    constructor(_options: CounterpartEInvoicingCredentials.Options) {
        this._options = _options;
    }

    /**
     * @param {string} counterpartId
     * @param {CounterpartEInvoicingCredentials.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.ConflictError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.InternalServerError}
     *
     * @example
     *     await client.counterpartEInvoicingCredentials.getCounterpartsIdEinvoicingCredentials("counterpart_id")
     */
    public getCounterpartsIdEinvoicingCredentials(
        counterpartId: string,
        requestOptions?: CounterpartEInvoicingCredentials.RequestOptions,
    ): core.HttpResponsePromise<Monite.CounterpartEinvoicingCredentialResponseList> {
        return core.HttpResponsePromise.fromPromise(
            this.__getCounterpartsIdEinvoicingCredentials(counterpartId, requestOptions),
        );
    }

    private async __getCounterpartsIdEinvoicingCredentials(
        counterpartId: string,
        requestOptions?: CounterpartEInvoicingCredentials.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.CounterpartEinvoicingCredentialResponseList>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `counterparts/${encodeURIComponent(counterpartId)}/einvoicing_credentials`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "x-monite-version": requestOptions?.moniteVersion,
                    "x-monite-entity-id": requestOptions?.moniteEntityId,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Monite.CounterpartEinvoicingCredentialResponseList,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 409:
                    throw new Monite.ConflictError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Monite.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling GET /counterparts/{counterpart_id}/einvoicing_credentials.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} counterpartId
     * @param {Monite.CreateCounterpartEinvoicingCredentialPayload} request
     * @param {CounterpartEInvoicingCredentials.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.ConflictError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.InternalServerError}
     *
     * @example
     *     await client.counterpartEInvoicingCredentials.postCounterpartsIdEinvoicingCredentials("counterpart_id", {
     *         counterpart_vat_id_id: "counterpart_vat_id_id"
     *     })
     */
    public postCounterpartsIdEinvoicingCredentials(
        counterpartId: string,
        request: Monite.CreateCounterpartEinvoicingCredentialPayload,
        requestOptions?: CounterpartEInvoicingCredentials.RequestOptions,
    ): core.HttpResponsePromise<Monite.CounterpartEinvoicingCredentialResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__postCounterpartsIdEinvoicingCredentials(counterpartId, request, requestOptions),
        );
    }

    private async __postCounterpartsIdEinvoicingCredentials(
        counterpartId: string,
        request: Monite.CreateCounterpartEinvoicingCredentialPayload,
        requestOptions?: CounterpartEInvoicingCredentials.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.CounterpartEinvoicingCredentialResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `counterparts/${encodeURIComponent(counterpartId)}/einvoicing_credentials`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "x-monite-version": requestOptions?.moniteVersion,
                    "x-monite-entity-id": requestOptions?.moniteEntityId,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Monite.CounterpartEinvoicingCredentialResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 409:
                    throw new Monite.ConflictError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Monite.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling POST /counterparts/{counterpart_id}/einvoicing_credentials.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} credentialId
     * @param {string} counterpartId
     * @param {CounterpartEInvoicingCredentials.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.NotFoundError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.InternalServerError}
     *
     * @example
     *     await client.counterpartEInvoicingCredentials.getCounterpartsIdEinvoicingCredentialsId("credential_id", "counterpart_id")
     */
    public getCounterpartsIdEinvoicingCredentialsId(
        credentialId: string,
        counterpartId: string,
        requestOptions?: CounterpartEInvoicingCredentials.RequestOptions,
    ): core.HttpResponsePromise<Monite.CounterpartEinvoicingCredentialResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__getCounterpartsIdEinvoicingCredentialsId(credentialId, counterpartId, requestOptions),
        );
    }

    private async __getCounterpartsIdEinvoicingCredentialsId(
        credentialId: string,
        counterpartId: string,
        requestOptions?: CounterpartEInvoicingCredentials.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.CounterpartEinvoicingCredentialResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `counterparts/${encodeURIComponent(counterpartId)}/einvoicing_credentials/${encodeURIComponent(credentialId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "x-monite-version": requestOptions?.moniteVersion,
                    "x-monite-entity-id": requestOptions?.moniteEntityId,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Monite.CounterpartEinvoicingCredentialResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Monite.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Monite.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling GET /counterparts/{counterpart_id}/einvoicing_credentials/{credential_id}.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} credentialId
     * @param {string} counterpartId
     * @param {CounterpartEInvoicingCredentials.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.NotFoundError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.InternalServerError}
     *
     * @example
     *     await client.counterpartEInvoicingCredentials.deleteCounterpartsIdEinvoicingCredentialsId("credential_id", "counterpart_id")
     */
    public deleteCounterpartsIdEinvoicingCredentialsId(
        credentialId: string,
        counterpartId: string,
        requestOptions?: CounterpartEInvoicingCredentials.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(
            this.__deleteCounterpartsIdEinvoicingCredentialsId(credentialId, counterpartId, requestOptions),
        );
    }

    private async __deleteCounterpartsIdEinvoicingCredentialsId(
        credentialId: string,
        counterpartId: string,
        requestOptions?: CounterpartEInvoicingCredentials.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `counterparts/${encodeURIComponent(counterpartId)}/einvoicing_credentials/${encodeURIComponent(credentialId)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "x-monite-version": requestOptions?.moniteVersion,
                    "x-monite-entity-id": requestOptions?.moniteEntityId,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Monite.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Monite.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling DELETE /counterparts/{counterpart_id}/einvoicing_credentials/{credential_id}.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} credentialId
     * @param {string} counterpartId
     * @param {Monite.UpdateCounterpartEinvoicingCredentialSchema} request
     * @param {CounterpartEInvoicingCredentials.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.NotFoundError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.InternalServerError}
     *
     * @example
     *     await client.counterpartEInvoicingCredentials.patchCounterpartsIdEinvoicingCredentialsId("credential_id", "counterpart_id")
     */
    public patchCounterpartsIdEinvoicingCredentialsId(
        credentialId: string,
        counterpartId: string,
        request: Monite.UpdateCounterpartEinvoicingCredentialSchema = {},
        requestOptions?: CounterpartEInvoicingCredentials.RequestOptions,
    ): core.HttpResponsePromise<Monite.CounterpartEinvoicingCredentialResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__patchCounterpartsIdEinvoicingCredentialsId(credentialId, counterpartId, request, requestOptions),
        );
    }

    private async __patchCounterpartsIdEinvoicingCredentialsId(
        credentialId: string,
        counterpartId: string,
        request: Monite.UpdateCounterpartEinvoicingCredentialSchema = {},
        requestOptions?: CounterpartEInvoicingCredentials.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.CounterpartEinvoicingCredentialResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `counterparts/${encodeURIComponent(counterpartId)}/einvoicing_credentials/${encodeURIComponent(credentialId)}`,
            ),
            method: "PATCH",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "x-monite-version": requestOptions?.moniteVersion,
                    "x-monite-entity-id": requestOptions?.moniteEntityId,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Monite.CounterpartEinvoicingCredentialResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Monite.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Monite.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling PATCH /counterparts/{counterpart_id}/einvoicing_credentials/{credential_id}.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
