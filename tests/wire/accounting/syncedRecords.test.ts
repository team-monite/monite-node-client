/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { MoniteClient } from "../../../src/Client";

describe("SyncedRecords", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    errors: { key: "value" },
                    last_pulled_at: "2024-01-15T09:30:00Z",
                    object_updated_at: "2024-01-15T09:30:00Z",
                    object_id: "object_id",
                    platform: "xero",
                    platform_updated_at: "2024-01-15T09:30:00Z",
                    platform_object_id: "platform_object_id",
                    provider: "codat",
                    provider_updated_at: "2024-01-15T09:30:00Z",
                    provider_object_id: "provider_object_id",
                    sync_status: "pending",
                    object_type: "product",
                },
            ],
            next_pagination_token:
                "eyJvcmRlciI6ImFzYyIsImxpbWl0IjoyLCJwYWdpbmF0aW9uX2ZpbHRlcnMiOnsiZW50aXR5X2lkIjoiOWQyYjRjOGYtMjA4Ny00NzM4LWJhOTEtNzM1OTY4M2M0OWE0In0sInBhZ2luYXRpb25fdG9rZW5fdHlwZSI6Im5leHQiLCJjdXJzb3JfZmllbGQiOm51bGwsImN1cnNvcl9maWVsZF92YWx1ZSI6bnVsbCwiY3VycmVudF9vaWQiOjR9",
            prev_pagination_token:
                "eyJvcmRlciI6ImFzYyIsImxpbWl0IjoyLCJwYWdpbmF0aW9uX2ZpbHRlcnMiOnsiZW50aXR5X2lkIjoiOWQyYjRjOGYtMjA4Ny00NzM4LWJhOTEtNzM1OTY4M2M0OWE0In0sInBhZ2luYXRpb25fdG9rZW5fdHlwZSI6Im5leHQiLCJjdXJzb3JfZmllbGQiOm51bGwsImN1cnNvcl9maWVsZF92YWx1ZSI6bnVsbCwiY3VycmVudF9vaWQiOjR9",
        };
        server
            .mockEndpoint()
            .get("/accounting_synced_records")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounting.syncedRecords.get({
            object_type: "product",
        });
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    errors: {
                        key: "value",
                    },
                    last_pulled_at: "2024-01-15T09:30:00Z",
                    object_updated_at: "2024-01-15T09:30:00Z",
                    object_id: "object_id",
                    platform: "xero",
                    platform_updated_at: "2024-01-15T09:30:00Z",
                    platform_object_id: "platform_object_id",
                    provider: "codat",
                    provider_updated_at: "2024-01-15T09:30:00Z",
                    provider_object_id: "provider_object_id",
                    sync_status: "pending",
                    object_type: "product",
                },
            ],
            next_pagination_token:
                "eyJvcmRlciI6ImFzYyIsImxpbWl0IjoyLCJwYWdpbmF0aW9uX2ZpbHRlcnMiOnsiZW50aXR5X2lkIjoiOWQyYjRjOGYtMjA4Ny00NzM4LWJhOTEtNzM1OTY4M2M0OWE0In0sInBhZ2luYXRpb25fdG9rZW5fdHlwZSI6Im5leHQiLCJjdXJzb3JfZmllbGQiOm51bGwsImN1cnNvcl9maWVsZF92YWx1ZSI6bnVsbCwiY3VycmVudF9vaWQiOjR9",
            prev_pagination_token:
                "eyJvcmRlciI6ImFzYyIsImxpbWl0IjoyLCJwYWdpbmF0aW9uX2ZpbHRlcnMiOnsiZW50aXR5X2lkIjoiOWQyYjRjOGYtMjA4Ny00NzM4LWJhOTEtNzM1OTY4M2M0OWE0In0sInBhZ2luYXRpb25fdG9rZW5fdHlwZSI6Im5leHQiLCJjdXJzb3JfZmllbGQiOm51bGwsImN1cnNvcl9maWVsZF92YWx1ZSI6bnVsbCwiY3VycmVudF9vaWQiOjR9",
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            errors: { key: "value" },
            last_pulled_at: "2024-01-15T09:30:00Z",
            object_updated_at: "2024-01-15T09:30:00Z",
            object_id: "object_id",
            platform: "xero",
            platform_updated_at: "2024-01-15T09:30:00Z",
            platform_object_id: "platform_object_id",
            provider: "codat",
            provider_updated_at: "2024-01-15T09:30:00Z",
            provider_object_id: "provider_object_id",
            sync_status: "pending",
            object_type: "product",
        };
        server
            .mockEndpoint()
            .get("/accounting_synced_records/synced_record_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounting.syncedRecords.getById("synced_record_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            errors: {
                key: "value",
            },
            last_pulled_at: "2024-01-15T09:30:00Z",
            object_updated_at: "2024-01-15T09:30:00Z",
            object_id: "object_id",
            platform: "xero",
            platform_updated_at: "2024-01-15T09:30:00Z",
            platform_object_id: "platform_object_id",
            provider: "codat",
            provider_updated_at: "2024-01-15T09:30:00Z",
            provider_object_id: "provider_object_id",
            sync_status: "pending",
            object_type: "product",
        });
    });

    test("push_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            errors: { key: "value" },
            last_pulled_at: "2024-01-15T09:30:00Z",
            object_updated_at: "2024-01-15T09:30:00Z",
            object_id: "object_id",
            platform: "xero",
            platform_updated_at: "2024-01-15T09:30:00Z",
            platform_object_id: "platform_object_id",
            provider: "codat",
            provider_updated_at: "2024-01-15T09:30:00Z",
            provider_object_id: "provider_object_id",
            sync_status: "pending",
            object_type: "product",
        };
        server
            .mockEndpoint()
            .post("/accounting_synced_records/synced_record_id/push")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounting.syncedRecords.pushById("synced_record_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            errors: {
                key: "value",
            },
            last_pulled_at: "2024-01-15T09:30:00Z",
            object_updated_at: "2024-01-15T09:30:00Z",
            object_id: "object_id",
            platform: "xero",
            platform_updated_at: "2024-01-15T09:30:00Z",
            platform_object_id: "platform_object_id",
            provider: "codat",
            provider_updated_at: "2024-01-15T09:30:00Z",
            provider_object_id: "provider_object_id",
            sync_status: "pending",
            object_type: "product",
        });
    });
});
