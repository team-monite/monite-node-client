/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Monite from "../../../../index.js";

/**
 * @example
 *     {}
 */
export interface ReceivablesSearchRequest {
    /** Return only receivables with the exact specified discounted subtotal. The amount must be specified in the [minor units](https://docs.monite.com/references/currencies#minor-units) of currency. For example, $12.5 is represented as 1250. */
    discounted_subtotal?: number;
    /** Return only receivables whose discounted subtotal (in minor units) is greater than the specified value. */
    discounted_subtotal__gt?: number;
    /** Return only receivables whose discounted subtotal (in minor units) is greater than or equal to the specified value. */
    discounted_subtotal__gte?: number;
    /** Return only receivables whose discounted subtotal (in minor units) is less than the specified value. */
    discounted_subtotal__lt?: number;
    /** Return only receivables whose discounted subtotal (in minor units) is less than or equal to the specified value. */
    discounted_subtotal__lte?: number;
    /**
     * This parameter accepts a quote ID or an invoice ID.
     *
     * * Specify a quote ID to find invoices created from this quote.
     * * Specify an invoice ID to find credit notes created for this invoice.
     *
     * Valid but nonexistent IDs do not raise errors but produce no results.
     */
    based_on?: string;
    /**
     * Return only receivables created for the counterpart with the specified ID.
     *
     * Counterparts that have been deleted but have associated receivables will still return results here because the receivables contain a frozen copy of the counterpart data.
     *
     * If the specified counterpart ID does not exist and never existed, no results are returned.
     */
    counterpart_id?: string;
    /** Return only receivables created for counterparts with the specified name (exact match, case-sensitive). For counterparts of `type` = `individual`, the full name is formatted as `first_name last_name`. */
    counterpart_name?: string;
    /** Return only receivables created for counterparts whose name contains the specified string (case-sensitive). */
    counterpart_name__contains?: string;
    /** Return only receivables created for counterparts whose name contains the specified string (case-insensitive). */
    counterpart_name__icontains?: string;
    /** Return only receivables created after the specified date and time. The value must be in the ISO 8601 format `YYYY-MM-DDThh:mm[:ss[.ffffff]][Z|±hh:mm]`. */
    created_at__gt?: string;
    /** Return only receivables created on or after the specified date and time. */
    created_at__gte?: string;
    /** Return only receivables created before the specified date and time. */
    created_at__lt?: string;
    /** Return only receivables created before or on the specified date and time. */
    created_at__lte?: string;
    /** Return a receivable with the exact specified document number (case-sensitive). The `document_id` is the user-facing document number such as INV-00042, not to be confused with Monite resource IDs (`id`). */
    document_id?: string;
    /** Return only receivables whose document number (`document_id`) contains the specified string (case-sensitive). */
    document_id__contains?: string;
    /** Return only receivables whose document number (`document_id`) contains the specified string (case-insensitive). */
    document_id__icontains?: string;
    /**
     * Return invoices that are due after the specified date (exclusive, `YYYY-MM-DD`).
     *
     * This filter excludes quotes, credit notes, and draft invoices.
     */
    due_date__gt?: string;
    /**
     * Return invoices that are due on or after the specified date (`YYYY-MM-DD`).
     *
     * This filter excludes quotes, credit notes, and draft invoices.
     */
    due_date__gte?: string;
    /**
     * Return invoices that are due before the specified date (exclusive, `YYYY-MM-DD`).
     *
     * This filter excludes quotes, credit notes, and draft invoices.
     */
    due_date__lt?: string;
    /**
     * Return invoices that are due before or on the specified date (`YYYY-MM-DD`).
     *
     * This filter excludes quotes, credit notes, and draft invoices.
     */
    due_date__lte?: string;
    /**
     * Return only receivables created by the entity user with the specified ID. To query receivables by multiple user IDs at once, use the `entity_user_id__in` parameter instead.
     *
     * If the request is authenticated using an entity user token, this user must have the `receivable.read.allowed` (rather than `allowed_for_own`) permission to be able to query receivables created by other users.
     *
     * IDs of deleted users will still produce results here if those users had associated receivables. Valid but nonexistent user IDs do not raise errors but produce no results.
     */
    entity_user_id?: string;
    entity_user_id__in?: string[];
    id__in?: string[];
    /** Return only non-draft receivables that were issued after the specified date and time. The value must be in the ISO 8601 format `YYYY-MM-DDThh:mm[:ss[.ffffff]][Z|±hh:mm]`. */
    issue_date__gt?: string;
    /** Return only non-draft receivables that were issued on or after the specified date and time. */
    issue_date__gte?: string;
    /** Return only non-draft receivables that were issued before the specified date and time. */
    issue_date__lt?: string;
    /** Return only non-draft receivables that were issued before or on the specified date and time. */
    issue_date__lte?: string;
    limit?: number;
    order?: Monite.OrderEnum;
    pagination_token?: string;
    product_ids?: string[];
    product_ids__in?: string[];
    /** Return only receivables assigned to the project with the specified ID. Valid but nonexistent project IDs do not raise errors but return no results. */
    project_id?: string;
    project_id__in?: string[];
    sort?: Monite.ReceivableCursorFields2;
    /**
     * Return only receivables that have the specified status. See the applicable [invoice statuses](https://docs.monite.com/accounts-receivable/invoices/index), [quote statuses](https://docs.monite.com/accounts-receivable/quotes/index), and [credit note statuses](https://docs.monite.com/accounts-receivable/credit-notes#credit-note-lifecycle).
     *
     * To query multiple statuses at once, use the `status__in` parameter instead.
     */
    status?: ReceivablesSearchRequest.Status;
    status__in?: string[];
    tag_ids?: string[];
    tag_ids__in?: string[];
    /** Return only receivables with the exact specified total amount. The amount must be specified in the [minor units](https://docs.monite.com/references/currencies#minor-units) of currency. For example, $12.5 is represented as 1250. */
    total_amount?: number;
    /** Return only receivables whose total amount (in minor units) exceeds the specified value. */
    total_amount__gt?: number;
    /** Return only receivables whose total amount (in minor units) is greater than or equal to the specified value. */
    total_amount__gte?: number;
    /** Return only receivables whose total amount (in minor units) is less than the specified value. */
    total_amount__lt?: number;
    /** Return only receivables whose total amount (in minor units) is less than or equal to the specified value. */
    total_amount__lte?: number;
    /** Return only receivables of the specified type. Use this parameter to get only invoices, or only quotes, or only credit notes. */
    type?: Monite.ReceivableType;
}

export namespace ReceivablesSearchRequest {
    /**
     * Return only receivables that have the specified status. See the applicable [invoice statuses](https://docs.monite.com/accounts-receivable/invoices/index), [quote statuses](https://docs.monite.com/accounts-receivable/quotes/index), and [credit note statuses](https://docs.monite.com/accounts-receivable/credit-notes#credit-note-lifecycle).
     *
     * To query multiple statuses at once, use the `status__in` parameter instead.
     */
    export type Status =
        | "draft"
        | "issuing"
        | "issued"
        | "failed"
        | "accepted"
        | "expired"
        | "declined"
        | "recurring"
        | "partially_paid"
        | "paid"
        | "overdue"
        | "uncollectible"
        | "canceled";
    export const Status = {
        Draft: "draft",
        Issuing: "issuing",
        Issued: "issued",
        Failed: "failed",
        Accepted: "accepted",
        Expired: "expired",
        Declined: "declined",
        Recurring: "recurring",
        PartiallyPaid: "partially_paid",
        Paid: "paid",
        Overdue: "overdue",
        Uncollectible: "uncollectible",
        Canceled: "canceled",
    } as const;
}
