/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Monite from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace VatRates {
    export interface Options {
        environment?: core.Supplier<environments.MoniteEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the x-monite-version header */
        moniteVersion: core.Supplier<string>;
        /** Override the x-monite-entity-id header */
        moniteEntityId?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-monite-version header */
        moniteVersion?: string;
        /** Override the x-monite-entity-id header */
        moniteEntityId?: string | undefined;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class VatRates {
    protected readonly _options: VatRates.Options;

    constructor(_options: VatRates.Options) {
        this._options = _options;
    }

    /**
     * Monite maintains a catalog of VAT and sales tax rates for [select countries](https://docs.monite.com/accounts-receivable/vat-rates#supported-countries).
     *
     * To query the applicable VAT/tax rates for an invoice or quote, use:
     *
     * `GET /vat_rates?counterpart_id=<...>&entity_vat_id_id=<...>`
     *
     * Or if the entity does not have a VAT ID:
     *
     * `GET /vat_rates?counterpart_id=<...>`
     *
     * **Note:** Entities from countries [not on the list](https://docs.monite.com/accounts-receivable/vat-rates#supported-countries) should not use this endpoint. Instead, those entities can either create custom VAT/tax rates or use the invoice field `line_items[].tax_rate_value` to specify the VAT/tax rates directly.
     *
     * @param {Monite.VatRatesGetRequest} request
     * @param {VatRates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.BadRequestError}
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.ForbiddenError}
     * @throws {@link Monite.NotFoundError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.vatRates.get()
     */
    public get(
        request: Monite.VatRatesGetRequest = {},
        requestOptions?: VatRates.RequestOptions,
    ): core.HttpResponsePromise<Monite.VatRateListResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(request, requestOptions));
    }

    private async __get(
        request: Monite.VatRatesGetRequest = {},
        requestOptions?: VatRates.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.VatRateListResponse>> {
        const {
            counterpart_address_id: counterpartAddressId,
            counterpart_id: counterpartId,
            counterpart_vat_id_id: counterpartVatIdId,
            entity_vat_id_id: entityVatIdId,
            product_type: productType,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (counterpartAddressId != null) {
            _queryParams["counterpart_address_id"] = counterpartAddressId;
        }

        if (counterpartId != null) {
            _queryParams["counterpart_id"] = counterpartId;
        }

        if (counterpartVatIdId != null) {
            _queryParams["counterpart_vat_id_id"] = counterpartVatIdId;
        }

        if (entityVatIdId != null) {
            _queryParams["entity_vat_id_id"] = entityVatIdId;
        }

        if (productType != null) {
            _queryParams["product_type"] = productType;
        }

        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                "vat_rates",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.VatRateListResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Monite.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Monite.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Monite.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError("Timeout exceeded when calling GET /vat_rates.");
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
