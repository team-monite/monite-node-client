/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { MoniteClient } from "../../../src/Client";

describe("LedgerAccounts", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    currency: "AED",
                    current_balance: 1,
                    description: "description",
                    is_bank_account: true,
                    name: "Accounts Receivable",
                    nominal_code: "610",
                    status: "Active",
                    subtype: "Current",
                    type: "Asset",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        };
        server.mockEndpoint().get("/ledger_accounts").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.accounting.ledgerAccounts.get();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    currency: "AED",
                    current_balance: 1,
                    description: "description",
                    is_bank_account: true,
                    name: "Accounts Receivable",
                    nominal_code: "610",
                    status: "Active",
                    subtype: "Current",
                    type: "Asset",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            currency: "AED",
            current_balance: 1,
            description: "description",
            is_bank_account: true,
            name: "Accounts Receivable",
            nominal_code: "610",
            status: "Active",
            subtype: "Current",
            type: "Asset",
        };
        server
            .mockEndpoint()
            .get("/ledger_accounts/ledger_account_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounting.ledgerAccounts.getById("ledger_account_id");
        expect(response).toEqual({
            id: "id",
            currency: "AED",
            current_balance: 1,
            description: "description",
            is_bank_account: true,
            name: "Accounts Receivable",
            nominal_code: "610",
            status: "Active",
            subtype: "Current",
            type: "Asset",
        });
    });
});
