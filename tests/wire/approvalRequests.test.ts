/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { MoniteClient } from "../../src/Client";

describe("ApprovalRequests", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    approved_by: ["approved_by"],
                    created_by: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    object_id: "object_id",
                    object_type: "account",
                    rejected_by: "rejected_by",
                    required_approval_count: 1,
                    role_ids: ["role_ids"],
                    status: "waiting",
                    user_ids: ["user_ids"],
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        };
        server.mockEndpoint().get("/approval_requests").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.approvalRequests.get();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    approved_by: ["approved_by"],
                    created_by: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    object_id: "object_id",
                    object_type: "account",
                    rejected_by: "rejected_by",
                    required_approval_count: 1,
                    role_ids: ["role_ids"],
                    status: "waiting",
                    user_ids: ["user_ids"],
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {
            object_id: "object_id",
            object_type: "account",
            required_approval_count: 1,
            role_ids: ["role_ids"],
        };
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            approved_by: ["approved_by"],
            created_by: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
            object_id: "object_id",
            object_type: "account",
            rejected_by: "rejected_by",
            required_approval_count: 1,
            role_ids: ["role_ids"],
            status: "waiting",
            user_ids: ["user_ids"],
        };
        server
            .mockEndpoint()
            .post("/approval_requests")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.approvalRequests.create({
            object_id: "object_id",
            object_type: "account",
            required_approval_count: 1,
            role_ids: ["role_ids"],
        });
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            approved_by: ["approved_by"],
            created_by: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
            object_id: "object_id",
            object_type: "account",
            rejected_by: "rejected_by",
            required_approval_count: 1,
            role_ids: ["role_ids"],
            status: "waiting",
            user_ids: ["user_ids"],
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            approved_by: ["approved_by"],
            created_by: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
            object_id: "object_id",
            object_type: "account",
            rejected_by: "rejected_by",
            required_approval_count: 1,
            role_ids: ["role_ids"],
            status: "waiting",
            user_ids: ["user_ids"],
        };
        server
            .mockEndpoint()
            .get("/approval_requests/approval_request_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.approvalRequests.getById("approval_request_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            approved_by: ["approved_by"],
            created_by: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
            object_id: "object_id",
            object_type: "account",
            rejected_by: "rejected_by",
            required_approval_count: 1,
            role_ids: ["role_ids"],
            status: "waiting",
            user_ids: ["user_ids"],
        });
    });

    test("approve_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            approved_by: ["approved_by"],
            created_by: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
            object_id: "object_id",
            object_type: "account",
            rejected_by: "rejected_by",
            required_approval_count: 1,
            role_ids: ["role_ids"],
            status: "waiting",
            user_ids: ["user_ids"],
        };
        server
            .mockEndpoint()
            .post("/approval_requests/approval_request_id/approve")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.approvalRequests.approveById("approval_request_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            approved_by: ["approved_by"],
            created_by: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
            object_id: "object_id",
            object_type: "account",
            rejected_by: "rejected_by",
            required_approval_count: 1,
            role_ids: ["role_ids"],
            status: "waiting",
            user_ids: ["user_ids"],
        });
    });

    test("cancel_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            approved_by: ["approved_by"],
            created_by: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
            object_id: "object_id",
            object_type: "account",
            rejected_by: "rejected_by",
            required_approval_count: 1,
            role_ids: ["role_ids"],
            status: "waiting",
            user_ids: ["user_ids"],
        };
        server
            .mockEndpoint()
            .post("/approval_requests/approval_request_id/cancel")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.approvalRequests.cancelById("approval_request_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            approved_by: ["approved_by"],
            created_by: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
            object_id: "object_id",
            object_type: "account",
            rejected_by: "rejected_by",
            required_approval_count: 1,
            role_ids: ["role_ids"],
            status: "waiting",
            user_ids: ["user_ids"],
        });
    });

    test("reject_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            approved_by: ["approved_by"],
            created_by: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
            object_id: "object_id",
            object_type: "account",
            rejected_by: "rejected_by",
            required_approval_count: 1,
            role_ids: ["role_ids"],
            status: "waiting",
            user_ids: ["user_ids"],
        };
        server
            .mockEndpoint()
            .post("/approval_requests/approval_request_id/reject")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.approvalRequests.rejectById("approval_request_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            approved_by: ["approved_by"],
            created_by: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
            object_id: "object_id",
            object_type: "account",
            rejected_by: "rejected_by",
            required_approval_count: 1,
            role_ids: ["role_ids"],
            status: "waiting",
            user_ids: ["user_ids"],
        });
    });
});
