/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { MoniteClient } from "../../src/Client";

describe("PaymentTerms", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    description: "description",
                    name: "name",
                    term_1: { discount: 1, number_of_days: 1 },
                    term_2: { discount: 1, number_of_days: 1 },
                    term_final: { number_of_days: 1 },
                },
            ],
        };
        server.mockEndpoint().get("/payment_terms").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.paymentTerms.get();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    description: "description",
                    name: "name",
                    term_1: {
                        discount: 1,
                        number_of_days: 1,
                    },
                    term_2: {
                        discount: 1,
                        number_of_days: 1,
                    },
                    term_final: {
                        number_of_days: 1,
                    },
                },
            ],
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { name: "name", term_final: { number_of_days: 1 } };
        const rawResponseBody = {
            id: "id",
            description: "description",
            name: "name",
            term_1: { discount: 1, number_of_days: 1 },
            term_2: { discount: 1, number_of_days: 1 },
            term_final: { number_of_days: 1 },
        };
        server
            .mockEndpoint()
            .post("/payment_terms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paymentTerms.create({
            name: "name",
            term_final: {
                number_of_days: 1,
            },
        });
        expect(response).toEqual({
            id: "id",
            description: "description",
            name: "name",
            term_1: {
                discount: 1,
                number_of_days: 1,
            },
            term_2: {
                discount: 1,
                number_of_days: 1,
            },
            term_final: {
                number_of_days: 1,
            },
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            description: "description",
            name: "name",
            term_1: { discount: 1, number_of_days: 1 },
            term_2: { discount: 1, number_of_days: 1 },
            term_final: { number_of_days: 1 },
        };
        server
            .mockEndpoint()
            .get("/payment_terms/payment_terms_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paymentTerms.getById("payment_terms_id");
        expect(response).toEqual({
            id: "id",
            description: "description",
            name: "name",
            term_1: {
                discount: 1,
                number_of_days: 1,
            },
            term_2: {
                discount: 1,
                number_of_days: 1,
            },
            term_final: {
                number_of_days: 1,
            },
        });
    });

    test("delete_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        server.mockEndpoint().delete("/payment_terms/payment_terms_id").respondWith().statusCode(200).build();

        const response = await client.paymentTerms.deleteById("payment_terms_id");
        expect(response).toEqual(undefined);
    });

    test("update_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            description: "description",
            name: "name",
            term_1: { discount: 1, number_of_days: 1 },
            term_2: { discount: 1, number_of_days: 1 },
            term_final: { number_of_days: 1 },
        };
        server
            .mockEndpoint()
            .patch("/payment_terms/payment_terms_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.paymentTerms.updateById("payment_terms_id");
        expect(response).toEqual({
            id: "id",
            description: "description",
            name: "name",
            term_1: {
                discount: 1,
                number_of_days: 1,
            },
            term_2: {
                discount: 1,
                number_of_days: 1,
            },
            term_final: {
                number_of_days: 1,
            },
        });
    });
});
