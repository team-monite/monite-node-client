/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { MoniteClient } from "../../../src/Client";

describe("BankAccounts", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    account_holder_name: "Bob Jones",
                    account_number: "12345678",
                    bic: "DEUTDEFFXXX",
                    counterpart_id: "counterpart_id",
                    country: "AF",
                    currency: "AED",
                    iban: "DE74500700100100000900",
                    is_default_for_currency: true,
                    name: "name",
                    partner_metadata: { key: "value" },
                    routing_number: "routing_number",
                    sort_code: "123456",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/counterparts/counterpart_id/bank_accounts")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.counterparts.bankAccounts.get("counterpart_id");
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    account_holder_name: "Bob Jones",
                    account_number: "12345678",
                    bic: "DEUTDEFFXXX",
                    counterpart_id: "counterpart_id",
                    country: "AF",
                    currency: "AED",
                    iban: "DE74500700100100000900",
                    is_default_for_currency: true,
                    name: "name",
                    partner_metadata: {
                        key: "value",
                    },
                    routing_number: "routing_number",
                    sort_code: "123456",
                },
            ],
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { country: "AF", currency: "AED" };
        const rawResponseBody = {
            id: "id",
            account_holder_name: "Bob Jones",
            account_number: "12345678",
            bic: "DEUTDEFFXXX",
            counterpart_id: "counterpart_id",
            country: "AF",
            currency: "AED",
            iban: "DE74500700100100000900",
            is_default_for_currency: true,
            name: "name",
            partner_metadata: { key: "value" },
            routing_number: "routing_number",
            sort_code: "123456",
        };
        server
            .mockEndpoint()
            .post("/counterparts/counterpart_id/bank_accounts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.counterparts.bankAccounts.create("counterpart_id", {
            country: "AF",
            currency: "AED",
        });
        expect(response).toEqual({
            id: "id",
            account_holder_name: "Bob Jones",
            account_number: "12345678",
            bic: "DEUTDEFFXXX",
            counterpart_id: "counterpart_id",
            country: "AF",
            currency: "AED",
            iban: "DE74500700100100000900",
            is_default_for_currency: true,
            name: "name",
            partner_metadata: {
                key: "value",
            },
            routing_number: "routing_number",
            sort_code: "123456",
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            account_holder_name: "Bob Jones",
            account_number: "12345678",
            bic: "DEUTDEFFXXX",
            counterpart_id: "counterpart_id",
            country: "AF",
            currency: "AED",
            iban: "DE74500700100100000900",
            is_default_for_currency: true,
            name: "name",
            partner_metadata: { key: "value" },
            routing_number: "routing_number",
            sort_code: "123456",
        };
        server
            .mockEndpoint()
            .get("/counterparts/counterpart_id/bank_accounts/bank_account_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.counterparts.bankAccounts.getById("bank_account_id", "counterpart_id");
        expect(response).toEqual({
            id: "id",
            account_holder_name: "Bob Jones",
            account_number: "12345678",
            bic: "DEUTDEFFXXX",
            counterpart_id: "counterpart_id",
            country: "AF",
            currency: "AED",
            iban: "DE74500700100100000900",
            is_default_for_currency: true,
            name: "name",
            partner_metadata: {
                key: "value",
            },
            routing_number: "routing_number",
            sort_code: "123456",
        });
    });

    test("delete_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        server
            .mockEndpoint()
            .delete("/counterparts/counterpart_id/bank_accounts/bank_account_id")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.counterparts.bankAccounts.deleteById("bank_account_id", "counterpart_id");
        expect(response).toEqual(undefined);
    });

    test("update_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            account_holder_name: "Bob Jones",
            account_number: "12345678",
            bic: "DEUTDEFFXXX",
            counterpart_id: "counterpart_id",
            country: "AF",
            currency: "AED",
            iban: "DE74500700100100000900",
            is_default_for_currency: true,
            name: "name",
            partner_metadata: { key: "value" },
            routing_number: "routing_number",
            sort_code: "123456",
        };
        server
            .mockEndpoint()
            .patch("/counterparts/counterpart_id/bank_accounts/bank_account_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.counterparts.bankAccounts.updateById("bank_account_id", "counterpart_id");
        expect(response).toEqual({
            id: "id",
            account_holder_name: "Bob Jones",
            account_number: "12345678",
            bic: "DEUTDEFFXXX",
            counterpart_id: "counterpart_id",
            country: "AF",
            currency: "AED",
            iban: "DE74500700100100000900",
            is_default_for_currency: true,
            name: "name",
            partner_metadata: {
                key: "value",
            },
            routing_number: "routing_number",
            sort_code: "123456",
        });
    });

    test("make_default_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/counterparts/counterpart_id/bank_accounts/bank_account_id/make_default")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.counterparts.bankAccounts.makeDefaultById("bank_account_id", "counterpart_id");
        expect(response).toEqual({
            key: "value",
        });
    });
});
