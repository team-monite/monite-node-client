/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { MoniteClient } from "../../src/Client";
import * as Monite from "../../src/api/index";

describe("CreditNotes", () => {
    test("get_payable_credit_notes", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "123e4567-e89b-12d3-a456-426614174000",
                    created_at: "2024-01-15T14:30:00Z",
                    updated_at: "2024-01-15T14:30:00Z",
                    based_on: "123e4567-e89b-12d3-a456-426614174000",
                    based_on_document_id: "INV-2287",
                    counterpart: {
                        email: "acme@example.com",
                        name: "Acme Inc.",
                        phone: "5551231234",
                        tax_id: "DE12345678",
                    },
                    counterpart_address_id: "123e4567-e89b-12d3-a456-426614174000",
                    counterpart_bank_account_id: "123e4567-e89b-12d3-a456-426614174000",
                    counterpart_id: "123e4567-e89b-12d3-a456-426614174000",
                    counterpart_raw: {
                        email: "acme@example.com",
                        name: "Acme Inc.",
                        phone: "5551231234",
                        tax_id: "DE12345678",
                    },
                    counterpart_vat_id_id: "123e4567-e89b-12d3-a456-426614174000",
                    created_by_external_user_id: "ext_user_123",
                    created_by_external_user_name: "John Doe",
                    created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
                    currency: "EUR",
                    currency_exchange: { default_currency_code: "default_currency_code", rate: 1.1, total: 1.1 },
                    description: "Credit note for returned items from invoice INV-2287",
                    document_id: "CN-2287",
                    entity_id: "123e4567-e89b-12d3-a456-426614174000",
                    file_id: "123e4567-e89b-12d3-a456-426614174000",
                    file_url: "file_url",
                    issued_at: "2024-01-15",
                    ocr_request_id: "123e4567-e89b-12d3-a456-426614174000",
                    ocr_status: "completed",
                    origin: "SAP",
                    project_id: "123e4567-e89b-12d3-a456-426614174000",
                    sender: "supplier@example.com",
                    source_of_data: "user_specified",
                    status: "submitted_for_approval",
                    subtotal: 1000,
                    tags: [
                        {
                            id: "123e4567-e89b-12d3-a456-426614174000",
                            created_at: "2022-09-07T16:35:18Z",
                            updated_at: "2022-09-07T16:35:18Z",
                            category: "department",
                            created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                            description: "Tag for the Marketing Department",
                            name: "Department A",
                        },
                    ],
                    tax: 20,
                    tax_amount: 200,
                    total_amount: 1200,
                },
            ],
            next_pagination_token: "eyJwYWdlIjoyfQ==",
            prev_pagination_token: "eyJwYWdlIjoxfQ==",
        };
        server
            .mockEndpoint()
            .get("/payable_credit_notes")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.creditNotes.getPayableCreditNotes();
        expect(response).toEqual({
            data: [
                {
                    id: "123e4567-e89b-12d3-a456-426614174000",
                    created_at: "2024-01-15T14:30:00Z",
                    updated_at: "2024-01-15T14:30:00Z",
                    based_on: "123e4567-e89b-12d3-a456-426614174000",
                    based_on_document_id: "INV-2287",
                    counterpart: {
                        email: "acme@example.com",
                        name: "Acme Inc.",
                        phone: "5551231234",
                        tax_id: "DE12345678",
                    },
                    counterpart_address_id: "123e4567-e89b-12d3-a456-426614174000",
                    counterpart_bank_account_id: "123e4567-e89b-12d3-a456-426614174000",
                    counterpart_id: "123e4567-e89b-12d3-a456-426614174000",
                    counterpart_raw: {
                        email: "acme@example.com",
                        name: "Acme Inc.",
                        phone: "5551231234",
                        tax_id: "DE12345678",
                    },
                    counterpart_vat_id_id: "123e4567-e89b-12d3-a456-426614174000",
                    created_by_external_user_id: "ext_user_123",
                    created_by_external_user_name: "John Doe",
                    created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
                    currency: "EUR",
                    currency_exchange: {
                        default_currency_code: "default_currency_code",
                        rate: 1.1,
                        total: 1.1,
                    },
                    description: "Credit note for returned items from invoice INV-2287",
                    document_id: "CN-2287",
                    entity_id: "123e4567-e89b-12d3-a456-426614174000",
                    file_id: "123e4567-e89b-12d3-a456-426614174000",
                    file_url: "file_url",
                    issued_at: "2024-01-15",
                    ocr_request_id: "123e4567-e89b-12d3-a456-426614174000",
                    ocr_status: "completed",
                    origin: "SAP",
                    project_id: "123e4567-e89b-12d3-a456-426614174000",
                    sender: "supplier@example.com",
                    source_of_data: "user_specified",
                    status: "submitted_for_approval",
                    subtotal: 1000,
                    tags: [
                        {
                            id: "123e4567-e89b-12d3-a456-426614174000",
                            created_at: "2022-09-07T16:35:18Z",
                            updated_at: "2022-09-07T16:35:18Z",
                            category: "department",
                            created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                            description: "Tag for the Marketing Department",
                            name: "Department A",
                        },
                    ],
                    tax: 20,
                    tax_amount: 200,
                    total_amount: 1200,
                },
            ],
            next_pagination_token: "eyJwYWdlIjoyfQ==",
            prev_pagination_token: "eyJwYWdlIjoxfQ==",
        });
    });

    test("post_payable_credit_notes", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { document_id: "CN-2287", issued_at: "2024-01-15" };
        const rawResponseBody = {
            id: "123e4567-e89b-12d3-a456-426614174000",
            created_at: "2024-01-15T14:30:00Z",
            updated_at: "2024-01-15T14:30:00Z",
            based_on: "123e4567-e89b-12d3-a456-426614174000",
            based_on_document_id: "INV-2287",
            counterpart: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: { country: "AF", type: "type", value: "value" },
            },
            counterpart_address_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_bank_account_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_raw: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: { country: "AF", type: "type", value: "value" },
            },
            counterpart_vat_id_id: "123e4567-e89b-12d3-a456-426614174000",
            created_by_external_user_id: "ext_user_123",
            created_by_external_user_name: "John Doe",
            created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
            currency: "EUR",
            currency_exchange: { default_currency_code: "default_currency_code", rate: 1.1, total: 1.1 },
            description: "Credit note for returned items from invoice INV-2287",
            document_id: "CN-2287",
            entity_id: "123e4567-e89b-12d3-a456-426614174000",
            file_id: "123e4567-e89b-12d3-a456-426614174000",
            file_url: "file_url",
            issued_at: "2024-01-15",
            ocr_request_id: "123e4567-e89b-12d3-a456-426614174000",
            ocr_status: "completed",
            origin: "SAP",
            project_id: "123e4567-e89b-12d3-a456-426614174000",
            sender: "supplier@example.com",
            source_of_data: "user_specified",
            status: "submitted_for_approval",
            subtotal: 1000,
            tags: [
                {
                    id: "123e4567-e89b-12d3-a456-426614174000",
                    created_at: "2022-09-07T16:35:18Z",
                    updated_at: "2022-09-07T16:35:18Z",
                    category: "department",
                    created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    description: "Tag for the Marketing Department",
                    name: "Department A",
                },
            ],
            tax: 20,
            tax_amount: 200,
            total_amount: 1200,
        };
        server
            .mockEndpoint()
            .post("/payable_credit_notes")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.creditNotes.postPayableCreditNotes({
            document_id: "CN-2287",
            issued_at: "2024-01-15",
        });
        expect(response).toEqual({
            id: "123e4567-e89b-12d3-a456-426614174000",
            created_at: "2024-01-15T14:30:00Z",
            updated_at: "2024-01-15T14:30:00Z",
            based_on: "123e4567-e89b-12d3-a456-426614174000",
            based_on_document_id: "INV-2287",
            counterpart: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: {
                    country: "AF",
                    type: "type",
                    value: "value",
                },
            },
            counterpart_address_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_bank_account_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_raw: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: {
                    country: "AF",
                    type: "type",
                    value: "value",
                },
            },
            counterpart_vat_id_id: "123e4567-e89b-12d3-a456-426614174000",
            created_by_external_user_id: "ext_user_123",
            created_by_external_user_name: "John Doe",
            created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
            currency: "EUR",
            currency_exchange: {
                default_currency_code: "default_currency_code",
                rate: 1.1,
                total: 1.1,
            },
            description: "Credit note for returned items from invoice INV-2287",
            document_id: "CN-2287",
            entity_id: "123e4567-e89b-12d3-a456-426614174000",
            file_id: "123e4567-e89b-12d3-a456-426614174000",
            file_url: "file_url",
            issued_at: "2024-01-15",
            ocr_request_id: "123e4567-e89b-12d3-a456-426614174000",
            ocr_status: "completed",
            origin: "SAP",
            project_id: "123e4567-e89b-12d3-a456-426614174000",
            sender: "supplier@example.com",
            source_of_data: "user_specified",
            status: "submitted_for_approval",
            subtotal: 1000,
            tags: [
                {
                    id: "123e4567-e89b-12d3-a456-426614174000",
                    created_at: "2022-09-07T16:35:18Z",
                    updated_at: "2022-09-07T16:35:18Z",
                    category: "department",
                    created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    description: "Tag for the Marketing Department",
                    name: "Department A",
                },
            ],
            tax: 20,
            tax_amount: 200,
            total_amount: 1200,
        });
    });

    test("get_payable_credit_notes_validations", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = { required_fields: ["currency"] };
        server
            .mockEndpoint()
            .get("/payable_credit_notes/validations")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.creditNotes.getPayableCreditNotesValidations();
        expect(response).toEqual({
            required_fields: ["currency"],
        });
    });

    test("put_payable_credit_notes_validations", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { required_fields: ["currency"] };
        const rawResponseBody = { required_fields: ["currency"] };
        server
            .mockEndpoint()
            .put("/payable_credit_notes/validations")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.creditNotes.putPayableCreditNotesValidations({
            required_fields: ["currency"],
        });
        expect(response).toEqual({
            required_fields: ["currency"],
        });
    });

    test("post_payable_credit_notes_validations_reset", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = { required_fields: ["currency"] };
        server
            .mockEndpoint()
            .post("/payable_credit_notes/validations/reset")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.creditNotes.postPayableCreditNotesValidationsReset();
        expect(response).toEqual({
            required_fields: ["currency"],
        });
    });

    test("get_payable_credit_notes_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "123e4567-e89b-12d3-a456-426614174000",
            created_at: "2024-01-15T14:30:00Z",
            updated_at: "2024-01-15T14:30:00Z",
            based_on: "123e4567-e89b-12d3-a456-426614174000",
            based_on_document_id: "INV-2287",
            counterpart: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: { country: "AF", type: "type", value: "value" },
            },
            counterpart_address_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_bank_account_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_raw: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: { country: "AF", type: "type", value: "value" },
            },
            counterpart_vat_id_id: "123e4567-e89b-12d3-a456-426614174000",
            created_by_external_user_id: "ext_user_123",
            created_by_external_user_name: "John Doe",
            created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
            currency: "EUR",
            currency_exchange: { default_currency_code: "default_currency_code", rate: 1.1, total: 1.1 },
            description: "Credit note for returned items from invoice INV-2287",
            document_id: "CN-2287",
            entity_id: "123e4567-e89b-12d3-a456-426614174000",
            file_id: "123e4567-e89b-12d3-a456-426614174000",
            file_url: "file_url",
            issued_at: "2024-01-15",
            ocr_request_id: "123e4567-e89b-12d3-a456-426614174000",
            ocr_status: "completed",
            origin: "SAP",
            project_id: "123e4567-e89b-12d3-a456-426614174000",
            sender: "supplier@example.com",
            source_of_data: "user_specified",
            status: "submitted_for_approval",
            subtotal: 1000,
            tags: [
                {
                    id: "123e4567-e89b-12d3-a456-426614174000",
                    created_at: "2022-09-07T16:35:18Z",
                    updated_at: "2022-09-07T16:35:18Z",
                    category: "department",
                    created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    description: "Tag for the Marketing Department",
                    name: "Department A",
                },
            ],
            tax: 20,
            tax_amount: 200,
            total_amount: 1200,
        };
        server
            .mockEndpoint()
            .get("/payable_credit_notes/credit_note_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.creditNotes.getPayableCreditNotesId("credit_note_id");
        expect(response).toEqual({
            id: "123e4567-e89b-12d3-a456-426614174000",
            created_at: "2024-01-15T14:30:00Z",
            updated_at: "2024-01-15T14:30:00Z",
            based_on: "123e4567-e89b-12d3-a456-426614174000",
            based_on_document_id: "INV-2287",
            counterpart: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: {
                    country: "AF",
                    type: "type",
                    value: "value",
                },
            },
            counterpart_address_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_bank_account_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_raw: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: {
                    country: "AF",
                    type: "type",
                    value: "value",
                },
            },
            counterpart_vat_id_id: "123e4567-e89b-12d3-a456-426614174000",
            created_by_external_user_id: "ext_user_123",
            created_by_external_user_name: "John Doe",
            created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
            currency: "EUR",
            currency_exchange: {
                default_currency_code: "default_currency_code",
                rate: 1.1,
                total: 1.1,
            },
            description: "Credit note for returned items from invoice INV-2287",
            document_id: "CN-2287",
            entity_id: "123e4567-e89b-12d3-a456-426614174000",
            file_id: "123e4567-e89b-12d3-a456-426614174000",
            file_url: "file_url",
            issued_at: "2024-01-15",
            ocr_request_id: "123e4567-e89b-12d3-a456-426614174000",
            ocr_status: "completed",
            origin: "SAP",
            project_id: "123e4567-e89b-12d3-a456-426614174000",
            sender: "supplier@example.com",
            source_of_data: "user_specified",
            status: "submitted_for_approval",
            subtotal: 1000,
            tags: [
                {
                    id: "123e4567-e89b-12d3-a456-426614174000",
                    created_at: "2022-09-07T16:35:18Z",
                    updated_at: "2022-09-07T16:35:18Z",
                    category: "department",
                    created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    description: "Tag for the Marketing Department",
                    name: "Department A",
                },
            ],
            tax: 20,
            tax_amount: 200,
            total_amount: 1200,
        });
    });

    test("delete_payable_credit_notes_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        server.mockEndpoint().delete("/payable_credit_notes/credit_note_id").respondWith().statusCode(200).build();

        const response = await client.creditNotes.deletePayableCreditNotesId("credit_note_id");
        expect(response).toEqual(undefined);
    });

    test("patch_payable_credit_notes_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "123e4567-e89b-12d3-a456-426614174000",
            created_at: "2024-01-15T14:30:00Z",
            updated_at: "2024-01-15T14:30:00Z",
            based_on: "123e4567-e89b-12d3-a456-426614174000",
            based_on_document_id: "INV-2287",
            counterpart: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: { country: "AF", type: "type", value: "value" },
            },
            counterpart_address_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_bank_account_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_raw: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: { country: "AF", type: "type", value: "value" },
            },
            counterpart_vat_id_id: "123e4567-e89b-12d3-a456-426614174000",
            created_by_external_user_id: "ext_user_123",
            created_by_external_user_name: "John Doe",
            created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
            currency: "EUR",
            currency_exchange: { default_currency_code: "default_currency_code", rate: 1.1, total: 1.1 },
            description: "Credit note for returned items from invoice INV-2287",
            document_id: "CN-2287",
            entity_id: "123e4567-e89b-12d3-a456-426614174000",
            file_id: "123e4567-e89b-12d3-a456-426614174000",
            file_url: "file_url",
            issued_at: "2024-01-15",
            ocr_request_id: "123e4567-e89b-12d3-a456-426614174000",
            ocr_status: "completed",
            origin: "SAP",
            project_id: "123e4567-e89b-12d3-a456-426614174000",
            sender: "supplier@example.com",
            source_of_data: "user_specified",
            status: "submitted_for_approval",
            subtotal: 1000,
            tags: [
                {
                    id: "123e4567-e89b-12d3-a456-426614174000",
                    created_at: "2022-09-07T16:35:18Z",
                    updated_at: "2022-09-07T16:35:18Z",
                    category: "department",
                    created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    description: "Tag for the Marketing Department",
                    name: "Department A",
                },
            ],
            tax: 20,
            tax_amount: 200,
            total_amount: 1200,
        };
        server
            .mockEndpoint()
            .patch("/payable_credit_notes/credit_note_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.creditNotes.patchPayableCreditNotesId("credit_note_id");
        expect(response).toEqual({
            id: "123e4567-e89b-12d3-a456-426614174000",
            created_at: "2024-01-15T14:30:00Z",
            updated_at: "2024-01-15T14:30:00Z",
            based_on: "123e4567-e89b-12d3-a456-426614174000",
            based_on_document_id: "INV-2287",
            counterpart: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: {
                    country: "AF",
                    type: "type",
                    value: "value",
                },
            },
            counterpart_address_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_bank_account_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_raw: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: {
                    country: "AF",
                    type: "type",
                    value: "value",
                },
            },
            counterpart_vat_id_id: "123e4567-e89b-12d3-a456-426614174000",
            created_by_external_user_id: "ext_user_123",
            created_by_external_user_name: "John Doe",
            created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
            currency: "EUR",
            currency_exchange: {
                default_currency_code: "default_currency_code",
                rate: 1.1,
                total: 1.1,
            },
            description: "Credit note for returned items from invoice INV-2287",
            document_id: "CN-2287",
            entity_id: "123e4567-e89b-12d3-a456-426614174000",
            file_id: "123e4567-e89b-12d3-a456-426614174000",
            file_url: "file_url",
            issued_at: "2024-01-15",
            ocr_request_id: "123e4567-e89b-12d3-a456-426614174000",
            ocr_status: "completed",
            origin: "SAP",
            project_id: "123e4567-e89b-12d3-a456-426614174000",
            sender: "supplier@example.com",
            source_of_data: "user_specified",
            status: "submitted_for_approval",
            subtotal: 1000,
            tags: [
                {
                    id: "123e4567-e89b-12d3-a456-426614174000",
                    created_at: "2022-09-07T16:35:18Z",
                    updated_at: "2022-09-07T16:35:18Z",
                    category: "department",
                    created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    description: "Tag for the Marketing Department",
                    name: "Department A",
                },
            ],
            tax: 20,
            tax_amount: 200,
            total_amount: 1200,
        });
    });

    test("post_payable_credit_notes_id_approve", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "123e4567-e89b-12d3-a456-426614174000",
            created_at: "2024-01-15T14:30:00Z",
            updated_at: "2024-01-15T14:30:00Z",
            based_on: "123e4567-e89b-12d3-a456-426614174000",
            based_on_document_id: "INV-2287",
            counterpart: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: { country: "AF", type: "type", value: "value" },
            },
            counterpart_address_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_bank_account_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_raw: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: { country: "AF", type: "type", value: "value" },
            },
            counterpart_vat_id_id: "123e4567-e89b-12d3-a456-426614174000",
            created_by_external_user_id: "ext_user_123",
            created_by_external_user_name: "John Doe",
            created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
            currency: "EUR",
            currency_exchange: { default_currency_code: "default_currency_code", rate: 1.1, total: 1.1 },
            description: "Credit note for returned items from invoice INV-2287",
            document_id: "CN-2287",
            entity_id: "123e4567-e89b-12d3-a456-426614174000",
            file_id: "123e4567-e89b-12d3-a456-426614174000",
            file_url: "file_url",
            issued_at: "2024-01-15",
            ocr_request_id: "123e4567-e89b-12d3-a456-426614174000",
            ocr_status: "completed",
            origin: "SAP",
            project_id: "123e4567-e89b-12d3-a456-426614174000",
            sender: "supplier@example.com",
            source_of_data: "user_specified",
            status: "submitted_for_approval",
            subtotal: 1000,
            tags: [
                {
                    id: "123e4567-e89b-12d3-a456-426614174000",
                    created_at: "2022-09-07T16:35:18Z",
                    updated_at: "2022-09-07T16:35:18Z",
                    category: "department",
                    created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    description: "Tag for the Marketing Department",
                    name: "Department A",
                },
            ],
            tax: 20,
            tax_amount: 200,
            total_amount: 1200,
        };
        server
            .mockEndpoint()
            .post("/payable_credit_notes/credit_note_id/approve")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.creditNotes.postPayableCreditNotesIdApprove("credit_note_id");
        expect(response).toEqual({
            id: "123e4567-e89b-12d3-a456-426614174000",
            created_at: "2024-01-15T14:30:00Z",
            updated_at: "2024-01-15T14:30:00Z",
            based_on: "123e4567-e89b-12d3-a456-426614174000",
            based_on_document_id: "INV-2287",
            counterpart: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: {
                    country: "AF",
                    type: "type",
                    value: "value",
                },
            },
            counterpart_address_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_bank_account_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_raw: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: {
                    country: "AF",
                    type: "type",
                    value: "value",
                },
            },
            counterpart_vat_id_id: "123e4567-e89b-12d3-a456-426614174000",
            created_by_external_user_id: "ext_user_123",
            created_by_external_user_name: "John Doe",
            created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
            currency: "EUR",
            currency_exchange: {
                default_currency_code: "default_currency_code",
                rate: 1.1,
                total: 1.1,
            },
            description: "Credit note for returned items from invoice INV-2287",
            document_id: "CN-2287",
            entity_id: "123e4567-e89b-12d3-a456-426614174000",
            file_id: "123e4567-e89b-12d3-a456-426614174000",
            file_url: "file_url",
            issued_at: "2024-01-15",
            ocr_request_id: "123e4567-e89b-12d3-a456-426614174000",
            ocr_status: "completed",
            origin: "SAP",
            project_id: "123e4567-e89b-12d3-a456-426614174000",
            sender: "supplier@example.com",
            source_of_data: "user_specified",
            status: "submitted_for_approval",
            subtotal: 1000,
            tags: [
                {
                    id: "123e4567-e89b-12d3-a456-426614174000",
                    created_at: "2022-09-07T16:35:18Z",
                    updated_at: "2022-09-07T16:35:18Z",
                    category: "department",
                    created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    description: "Tag for the Marketing Department",
                    name: "Department A",
                },
            ],
            tax: 20,
            tax_amount: 200,
            total_amount: 1200,
        });
    });

    test("post_payable_credit_notes_id_cancel", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "123e4567-e89b-12d3-a456-426614174000",
            created_at: "2024-01-15T14:30:00Z",
            updated_at: "2024-01-15T14:30:00Z",
            based_on: "123e4567-e89b-12d3-a456-426614174000",
            based_on_document_id: "INV-2287",
            counterpart: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: { country: "AF", type: "type", value: "value" },
            },
            counterpart_address_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_bank_account_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_raw: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: { country: "AF", type: "type", value: "value" },
            },
            counterpart_vat_id_id: "123e4567-e89b-12d3-a456-426614174000",
            created_by_external_user_id: "ext_user_123",
            created_by_external_user_name: "John Doe",
            created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
            currency: "EUR",
            currency_exchange: { default_currency_code: "default_currency_code", rate: 1.1, total: 1.1 },
            description: "Credit note for returned items from invoice INV-2287",
            document_id: "CN-2287",
            entity_id: "123e4567-e89b-12d3-a456-426614174000",
            file_id: "123e4567-e89b-12d3-a456-426614174000",
            file_url: "file_url",
            issued_at: "2024-01-15",
            ocr_request_id: "123e4567-e89b-12d3-a456-426614174000",
            ocr_status: "completed",
            origin: "SAP",
            project_id: "123e4567-e89b-12d3-a456-426614174000",
            sender: "supplier@example.com",
            source_of_data: "user_specified",
            status: "submitted_for_approval",
            subtotal: 1000,
            tags: [
                {
                    id: "123e4567-e89b-12d3-a456-426614174000",
                    created_at: "2022-09-07T16:35:18Z",
                    updated_at: "2022-09-07T16:35:18Z",
                    category: "department",
                    created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    description: "Tag for the Marketing Department",
                    name: "Department A",
                },
            ],
            tax: 20,
            tax_amount: 200,
            total_amount: 1200,
        };
        server
            .mockEndpoint()
            .post("/payable_credit_notes/credit_note_id/cancel")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.creditNotes.postPayableCreditNotesIdCancel("credit_note_id");
        expect(response).toEqual({
            id: "123e4567-e89b-12d3-a456-426614174000",
            created_at: "2024-01-15T14:30:00Z",
            updated_at: "2024-01-15T14:30:00Z",
            based_on: "123e4567-e89b-12d3-a456-426614174000",
            based_on_document_id: "INV-2287",
            counterpart: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: {
                    country: "AF",
                    type: "type",
                    value: "value",
                },
            },
            counterpart_address_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_bank_account_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_raw: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: {
                    country: "AF",
                    type: "type",
                    value: "value",
                },
            },
            counterpart_vat_id_id: "123e4567-e89b-12d3-a456-426614174000",
            created_by_external_user_id: "ext_user_123",
            created_by_external_user_name: "John Doe",
            created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
            currency: "EUR",
            currency_exchange: {
                default_currency_code: "default_currency_code",
                rate: 1.1,
                total: 1.1,
            },
            description: "Credit note for returned items from invoice INV-2287",
            document_id: "CN-2287",
            entity_id: "123e4567-e89b-12d3-a456-426614174000",
            file_id: "123e4567-e89b-12d3-a456-426614174000",
            file_url: "file_url",
            issued_at: "2024-01-15",
            ocr_request_id: "123e4567-e89b-12d3-a456-426614174000",
            ocr_status: "completed",
            origin: "SAP",
            project_id: "123e4567-e89b-12d3-a456-426614174000",
            sender: "supplier@example.com",
            source_of_data: "user_specified",
            status: "submitted_for_approval",
            subtotal: 1000,
            tags: [
                {
                    id: "123e4567-e89b-12d3-a456-426614174000",
                    created_at: "2022-09-07T16:35:18Z",
                    updated_at: "2022-09-07T16:35:18Z",
                    category: "department",
                    created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    description: "Tag for the Marketing Department",
                    name: "Department A",
                },
            ],
            tax: 20,
            tax_amount: 200,
            total_amount: 1200,
        });
    });

    test("post_payable_credit_notes_id_cancel_ocr", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "123e4567-e89b-12d3-a456-426614174000",
            created_at: "2024-01-15T14:30:00Z",
            updated_at: "2024-01-15T14:30:00Z",
            based_on: "123e4567-e89b-12d3-a456-426614174000",
            based_on_document_id: "INV-2287",
            counterpart: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: { country: "AF", type: "type", value: "value" },
            },
            counterpart_address_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_bank_account_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_raw: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: { country: "AF", type: "type", value: "value" },
            },
            counterpart_vat_id_id: "123e4567-e89b-12d3-a456-426614174000",
            created_by_external_user_id: "ext_user_123",
            created_by_external_user_name: "John Doe",
            created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
            currency: "EUR",
            currency_exchange: { default_currency_code: "default_currency_code", rate: 1.1, total: 1.1 },
            description: "Credit note for returned items from invoice INV-2287",
            document_id: "CN-2287",
            entity_id: "123e4567-e89b-12d3-a456-426614174000",
            file_id: "123e4567-e89b-12d3-a456-426614174000",
            file_url: "file_url",
            issued_at: "2024-01-15",
            ocr_request_id: "123e4567-e89b-12d3-a456-426614174000",
            ocr_status: "completed",
            origin: "SAP",
            project_id: "123e4567-e89b-12d3-a456-426614174000",
            sender: "supplier@example.com",
            source_of_data: "user_specified",
            status: "submitted_for_approval",
            subtotal: 1000,
            tags: [
                {
                    id: "123e4567-e89b-12d3-a456-426614174000",
                    created_at: "2022-09-07T16:35:18Z",
                    updated_at: "2022-09-07T16:35:18Z",
                    category: "department",
                    created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    description: "Tag for the Marketing Department",
                    name: "Department A",
                },
            ],
            tax: 20,
            tax_amount: 200,
            total_amount: 1200,
        };
        server
            .mockEndpoint()
            .post("/payable_credit_notes/credit_note_id/cancel_ocr")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.creditNotes.postPayableCreditNotesIdCancelOcr("credit_note_id");
        expect(response).toEqual({
            id: "123e4567-e89b-12d3-a456-426614174000",
            created_at: "2024-01-15T14:30:00Z",
            updated_at: "2024-01-15T14:30:00Z",
            based_on: "123e4567-e89b-12d3-a456-426614174000",
            based_on_document_id: "INV-2287",
            counterpart: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: {
                    country: "AF",
                    type: "type",
                    value: "value",
                },
            },
            counterpart_address_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_bank_account_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_raw: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: {
                    country: "AF",
                    type: "type",
                    value: "value",
                },
            },
            counterpart_vat_id_id: "123e4567-e89b-12d3-a456-426614174000",
            created_by_external_user_id: "ext_user_123",
            created_by_external_user_name: "John Doe",
            created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
            currency: "EUR",
            currency_exchange: {
                default_currency_code: "default_currency_code",
                rate: 1.1,
                total: 1.1,
            },
            description: "Credit note for returned items from invoice INV-2287",
            document_id: "CN-2287",
            entity_id: "123e4567-e89b-12d3-a456-426614174000",
            file_id: "123e4567-e89b-12d3-a456-426614174000",
            file_url: "file_url",
            issued_at: "2024-01-15",
            ocr_request_id: "123e4567-e89b-12d3-a456-426614174000",
            ocr_status: "completed",
            origin: "SAP",
            project_id: "123e4567-e89b-12d3-a456-426614174000",
            sender: "supplier@example.com",
            source_of_data: "user_specified",
            status: "submitted_for_approval",
            subtotal: 1000,
            tags: [
                {
                    id: "123e4567-e89b-12d3-a456-426614174000",
                    created_at: "2022-09-07T16:35:18Z",
                    updated_at: "2022-09-07T16:35:18Z",
                    category: "department",
                    created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    description: "Tag for the Marketing Department",
                    name: "Department A",
                },
            ],
            tax: 20,
            tax_amount: 200,
            total_amount: 1200,
        });
    });

    test("get_payable_credit_notes_id_line_items", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "123e4567-e89b-12d3-a456-426614174000",
                    created_at: "2024-01-15T14:30:00Z",
                    updated_at: "2024-01-15T14:30:00Z",
                    created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
                    credit_note_id: "123e4567-e89b-12d3-a456-426614174000",
                    description: "Premium version of Product XYZ with extended warranty",
                    name: "Product XYZ",
                    quantity: 2,
                    subtotal: 10000,
                    tax: 20,
                    tax_amount: 2000,
                    total: 12000,
                    unit: "pieces",
                    unit_price: 5000,
                },
            ],
            next_pagination_token: "eyJwYWdlIjoyfQ==",
            prev_pagination_token: "eyJwYWdlIjoxfQ==",
        };
        server
            .mockEndpoint()
            .get("/payable_credit_notes/credit_note_id/line_items")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.creditNotes.getPayableCreditNotesIdLineItems("credit_note_id");
        expect(response).toEqual({
            data: [
                {
                    id: "123e4567-e89b-12d3-a456-426614174000",
                    created_at: "2024-01-15T14:30:00Z",
                    updated_at: "2024-01-15T14:30:00Z",
                    created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
                    credit_note_id: "123e4567-e89b-12d3-a456-426614174000",
                    description: "Premium version of Product XYZ with extended warranty",
                    name: "Product XYZ",
                    quantity: 2,
                    subtotal: 10000,
                    tax: 20,
                    tax_amount: 2000,
                    total: 12000,
                    unit: "pieces",
                    unit_price: 5000,
                },
            ],
            next_pagination_token: "eyJwYWdlIjoyfQ==",
            prev_pagination_token: "eyJwYWdlIjoxfQ==",
        });
    });

    test("post_payable_credit_notes_id_line_items", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "123e4567-e89b-12d3-a456-426614174000",
            created_at: "2024-01-15T14:30:00Z",
            updated_at: "2024-01-15T14:30:00Z",
            created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
            credit_note_id: "123e4567-e89b-12d3-a456-426614174000",
            description: "Premium version of Product XYZ with extended warranty",
            name: "Product XYZ",
            quantity: 2,
            subtotal: 10000,
            tax: 20,
            tax_amount: 2000,
            total: 12000,
            unit: "pieces",
            unit_price: 5000,
        };
        server
            .mockEndpoint()
            .post("/payable_credit_notes/credit_note_id/line_items")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.creditNotes.postPayableCreditNotesIdLineItems("credit_note_id", {});
        expect(response).toEqual({
            id: "123e4567-e89b-12d3-a456-426614174000",
            created_at: "2024-01-15T14:30:00Z",
            updated_at: "2024-01-15T14:30:00Z",
            created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
            credit_note_id: "123e4567-e89b-12d3-a456-426614174000",
            description: "Premium version of Product XYZ with extended warranty",
            name: "Product XYZ",
            quantity: 2,
            subtotal: 10000,
            tax: 20,
            tax_amount: 2000,
            total: 12000,
            unit: "pieces",
            unit_price: 5000,
        });
    });

    test("put_payable_credit_notes_id_line_items", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { data: [{}] };
        const rawResponseBody = {
            data: [
                {
                    id: "123e4567-e89b-12d3-a456-426614174000",
                    created_at: "2024-01-15T14:30:00Z",
                    updated_at: "2024-01-15T14:30:00Z",
                    created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
                    credit_note_id: "123e4567-e89b-12d3-a456-426614174000",
                    description: "Premium version of Product XYZ with extended warranty",
                    name: "Product XYZ",
                    quantity: 2,
                    subtotal: 10000,
                    tax: 20,
                    tax_amount: 2000,
                    total: 12000,
                    unit: "pieces",
                    unit_price: 5000,
                },
            ],
            next_pagination_token: "eyJwYWdlIjoyfQ==",
            prev_pagination_token: "eyJwYWdlIjoxfQ==",
        };
        server
            .mockEndpoint()
            .put("/payable_credit_notes/credit_note_id/line_items")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.creditNotes.putPayableCreditNotesIdLineItems("credit_note_id", {
            data: [{}],
        });
        expect(response).toEqual({
            data: [
                {
                    id: "123e4567-e89b-12d3-a456-426614174000",
                    created_at: "2024-01-15T14:30:00Z",
                    updated_at: "2024-01-15T14:30:00Z",
                    created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
                    credit_note_id: "123e4567-e89b-12d3-a456-426614174000",
                    description: "Premium version of Product XYZ with extended warranty",
                    name: "Product XYZ",
                    quantity: 2,
                    subtotal: 10000,
                    tax: 20,
                    tax_amount: 2000,
                    total: 12000,
                    unit: "pieces",
                    unit_price: 5000,
                },
            ],
            next_pagination_token: "eyJwYWdlIjoyfQ==",
            prev_pagination_token: "eyJwYWdlIjoxfQ==",
        });
    });

    test("get_payable_credit_notes_id_line_items_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "123e4567-e89b-12d3-a456-426614174000",
            created_at: "2024-01-15T14:30:00Z",
            updated_at: "2024-01-15T14:30:00Z",
            created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
            credit_note_id: "123e4567-e89b-12d3-a456-426614174000",
            description: "Premium version of Product XYZ with extended warranty",
            name: "Product XYZ",
            quantity: 2,
            subtotal: 10000,
            tax: 20,
            tax_amount: 2000,
            total: 12000,
            unit: "pieces",
            unit_price: 5000,
        };
        server
            .mockEndpoint()
            .get("/payable_credit_notes/credit_note_id/line_items/line_item_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.creditNotes.getPayableCreditNotesIdLineItemsId("credit_note_id", "line_item_id");
        expect(response).toEqual({
            id: "123e4567-e89b-12d3-a456-426614174000",
            created_at: "2024-01-15T14:30:00Z",
            updated_at: "2024-01-15T14:30:00Z",
            created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
            credit_note_id: "123e4567-e89b-12d3-a456-426614174000",
            description: "Premium version of Product XYZ with extended warranty",
            name: "Product XYZ",
            quantity: 2,
            subtotal: 10000,
            tax: 20,
            tax_amount: 2000,
            total: 12000,
            unit: "pieces",
            unit_price: 5000,
        });
    });

    test("delete_payable_credit_notes_id_line_items_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "123e4567-e89b-12d3-a456-426614174000",
                    created_at: "2024-01-15T14:30:00Z",
                    updated_at: "2024-01-15T14:30:00Z",
                    created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
                    credit_note_id: "123e4567-e89b-12d3-a456-426614174000",
                    description: "Premium version of Product XYZ with extended warranty",
                    name: "Product XYZ",
                    quantity: 2,
                    subtotal: 10000,
                    tax: 20,
                    tax_amount: 2000,
                    total: 12000,
                    unit: "pieces",
                    unit_price: 5000,
                },
            ],
            next_pagination_token: "eyJwYWdlIjoyfQ==",
            prev_pagination_token: "eyJwYWdlIjoxfQ==",
        };
        server
            .mockEndpoint()
            .delete("/payable_credit_notes/credit_note_id/line_items/line_item_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.creditNotes.deletePayableCreditNotesIdLineItemsId(
            "credit_note_id",
            "line_item_id",
        );
        expect(response).toEqual({
            data: [
                {
                    id: "123e4567-e89b-12d3-a456-426614174000",
                    created_at: "2024-01-15T14:30:00Z",
                    updated_at: "2024-01-15T14:30:00Z",
                    created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
                    credit_note_id: "123e4567-e89b-12d3-a456-426614174000",
                    description: "Premium version of Product XYZ with extended warranty",
                    name: "Product XYZ",
                    quantity: 2,
                    subtotal: 10000,
                    tax: 20,
                    tax_amount: 2000,
                    total: 12000,
                    unit: "pieces",
                    unit_price: 5000,
                },
            ],
            next_pagination_token: "eyJwYWdlIjoyfQ==",
            prev_pagination_token: "eyJwYWdlIjoxfQ==",
        });
    });

    test("patch_payable_credit_notes_id_line_items_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "123e4567-e89b-12d3-a456-426614174000",
            created_at: "2024-01-15T14:30:00Z",
            updated_at: "2024-01-15T14:30:00Z",
            created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
            credit_note_id: "123e4567-e89b-12d3-a456-426614174000",
            description: "Premium version of Product XYZ with extended warranty",
            name: "Product XYZ",
            quantity: 2,
            subtotal: 10000,
            tax: 20,
            tax_amount: 2000,
            total: 12000,
            unit: "pieces",
            unit_price: 5000,
        };
        server
            .mockEndpoint()
            .patch("/payable_credit_notes/credit_note_id/line_items/line_item_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.creditNotes.patchPayableCreditNotesIdLineItemsId(
            "credit_note_id",
            "line_item_id",
        );
        expect(response).toEqual({
            id: "123e4567-e89b-12d3-a456-426614174000",
            created_at: "2024-01-15T14:30:00Z",
            updated_at: "2024-01-15T14:30:00Z",
            created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
            credit_note_id: "123e4567-e89b-12d3-a456-426614174000",
            description: "Premium version of Product XYZ with extended warranty",
            name: "Product XYZ",
            quantity: 2,
            subtotal: 10000,
            tax: 20,
            tax_amount: 2000,
            total: 12000,
            unit: "pieces",
            unit_price: 5000,
        });
    });

    test("post_payable_credit_notes_id_reject", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "123e4567-e89b-12d3-a456-426614174000",
            created_at: "2024-01-15T14:30:00Z",
            updated_at: "2024-01-15T14:30:00Z",
            based_on: "123e4567-e89b-12d3-a456-426614174000",
            based_on_document_id: "INV-2287",
            counterpart: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: { country: "AF", type: "type", value: "value" },
            },
            counterpart_address_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_bank_account_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_raw: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: { country: "AF", type: "type", value: "value" },
            },
            counterpart_vat_id_id: "123e4567-e89b-12d3-a456-426614174000",
            created_by_external_user_id: "ext_user_123",
            created_by_external_user_name: "John Doe",
            created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
            currency: "EUR",
            currency_exchange: { default_currency_code: "default_currency_code", rate: 1.1, total: 1.1 },
            description: "Credit note for returned items from invoice INV-2287",
            document_id: "CN-2287",
            entity_id: "123e4567-e89b-12d3-a456-426614174000",
            file_id: "123e4567-e89b-12d3-a456-426614174000",
            file_url: "file_url",
            issued_at: "2024-01-15",
            ocr_request_id: "123e4567-e89b-12d3-a456-426614174000",
            ocr_status: "completed",
            origin: "SAP",
            project_id: "123e4567-e89b-12d3-a456-426614174000",
            sender: "supplier@example.com",
            source_of_data: "user_specified",
            status: "submitted_for_approval",
            subtotal: 1000,
            tags: [
                {
                    id: "123e4567-e89b-12d3-a456-426614174000",
                    created_at: "2022-09-07T16:35:18Z",
                    updated_at: "2022-09-07T16:35:18Z",
                    category: "department",
                    created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    description: "Tag for the Marketing Department",
                    name: "Department A",
                },
            ],
            tax: 20,
            tax_amount: 200,
            total_amount: 1200,
        };
        server
            .mockEndpoint()
            .post("/payable_credit_notes/credit_note_id/reject")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.creditNotes.postPayableCreditNotesIdReject("credit_note_id");
        expect(response).toEqual({
            id: "123e4567-e89b-12d3-a456-426614174000",
            created_at: "2024-01-15T14:30:00Z",
            updated_at: "2024-01-15T14:30:00Z",
            based_on: "123e4567-e89b-12d3-a456-426614174000",
            based_on_document_id: "INV-2287",
            counterpart: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: {
                    country: "AF",
                    type: "type",
                    value: "value",
                },
            },
            counterpart_address_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_bank_account_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_raw: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: {
                    country: "AF",
                    type: "type",
                    value: "value",
                },
            },
            counterpart_vat_id_id: "123e4567-e89b-12d3-a456-426614174000",
            created_by_external_user_id: "ext_user_123",
            created_by_external_user_name: "John Doe",
            created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
            currency: "EUR",
            currency_exchange: {
                default_currency_code: "default_currency_code",
                rate: 1.1,
                total: 1.1,
            },
            description: "Credit note for returned items from invoice INV-2287",
            document_id: "CN-2287",
            entity_id: "123e4567-e89b-12d3-a456-426614174000",
            file_id: "123e4567-e89b-12d3-a456-426614174000",
            file_url: "file_url",
            issued_at: "2024-01-15",
            ocr_request_id: "123e4567-e89b-12d3-a456-426614174000",
            ocr_status: "completed",
            origin: "SAP",
            project_id: "123e4567-e89b-12d3-a456-426614174000",
            sender: "supplier@example.com",
            source_of_data: "user_specified",
            status: "submitted_for_approval",
            subtotal: 1000,
            tags: [
                {
                    id: "123e4567-e89b-12d3-a456-426614174000",
                    created_at: "2022-09-07T16:35:18Z",
                    updated_at: "2022-09-07T16:35:18Z",
                    category: "department",
                    created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    description: "Tag for the Marketing Department",
                    name: "Department A",
                },
            ],
            tax: 20,
            tax_amount: 200,
            total_amount: 1200,
        });
    });

    test("post_payable_credit_notes_id_submit_for_approval", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "123e4567-e89b-12d3-a456-426614174000",
            created_at: "2024-01-15T14:30:00Z",
            updated_at: "2024-01-15T14:30:00Z",
            based_on: "123e4567-e89b-12d3-a456-426614174000",
            based_on_document_id: "INV-2287",
            counterpart: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: { country: "AF", type: "type", value: "value" },
            },
            counterpart_address_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_bank_account_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_raw: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: { country: "AF", type: "type", value: "value" },
            },
            counterpart_vat_id_id: "123e4567-e89b-12d3-a456-426614174000",
            created_by_external_user_id: "ext_user_123",
            created_by_external_user_name: "John Doe",
            created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
            currency: "EUR",
            currency_exchange: { default_currency_code: "default_currency_code", rate: 1.1, total: 1.1 },
            description: "Credit note for returned items from invoice INV-2287",
            document_id: "CN-2287",
            entity_id: "123e4567-e89b-12d3-a456-426614174000",
            file_id: "123e4567-e89b-12d3-a456-426614174000",
            file_url: "file_url",
            issued_at: "2024-01-15",
            ocr_request_id: "123e4567-e89b-12d3-a456-426614174000",
            ocr_status: "completed",
            origin: "SAP",
            project_id: "123e4567-e89b-12d3-a456-426614174000",
            sender: "supplier@example.com",
            source_of_data: "user_specified",
            status: "submitted_for_approval",
            subtotal: 1000,
            tags: [
                {
                    id: "123e4567-e89b-12d3-a456-426614174000",
                    created_at: "2022-09-07T16:35:18Z",
                    updated_at: "2022-09-07T16:35:18Z",
                    category: "department",
                    created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    description: "Tag for the Marketing Department",
                    name: "Department A",
                },
            ],
            tax: 20,
            tax_amount: 200,
            total_amount: 1200,
        };
        server
            .mockEndpoint()
            .post("/payable_credit_notes/credit_note_id/submit_for_approval")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.creditNotes.postPayableCreditNotesIdSubmitForApproval("credit_note_id");
        expect(response).toEqual({
            id: "123e4567-e89b-12d3-a456-426614174000",
            created_at: "2024-01-15T14:30:00Z",
            updated_at: "2024-01-15T14:30:00Z",
            based_on: "123e4567-e89b-12d3-a456-426614174000",
            based_on_document_id: "INV-2287",
            counterpart: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: {
                    country: "AF",
                    type: "type",
                    value: "value",
                },
            },
            counterpart_address_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_bank_account_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_id: "123e4567-e89b-12d3-a456-426614174000",
            counterpart_raw: {
                address: {
                    city: "Berlin",
                    country: "AF",
                    line1: "Flughafenstrasse 52",
                    line2: "line2",
                    postal_code: "10115",
                    state: "state",
                },
                bank_account: {
                    account_holder_name: "account_holder_name",
                    account_number: "123456789012",
                    bic: "DEUTDE2HXXX",
                    iban: "iban",
                    routing_number: "routing_number",
                    sort_code: "sort_code",
                },
                email: "acme@example.com",
                name: "Acme Inc.",
                phone: "5551231234",
                tax_id: "DE12345678",
                vat_id: {
                    country: "AF",
                    type: "type",
                    value: "value",
                },
            },
            counterpart_vat_id_id: "123e4567-e89b-12d3-a456-426614174000",
            created_by_external_user_id: "ext_user_123",
            created_by_external_user_name: "John Doe",
            created_by_user_id: "123e4567-e89b-12d3-a456-426614174000",
            currency: "EUR",
            currency_exchange: {
                default_currency_code: "default_currency_code",
                rate: 1.1,
                total: 1.1,
            },
            description: "Credit note for returned items from invoice INV-2287",
            document_id: "CN-2287",
            entity_id: "123e4567-e89b-12d3-a456-426614174000",
            file_id: "123e4567-e89b-12d3-a456-426614174000",
            file_url: "file_url",
            issued_at: "2024-01-15",
            ocr_request_id: "123e4567-e89b-12d3-a456-426614174000",
            ocr_status: "completed",
            origin: "SAP",
            project_id: "123e4567-e89b-12d3-a456-426614174000",
            sender: "supplier@example.com",
            source_of_data: "user_specified",
            status: "submitted_for_approval",
            subtotal: 1000,
            tags: [
                {
                    id: "123e4567-e89b-12d3-a456-426614174000",
                    created_at: "2022-09-07T16:35:18Z",
                    updated_at: "2022-09-07T16:35:18Z",
                    category: "department",
                    created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    description: "Tag for the Marketing Department",
                    name: "Department A",
                },
            ],
            tax: 20,
            tax_amount: 200,
            total_amount: 1200,
        });
    });

    test("get_payable_credit_notes_id_validate", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = { id: "id", validation_errors: [{ key: "value" }] };
        server
            .mockEndpoint()
            .get("/payable_credit_notes/credit_note_id/validate")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.creditNotes.getPayableCreditNotesIdValidate("credit_note_id");
        expect(response).toEqual({
            id: "id",
            validation_errors: [
                {
                    key: "value",
                },
            ],
        });
    });
});
