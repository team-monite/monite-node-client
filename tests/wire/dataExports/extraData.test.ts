/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { MoniteClient } from "../../../src/Client";

describe("ExtraData", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    created_by: "created_by",
                    field_name: "default_account_code",
                    field_value: "field_value",
                    object_id: "object_id",
                    object_type: "counterpart",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        };
        server
            .mockEndpoint()
            .get("/data_exports/extra_data")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dataExports.extraData.get();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    created_by: "created_by",
                    field_name: "default_account_code",
                    field_value: "field_value",
                    object_id: "object_id",
                    object_type: "counterpart",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {
            field_name: "default_account_code",
            field_value: "field_value",
            object_id: "object_id",
            object_type: "counterpart",
        };
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_by: "created_by",
            field_name: "default_account_code",
            field_value: "field_value",
            object_id: "object_id",
            object_type: "counterpart",
        };
        server
            .mockEndpoint()
            .post("/data_exports/extra_data")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dataExports.extraData.create({
            field_name: "default_account_code",
            field_value: "field_value",
            object_id: "object_id",
        });
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_by: "created_by",
            field_name: "default_account_code",
            field_value: "field_value",
            object_id: "object_id",
            object_type: "counterpart",
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_by: "created_by",
            field_name: "default_account_code",
            field_value: "field_value",
            object_id: "object_id",
            object_type: "counterpart",
        };
        server
            .mockEndpoint()
            .get("/data_exports/extra_data/extra_data_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dataExports.extraData.getById("extra_data_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_by: "created_by",
            field_name: "default_account_code",
            field_value: "field_value",
            object_id: "object_id",
            object_type: "counterpart",
        });
    });

    test("delete_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_by: "created_by",
            field_name: "default_account_code",
            field_value: "field_value",
            object_id: "object_id",
            object_type: "counterpart",
        };
        server
            .mockEndpoint()
            .delete("/data_exports/extra_data/extra_data_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dataExports.extraData.deleteById("extra_data_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_by: "created_by",
            field_name: "default_account_code",
            field_value: "field_value",
            object_id: "object_id",
            object_type: "counterpart",
        });
    });

    test("update_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_by: "created_by",
            field_name: "default_account_code",
            field_value: "field_value",
            object_id: "object_id",
            object_type: "counterpart",
        };
        server
            .mockEndpoint()
            .patch("/data_exports/extra_data/extra_data_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dataExports.extraData.updateById("extra_data_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_by: "created_by",
            field_name: "default_account_code",
            field_value: "field_value",
            object_id: "object_id",
            object_type: "counterpart",
        });
    });
});
