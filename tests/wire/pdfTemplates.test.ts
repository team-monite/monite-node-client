/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { MoniteClient } from "../../src/Client";

describe("PdfTemplates", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    blocks: ["blocks"],
                    document_type: "receivable",
                    is_default: true,
                    language: "language",
                    name: "name",
                    preview: {
                        id: "id",
                        created_at: "2024-01-15T09:30:00Z",
                        updated_at: "2024-01-15T09:30:00Z",
                        file_type: "file_type",
                        md5: "md5",
                        mimetype: "mimetype",
                        name: "name",
                        region: "region",
                        s3_bucket: "s3_bucket",
                        s3_file_path: "s3_file_path",
                        size: 1,
                        url: "url",
                    },
                    template: "template",
                    template_type: "block",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/document_templates")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.pdfTemplates.get();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    blocks: ["blocks"],
                    document_type: "receivable",
                    is_default: true,
                    language: "language",
                    name: "name",
                    preview: {
                        id: "id",
                        created_at: "2024-01-15T09:30:00Z",
                        updated_at: "2024-01-15T09:30:00Z",
                        file_type: "file_type",
                        md5: "md5",
                        mimetype: "mimetype",
                        name: "name",
                        region: "region",
                        s3_bucket: "s3_bucket",
                        s3_file_path: "s3_file_path",
                        size: 1,
                        url: "url",
                    },
                    template: "template",
                    template_type: "block",
                },
            ],
        });
    });

    test("get_system", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    blocks: ["blocks"],
                    document_type: "receivable",
                    is_default: true,
                    language: "language",
                    name: "name",
                    preview: {
                        id: "id",
                        created_at: "2024-01-15T09:30:00Z",
                        updated_at: "2024-01-15T09:30:00Z",
                        file_type: "file_type",
                        md5: "md5",
                        mimetype: "mimetype",
                        name: "name",
                        region: "region",
                        s3_bucket: "s3_bucket",
                        s3_file_path: "s3_file_path",
                        size: 1,
                        url: "url",
                    },
                    template: "template",
                    template_type: "block",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/document_templates/system")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.pdfTemplates.getSystem();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    blocks: ["blocks"],
                    document_type: "receivable",
                    is_default: true,
                    language: "language",
                    name: "name",
                    preview: {
                        id: "id",
                        created_at: "2024-01-15T09:30:00Z",
                        updated_at: "2024-01-15T09:30:00Z",
                        file_type: "file_type",
                        md5: "md5",
                        mimetype: "mimetype",
                        name: "name",
                        region: "region",
                        s3_bucket: "s3_bucket",
                        s3_file_path: "s3_file_path",
                        size: 1,
                        url: "url",
                    },
                    template: "template",
                    template_type: "block",
                },
            ],
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            blocks: ["blocks"],
            document_type: "receivable",
            is_default: true,
            language: "language",
            name: "name",
            preview: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                file_type: "file_type",
                md5: "md5",
                mimetype: "mimetype",
                name: "name",
                region: "region",
                s3_bucket: "s3_bucket",
                s3_file_path: "s3_file_path",
                size: 1,
                url: "url",
            },
            template: "template",
            template_type: "block",
        };
        server
            .mockEndpoint()
            .get("/document_templates/document_template_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.pdfTemplates.getById("document_template_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            blocks: ["blocks"],
            document_type: "receivable",
            is_default: true,
            language: "language",
            name: "name",
            preview: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                file_type: "file_type",
                md5: "md5",
                mimetype: "mimetype",
                name: "name",
                region: "region",
                s3_bucket: "s3_bucket",
                s3_file_path: "s3_file_path",
                size: 1,
                url: "url",
            },
            template: "template",
            template_type: "block",
        });
    });

    test("make_default_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            blocks: ["blocks"],
            document_type: "receivable",
            is_default: true,
            language: "language",
            name: "name",
            preview: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                file_type: "file_type",
                md5: "md5",
                mimetype: "mimetype",
                name: "name",
                region: "region",
                s3_bucket: "s3_bucket",
                s3_file_path: "s3_file_path",
                size: 1,
                url: "url",
            },
            template: "template",
            template_type: "block",
        };
        server
            .mockEndpoint()
            .post("/document_templates/document_template_id/make_default")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.pdfTemplates.makeDefaultById("document_template_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            blocks: ["blocks"],
            document_type: "receivable",
            is_default: true,
            language: "language",
            name: "name",
            preview: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                file_type: "file_type",
                md5: "md5",
                mimetype: "mimetype",
                name: "name",
                region: "region",
                s3_bucket: "s3_bucket",
                s3_file_path: "s3_file_path",
                size: 1,
                url: "url",
            },
            template: "template",
            template_type: "block",
        });
    });
});
