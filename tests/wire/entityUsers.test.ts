/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { MoniteClient } from "../../src/Client";
import * as Monite from "../../src/api/index";

describe("EntityUsers", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    email: "email",
                    first_name: "first_name",
                    last_name: "last_name",
                    login: "caseyp",
                    phone: "phone",
                    role_id: "role_id",
                    status: "active",
                    userpic_file_id: "userpic_file_id",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        };
        server.mockEndpoint().get("/entity_users").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.entityUsers.get();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    email: "email",
                    first_name: "first_name",
                    last_name: "last_name",
                    login: "caseyp",
                    phone: "phone",
                    role_id: "role_id",
                    status: "active",
                    userpic_file_id: "userpic_file_id",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { first_name: "Casey", login: "login" };
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            email: "email",
            first_name: "first_name",
            last_name: "last_name",
            login: "caseyp",
            phone: "phone",
            role_id: "role_id",
            status: "active",
            userpic_file_id: "userpic_file_id",
        };
        server
            .mockEndpoint()
            .post("/entity_users")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entityUsers.create({
            first_name: "Casey",
            login: "login",
        });
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            email: "email",
            first_name: "first_name",
            last_name: "last_name",
            login: "caseyp",
            phone: "phone",
            role_id: "role_id",
            status: "active",
            userpic_file_id: "userpic_file_id",
        });
    });

    test("get_current", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            email: "email",
            first_name: "first_name",
            last_name: "last_name",
            login: "caseyp",
            phone: "phone",
            role_id: "role_id",
            status: "active",
            userpic_file_id: "userpic_file_id",
        };
        server.mockEndpoint().get("/entity_users/me").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.entityUsers.getCurrent();
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            email: "email",
            first_name: "first_name",
            last_name: "last_name",
            login: "caseyp",
            phone: "phone",
            role_id: "role_id",
            status: "active",
            userpic_file_id: "userpic_file_id",
        });
    });

    test("update_current", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            email: "email",
            first_name: "first_name",
            last_name: "last_name",
            login: "caseyp",
            phone: "phone",
            role_id: "role_id",
            status: "active",
            userpic_file_id: "userpic_file_id",
        };
        server
            .mockEndpoint()
            .patch("/entity_users/me")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entityUsers.updateCurrent();
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            email: "email",
            first_name: "first_name",
            last_name: "last_name",
            login: "caseyp",
            phone: "phone",
            role_id: "role_id",
            status: "active",
            userpic_file_id: "userpic_file_id",
        });
    });

    test("get_current_entity", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                city: "city",
                country: "AF",
                line1: "line1",
                line2: "line2",
                postal_code: "postal_code",
                state: "state",
            },
            email: "email",
            individual: {
                date_of_birth: "date_of_birth",
                first_name: "first_name",
                id_number: "id_number",
                last_name: "last_name",
                ssn_last_4: "ssn_last_4",
                title: "title",
            },
            logo: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                file_type: "payables",
                md5: "31d1a2dd1ad3dfc39be849d70a68dac0",
                mimetype: "application/pdf",
                name: "invoice.pdf",
                pages: [
                    {
                        id: "id",
                        mimetype: "image/png",
                        number: 0,
                        size: 21972,
                        url: "https://bucket.s3.amazonaws.com/123/456.png",
                    },
                ],
                previews: [{ height: 400, url: "https://bucketname.s3.amazonaws.com/1/2/3.png", width: 200 }],
                region: "eu-central-1",
                size: 24381,
                url: "https://bucketname.s3.amazonaws.com/12345/67890.pdf",
            },
            phone: "phone",
            registration_authority: "registration_authority",
            registration_number: "registration_number",
            status: "active",
            tax_id: "tax_id",
            website: "website",
            type: "individual",
        };
        server
            .mockEndpoint()
            .get("/entity_users/my_entity")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entityUsers.getCurrentEntity();
        expect(response).toEqual({
            type: "individual",
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                city: "city",
                country: "AF",
                line1: "line1",
                line2: "line2",
                postal_code: "postal_code",
                state: "state",
            },
            email: "email",
            individual: {
                date_of_birth: "date_of_birth",
                first_name: "first_name",
                id_number: "id_number",
                last_name: "last_name",
                ssn_last_4: "ssn_last_4",
                title: "title",
            },
            logo: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                file_type: "payables",
                md5: "31d1a2dd1ad3dfc39be849d70a68dac0",
                mimetype: "application/pdf",
                name: "invoice.pdf",
                pages: [
                    {
                        id: "id",
                        mimetype: "image/png",
                        number: 0,
                        size: 21972,
                        url: "https://bucket.s3.amazonaws.com/123/456.png",
                    },
                ],
                previews: [
                    {
                        height: 400,
                        url: "https://bucketname.s3.amazonaws.com/1/2/3.png",
                        width: 200,
                    },
                ],
                region: "eu-central-1",
                size: 24381,
                url: "https://bucketname.s3.amazonaws.com/12345/67890.pdf",
            },
            phone: "phone",
            registration_authority: "registration_authority",
            registration_number: "registration_number",
            status: "active",
            tax_id: "tax_id",
            website: "website",
        });
    });

    test("update_current_entity", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                city: "city",
                country: "AF",
                line1: "line1",
                line2: "line2",
                postal_code: "postal_code",
                state: "state",
            },
            email: "email",
            individual: {
                date_of_birth: "date_of_birth",
                first_name: "first_name",
                id_number: "id_number",
                last_name: "last_name",
                ssn_last_4: "ssn_last_4",
                title: "title",
            },
            logo: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                file_type: "payables",
                md5: "31d1a2dd1ad3dfc39be849d70a68dac0",
                mimetype: "application/pdf",
                name: "invoice.pdf",
                pages: [
                    {
                        id: "id",
                        mimetype: "image/png",
                        number: 0,
                        size: 21972,
                        url: "https://bucket.s3.amazonaws.com/123/456.png",
                    },
                ],
                previews: [{ height: 400, url: "https://bucketname.s3.amazonaws.com/1/2/3.png", width: 200 }],
                region: "eu-central-1",
                size: 24381,
                url: "https://bucketname.s3.amazonaws.com/12345/67890.pdf",
            },
            phone: "phone",
            registration_authority: "registration_authority",
            registration_number: "registration_number",
            status: "active",
            tax_id: "tax_id",
            website: "website",
            type: "individual",
        };
        server
            .mockEndpoint()
            .patch("/entity_users/my_entity")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entityUsers.updateCurrentEntity({});
        expect(response).toEqual({
            type: "individual",
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            address: {
                city: "city",
                country: "AF",
                line1: "line1",
                line2: "line2",
                postal_code: "postal_code",
                state: "state",
            },
            email: "email",
            individual: {
                date_of_birth: "date_of_birth",
                first_name: "first_name",
                id_number: "id_number",
                last_name: "last_name",
                ssn_last_4: "ssn_last_4",
                title: "title",
            },
            logo: {
                id: "id",
                created_at: "2024-01-15T09:30:00Z",
                file_type: "payables",
                md5: "31d1a2dd1ad3dfc39be849d70a68dac0",
                mimetype: "application/pdf",
                name: "invoice.pdf",
                pages: [
                    {
                        id: "id",
                        mimetype: "image/png",
                        number: 0,
                        size: 21972,
                        url: "https://bucket.s3.amazonaws.com/123/456.png",
                    },
                ],
                previews: [
                    {
                        height: 400,
                        url: "https://bucketname.s3.amazonaws.com/1/2/3.png",
                        width: 200,
                    },
                ],
                region: "eu-central-1",
                size: 24381,
                url: "https://bucketname.s3.amazonaws.com/12345/67890.pdf",
            },
            phone: "phone",
            registration_authority: "registration_authority",
            registration_number: "registration_number",
            status: "active",
            tax_id: "tax_id",
            website: "website",
        });
    });

    test("get_current_role", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            name: "name",
            permissions: { objects: [{ object_type: "approval_policy" }] },
            status: "active",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .get("/entity_users/my_role")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entityUsers.getCurrentRole();
        expect(response).toEqual({
            id: "id",
            name: "name",
            permissions: {
                objects: [
                    {
                        object_type: "approval_policy",
                    },
                ],
            },
            status: "active",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            email: "email",
            first_name: "first_name",
            last_name: "last_name",
            login: "caseyp",
            phone: "phone",
            role_id: "role_id",
            status: "active",
            userpic_file_id: "userpic_file_id",
        };
        server
            .mockEndpoint()
            .get("/entity_users/entity_user_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entityUsers.getById("entity_user_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            email: "email",
            first_name: "first_name",
            last_name: "last_name",
            login: "caseyp",
            phone: "phone",
            role_id: "role_id",
            status: "active",
            userpic_file_id: "userpic_file_id",
        });
    });

    test("delete_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        server.mockEndpoint().delete("/entity_users/entity_user_id").respondWith().statusCode(200).build();

        const response = await client.entityUsers.deleteById("entity_user_id");
        expect(response).toEqual(undefined);
    });

    test("update_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            email: "email",
            first_name: "first_name",
            last_name: "last_name",
            login: "caseyp",
            phone: "phone",
            role_id: "role_id",
            status: "active",
            userpic_file_id: "userpic_file_id",
        };
        server
            .mockEndpoint()
            .patch("/entity_users/entity_user_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entityUsers.updateById("entity_user_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            email: "email",
            first_name: "first_name",
            last_name: "last_name",
            login: "caseyp",
            phone: "phone",
            role_id: "role_id",
            status: "active",
            userpic_file_id: "userpic_file_id",
        });
    });
});
