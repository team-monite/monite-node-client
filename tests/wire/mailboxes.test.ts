/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { MoniteClient } from "../../src/Client";

describe("Mailboxes", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    mailbox_domain_id: "mailbox_domain_id",
                    mailbox_full_address: "mailbox_full_address",
                    mailbox_name: "mailbox_name",
                    related_object_type: "related_object_type",
                    status: "status",
                },
            ],
        };
        server.mockEndpoint().get("/mailboxes").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.mailboxes.get();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    mailbox_domain_id: "mailbox_domain_id",
                    mailbox_full_address: "mailbox_full_address",
                    mailbox_name: "mailbox_name",
                    related_object_type: "related_object_type",
                    status: "status",
                },
            ],
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {
            mailbox_domain_id: "mailbox_domain_id",
            mailbox_name: "mailbox_name",
            related_object_type: "payable",
        };
        const rawResponseBody = {
            id: "id",
            mailbox_domain_id: "mailbox_domain_id",
            mailbox_full_address: "mailbox_full_address",
            mailbox_name: "mailbox_name",
            related_object_type: "related_object_type",
            status: "status",
        };
        server
            .mockEndpoint()
            .post("/mailboxes")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mailboxes.create({
            mailbox_domain_id: "mailbox_domain_id",
            mailbox_name: "mailbox_name",
        });
        expect(response).toEqual({
            id: "id",
            mailbox_domain_id: "mailbox_domain_id",
            mailbox_full_address: "mailbox_full_address",
            mailbox_name: "mailbox_name",
            related_object_type: "related_object_type",
            status: "status",
        });
    });

    test("search", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { entity_ids: ["entity_ids"] };
        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    mailbox_domain_id: "mailbox_domain_id",
                    mailbox_full_address: "mailbox_full_address",
                    mailbox_name: "mailbox_name",
                    related_object_type: "related_object_type",
                    status: "status",
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/mailboxes/search")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.mailboxes.search({
            entity_ids: ["entity_ids"],
        });
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    mailbox_domain_id: "mailbox_domain_id",
                    mailbox_full_address: "mailbox_full_address",
                    mailbox_name: "mailbox_name",
                    related_object_type: "related_object_type",
                    status: "status",
                },
            ],
        });
    });

    test("delete_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        server.mockEndpoint().delete("/mailboxes/mailbox_id").respondWith().statusCode(200).build();

        const response = await client.mailboxes.deleteById("mailbox_id");
        expect(response).toEqual(undefined);
    });
});
