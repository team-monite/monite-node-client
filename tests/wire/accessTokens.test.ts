/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { MoniteClient } from "../../src/Client";

describe("AccessTokens", () => {
    test("revoke", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { client_id: "client_id", client_secret: "client_secret", token: "token" };
        const rawResponseBody = { message: "message" };
        server
            .mockEndpoint()
            .post("/auth/revoke")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accessTokens.revoke({
            client_id: "client_id",
            client_secret: "client_secret",
            token: "token",
        });
        expect(response).toEqual({
            message: "message",
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {
            client_id: "client_id",
            client_secret: "client_secret",
            grant_type: "client_credentials",
        };
        const rawResponseBody = {
            access_token: "L8qq9PZyRg6ieKGEKhZolGC0vJWLw8iEJ88DRdyOg",
            expires_in: 86400,
            token_type: "Bearer",
        };
        server
            .mockEndpoint()
            .post("/auth/token")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accessTokens.create({
            client_id: "client_id",
            client_secret: "client_secret",
            grant_type: "client_credentials",
        });
        expect(response).toEqual({
            access_token: "L8qq9PZyRg6ieKGEKhZolGC0vJWLw8iEJ88DRdyOg",
            expires_in: 86400,
            token_type: "Bearer",
        });
    });
});
