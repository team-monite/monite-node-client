/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { MoniteClient } from "../../src/Client";

describe("Projects", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    code: "code",
                    color: "color",
                    created_by_entity_user_id: "created_by_entity_user_id",
                    description: "description",
                    end_date: "end_date",
                    entity_id: "entity_id",
                    name: "Marketing",
                    parent_id: "parent_id",
                    partner_metadata: { key: "value" },
                    start_date: "start_date",
                    tags: [
                        {
                            id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                            created_at: "2022-09-07T16:35:18Z",
                            updated_at: "2022-09-07T16:35:18Z",
                            created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                            description: "Tag for the Marketing Department",
                            name: "Marketing",
                        },
                    ],
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        };
        server.mockEndpoint().get("/projects").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.projects.get();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    code: "code",
                    color: "color",
                    created_by_entity_user_id: "created_by_entity_user_id",
                    description: "description",
                    end_date: "end_date",
                    entity_id: "entity_id",
                    name: "Marketing",
                    parent_id: "parent_id",
                    partner_metadata: {
                        key: "value",
                    },
                    start_date: "start_date",
                    tags: [
                        {
                            id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                            created_at: "2022-09-07T16:35:18Z",
                            updated_at: "2022-09-07T16:35:18Z",
                            created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                            description: "Tag for the Marketing Department",
                            name: "Marketing",
                        },
                    ],
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { name: "Marketing" };
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            code: "code",
            color: "color",
            created_by_entity_user_id: "created_by_entity_user_id",
            description: "description",
            end_date: "end_date",
            entity_id: "entity_id",
            name: "Marketing",
            parent_id: "parent_id",
            partner_metadata: { key: "value" },
            start_date: "start_date",
            tags: [
                {
                    id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    created_at: "2022-09-07T16:35:18Z",
                    updated_at: "2022-09-07T16:35:18Z",
                    category: "document_type",
                    created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    description: "Tag for the Marketing Department",
                    name: "Marketing",
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/projects")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.projects.create({
            name: "Marketing",
        });
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            code: "code",
            color: "color",
            created_by_entity_user_id: "created_by_entity_user_id",
            description: "description",
            end_date: "end_date",
            entity_id: "entity_id",
            name: "Marketing",
            parent_id: "parent_id",
            partner_metadata: {
                key: "value",
            },
            start_date: "start_date",
            tags: [
                {
                    id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    created_at: "2022-09-07T16:35:18Z",
                    updated_at: "2022-09-07T16:35:18Z",
                    category: "document_type",
                    created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    description: "Tag for the Marketing Department",
                    name: "Marketing",
                },
            ],
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            code: "code",
            color: "color",
            created_by_entity_user_id: "created_by_entity_user_id",
            description: "description",
            end_date: "end_date",
            entity_id: "entity_id",
            name: "Marketing",
            parent_id: "parent_id",
            partner_metadata: { key: "value" },
            start_date: "start_date",
            tags: [
                {
                    id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    created_at: "2022-09-07T16:35:18Z",
                    updated_at: "2022-09-07T16:35:18Z",
                    category: "document_type",
                    created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    description: "Tag for the Marketing Department",
                    name: "Marketing",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/projects/project_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.projects.getById("project_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            code: "code",
            color: "color",
            created_by_entity_user_id: "created_by_entity_user_id",
            description: "description",
            end_date: "end_date",
            entity_id: "entity_id",
            name: "Marketing",
            parent_id: "parent_id",
            partner_metadata: {
                key: "value",
            },
            start_date: "start_date",
            tags: [
                {
                    id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    created_at: "2022-09-07T16:35:18Z",
                    updated_at: "2022-09-07T16:35:18Z",
                    category: "document_type",
                    created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    description: "Tag for the Marketing Department",
                    name: "Marketing",
                },
            ],
        });
    });

    test("delete_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        server.mockEndpoint().delete("/projects/project_id").respondWith().statusCode(200).build();

        const response = await client.projects.deleteById("project_id");
        expect(response).toEqual(undefined);
    });

    test("update_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            code: "code",
            color: "color",
            created_by_entity_user_id: "created_by_entity_user_id",
            description: "description",
            end_date: "end_date",
            entity_id: "entity_id",
            name: "Marketing",
            parent_id: "parent_id",
            partner_metadata: { key: "value" },
            start_date: "start_date",
            tags: [
                {
                    id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    created_at: "2022-09-07T16:35:18Z",
                    updated_at: "2022-09-07T16:35:18Z",
                    category: "document_type",
                    created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    description: "Tag for the Marketing Department",
                    name: "Marketing",
                },
            ],
        };
        server
            .mockEndpoint()
            .patch("/projects/project_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.projects.updateById("project_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            code: "code",
            color: "color",
            created_by_entity_user_id: "created_by_entity_user_id",
            description: "description",
            end_date: "end_date",
            entity_id: "entity_id",
            name: "Marketing",
            parent_id: "parent_id",
            partner_metadata: {
                key: "value",
            },
            start_date: "start_date",
            tags: [
                {
                    id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    created_at: "2022-09-07T16:35:18Z",
                    updated_at: "2022-09-07T16:35:18Z",
                    category: "document_type",
                    created_by_entity_user_id: "ea837e28-509b-4b6a-a600-d54b6aa0b1f5",
                    description: "Tag for the Marketing Department",
                    name: "Marketing",
                },
            ],
        });
    });
});
