/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { MoniteClient } from "../../../src/Client";

describe("BankAccounts", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    account_holder_name: "Cayla Lloyd",
                    account_number: "12345678",
                    bank_name: "Deutsche Bank",
                    bic: "DEUTDEFFXXX",
                    country: "AF",
                    currency: "AED",
                    display_name: "Primary account",
                    iban: "DE74500700100100000900",
                    is_default_for_currency: true,
                    routing_number: "routing_number",
                    sort_code: "123456",
                    was_created_by_user_id: "was_created_by_user_id",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        };
        server.mockEndpoint().get("/bank_accounts").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.entities.bankAccounts.get();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    account_holder_name: "Cayla Lloyd",
                    account_number: "12345678",
                    bank_name: "Deutsche Bank",
                    bic: "DEUTDEFFXXX",
                    country: "AF",
                    currency: "AED",
                    display_name: "Primary account",
                    iban: "DE74500700100100000900",
                    is_default_for_currency: true,
                    routing_number: "routing_number",
                    sort_code: "123456",
                    was_created_by_user_id: "was_created_by_user_id",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {
            account_holder_name: "Tobias Weingart",
            bank_name: "DEUTSCHE BANK AG",
            bic: "DEUTDEFFXXX",
            country: "DE",
            currency: "EUR",
            display_name: "Primary account",
            iban: "DE74500700100100000900",
            is_default_for_currency: true,
        };
        const rawResponseBody = {
            id: "id",
            account_holder_name: "Cayla Lloyd",
            account_number: "12345678",
            bank_name: "Deutsche Bank",
            bic: "DEUTDEFFXXX",
            country: "AF",
            currency: "AED",
            display_name: "Primary account",
            iban: "DE74500700100100000900",
            is_default_for_currency: true,
            routing_number: "routing_number",
            sort_code: "123456",
            was_created_by_user_id: "was_created_by_user_id",
        };
        server
            .mockEndpoint()
            .post("/bank_accounts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entities.bankAccounts.create({
            account_holder_name: "Tobias Weingart",
            bank_name: "DEUTSCHE BANK AG",
            bic: "DEUTDEFFXXX",
            country: "DE",
            currency: "EUR",
            display_name: "Primary account",
            iban: "DE74500700100100000900",
            is_default_for_currency: true,
        });
        expect(response).toEqual({
            id: "id",
            account_holder_name: "Cayla Lloyd",
            account_number: "12345678",
            bank_name: "Deutsche Bank",
            bic: "DEUTDEFFXXX",
            country: "AF",
            currency: "AED",
            display_name: "Primary account",
            iban: "DE74500700100100000900",
            is_default_for_currency: true,
            routing_number: "routing_number",
            sort_code: "123456",
            was_created_by_user_id: "was_created_by_user_id",
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            account_holder_name: "Cayla Lloyd",
            account_number: "12345678",
            bank_name: "Deutsche Bank",
            bic: "DEUTDEFFXXX",
            country: "AF",
            currency: "AED",
            display_name: "Primary account",
            iban: "DE74500700100100000900",
            is_default_for_currency: true,
            routing_number: "routing_number",
            sort_code: "123456",
            was_created_by_user_id: "was_created_by_user_id",
        };
        server
            .mockEndpoint()
            .get("/bank_accounts/bank_account_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entities.bankAccounts.getById("bank_account_id");
        expect(response).toEqual({
            id: "id",
            account_holder_name: "Cayla Lloyd",
            account_number: "12345678",
            bank_name: "Deutsche Bank",
            bic: "DEUTDEFFXXX",
            country: "AF",
            currency: "AED",
            display_name: "Primary account",
            iban: "DE74500700100100000900",
            is_default_for_currency: true,
            routing_number: "routing_number",
            sort_code: "123456",
            was_created_by_user_id: "was_created_by_user_id",
        });
    });

    test("delete_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        server.mockEndpoint().delete("/bank_accounts/bank_account_id").respondWith().statusCode(200).build();

        const response = await client.entities.bankAccounts.deleteById("bank_account_id");
        expect(response).toEqual(undefined);
    });

    test("update_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            account_holder_name: "Cayla Lloyd",
            account_number: "12345678",
            bank_name: "Deutsche Bank",
            bic: "DEUTDEFFXXX",
            country: "AF",
            currency: "AED",
            display_name: "Primary account",
            iban: "DE74500700100100000900",
            is_default_for_currency: true,
            routing_number: "routing_number",
            sort_code: "123456",
            was_created_by_user_id: "was_created_by_user_id",
        };
        server
            .mockEndpoint()
            .patch("/bank_accounts/bank_account_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entities.bankAccounts.updateById("bank_account_id");
        expect(response).toEqual({
            id: "id",
            account_holder_name: "Cayla Lloyd",
            account_number: "12345678",
            bank_name: "Deutsche Bank",
            bic: "DEUTDEFFXXX",
            country: "AF",
            currency: "AED",
            display_name: "Primary account",
            iban: "DE74500700100100000900",
            is_default_for_currency: true,
            routing_number: "routing_number",
            sort_code: "123456",
            was_created_by_user_id: "was_created_by_user_id",
        });
    });

    test("make_default_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            account_holder_name: "Cayla Lloyd",
            account_number: "12345678",
            bank_name: "Deutsche Bank",
            bic: "DEUTDEFFXXX",
            country: "AF",
            currency: "AED",
            display_name: "Primary account",
            iban: "DE74500700100100000900",
            is_default_for_currency: true,
            routing_number: "routing_number",
            sort_code: "123456",
            was_created_by_user_id: "was_created_by_user_id",
        };
        server
            .mockEndpoint()
            .post("/bank_accounts/bank_account_id/make_default")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entities.bankAccounts.makeDefaultById("bank_account_id");
        expect(response).toEqual({
            id: "id",
            account_holder_name: "Cayla Lloyd",
            account_number: "12345678",
            bank_name: "Deutsche Bank",
            bic: "DEUTDEFFXXX",
            country: "AF",
            currency: "AED",
            display_name: "Primary account",
            iban: "DE74500700100100000900",
            is_default_for_currency: true,
            routing_number: "routing_number",
            sort_code: "123456",
            was_created_by_user_id: "was_created_by_user_id",
        });
    });
});
