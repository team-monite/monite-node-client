/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Monite from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace PaymentLinks {
    export interface Options {
        environment?: core.Supplier<environments.MoniteEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the x-monite-version header */
        moniteVersion: core.Supplier<string>;
        /** Override the x-monite-entity-id header */
        moniteEntityId?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-monite-version header */
        moniteVersion?: string;
        /** Override the x-monite-entity-id header */
        moniteEntityId?: string | undefined;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class PaymentLinks {
    protected readonly _options: PaymentLinks.Options;

    constructor(_options: PaymentLinks.Options) {
        this._options = _options;
    }

    /**
     * Create a new [payment link](https://docs.monite.com/payments/payment-links) for an accounts payble invoice (to be paid by the entity) or an accounts receivable invoice (to be sent to the counterpart).
     *
     * @param {Monite.CreatePaymentLinkRequest} request
     * @param {PaymentLinks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.paymentLinks.create({
     *         object: {
     *             id: "5940eb3a-de95-4e7e-b5e7-8a4ad0ea341b",
     *             type: "payable"
     *         },
     *         payment_methods: ["sepa_credit"],
     *         recipient: {
     *             id: "6296af34-6feb-43c1-b567-83e3bf45050c",
     *             type: "counterpart"
     *         },
     *         return_url: "https://example.com/where-to-redirect-after-payment"
     *     })
     *
     * @example
     *     await client.paymentLinks.create({
     *         amount: 12500,
     *         currency: "EUR",
     *         expires_at: "2025-08-30T23:59:59Z",
     *         invoice: {
     *             due_date: "2025-07-31",
     *             file: {
     *                 mimetype: "application/pdf",
     *                 name: "invoice.pdf",
     *                 url: "https://example.com/path/to/invoice.pdf"
     *             },
     *             issue_date: "2025-07-01"
     *         },
     *         payment_methods: ["sepa_credit"],
     *         payment_reference: "INV/2025/0042",
     *         recipient: {
     *             id: "6296af34-6feb-43c1-b567-83e3bf45050c",
     *             type: "counterpart"
     *         },
     *         return_url: "https://example.com/where-to-redirect-after-payment"
     *     })
     *
     * @example
     *     await client.paymentLinks.create({
     *         object: {
     *             id: "419f4b6a-0e87-4b07-87fc-5047fe3328c8",
     *             type: "receivable"
     *         },
     *         payment_methods: ["card", "eps", "ideal", "sepa_credit", "sepa_debit"],
     *         recipient: {
     *             id: "274b995b-1906-4d8a-b7fe-e8d822d731b0",
     *             type: "entity"
     *         },
     *         return_url: "https://example.com/where-to-redirect-after-payment"
     *     })
     *
     * @example
     *     await client.paymentLinks.create({
     *         object: {
     *             id: "419f4b6a-0e87-4b07-87fc-5047fe3328c8",
     *             type: "receivable"
     *         },
     *         payment_methods: ["card", "us_ach", "affirm", "klarna"],
     *         recipient: {
     *             id: "274b995b-1906-4d8a-b7fe-e8d822d731b0",
     *             type: "entity"
     *         },
     *         return_url: "https://example.com/where-to-redirect-after-payment"
     *     })
     *
     * @example
     *     await client.paymentLinks.create({
     *         amount: 12500,
     *         currency: "EUR",
     *         expires_at: "2025-08-30T23:59:59Z",
     *         invoice: {
     *             due_date: "2025-07-31",
     *             file: {
     *                 mimetype: "application/pdf",
     *                 name: "invoice.pdf",
     *                 url: "https://example.com/path/to/invoice.pdf"
     *             },
     *             issue_date: "2025-07-01"
     *         },
     *         payment_methods: ["card", "eps", "ideal", "sepa_credit", "sepa_debit"],
     *         payment_reference: "INV/2025/0042",
     *         recipient: {
     *             id: "274b995b-1906-4d8a-b7fe-e8d822d731b0",
     *             type: "entity"
     *         },
     *         return_url: "https://example.com/where-to-redirect-after-payment"
     *     })
     */
    public create(
        request: Monite.CreatePaymentLinkRequest,
        requestOptions?: PaymentLinks.RequestOptions,
    ): core.HttpResponsePromise<Monite.PublicPaymentLinkResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Monite.CreatePaymentLinkRequest,
        requestOptions?: PaymentLinks.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.PublicPaymentLinkResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                "payment_links",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.PublicPaymentLinkResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError("Timeout exceeded when calling POST /payment_links.");
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} paymentLinkId
     * @param {PaymentLinks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.paymentLinks.getById("payment_link_id")
     */
    public getById(
        paymentLinkId: string,
        requestOptions?: PaymentLinks.RequestOptions,
    ): core.HttpResponsePromise<Monite.PublicPaymentLinkResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getById(paymentLinkId, requestOptions));
    }

    private async __getById(
        paymentLinkId: string,
        requestOptions?: PaymentLinks.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.PublicPaymentLinkResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `payment_links/${encodeURIComponent(paymentLinkId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.PublicPaymentLinkResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling GET /payment_links/{payment_link_id}.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} paymentLinkId
     * @param {PaymentLinks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Monite.UnauthorizedError}
     * @throws {@link Monite.UnprocessableEntityError}
     * @throws {@link Monite.TooManyRequestsError}
     *
     * @example
     *     await client.paymentLinks.expireById("payment_link_id")
     */
    public expireById(
        paymentLinkId: string,
        requestOptions?: PaymentLinks.RequestOptions,
    ): core.HttpResponsePromise<Monite.PublicPaymentLinkResponse> {
        return core.HttpResponsePromise.fromPromise(this.__expireById(paymentLinkId, requestOptions));
    }

    private async __expireById(
        paymentLinkId: string,
        requestOptions?: PaymentLinks.RequestOptions,
    ): Promise<core.WithRawResponse<Monite.PublicPaymentLinkResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-monite-version": requestOptions?.moniteVersion,
                "x-monite-entity-id": requestOptions?.moniteEntityId,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MoniteEnvironment.Sandbox,
                `payment_links/${encodeURIComponent(paymentLinkId)}/expire`,
            ),
            method: "POST",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Monite.PublicPaymentLinkResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Monite.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new Monite.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Monite.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.MoniteError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MoniteError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MoniteTimeoutError(
                    "Timeout exceeded when calling POST /payment_links/{payment_link_id}/expire.",
                );
            case "unknown":
                throw new errors.MoniteError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
