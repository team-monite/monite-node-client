/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { MoniteClient } from "../../../src/Client";

describe("Processes", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    created_by: "created_by",
                    error: { key: "value" },
                    input: { key: "value" },
                    metadata: { key: "value" },
                    script_snapshot: true,
                    status: "succeeded",
                    updated_by: "updated_by",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/approval_policies/approval_policy_id/processes")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.approvalPolicies.processes.get("approval_policy_id");
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    created_by: "created_by",
                    error: {
                        key: "value",
                    },
                    input: {
                        key: "value",
                    },
                    metadata: {
                        key: "value",
                    },
                    script_snapshot: true,
                    status: "succeeded",
                    updated_by: "updated_by",
                },
            ],
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_by: "created_by",
            error: { key: "value" },
            input: { key: "value" },
            metadata: { key: "value" },
            script_snapshot: true,
            status: "succeeded",
            updated_by: "updated_by",
        };
        server
            .mockEndpoint()
            .get("/approval_policies/approval_policy_id/processes/process_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.approvalPolicies.processes.getById("approval_policy_id", "process_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_by: "created_by",
            error: {
                key: "value",
            },
            input: {
                key: "value",
            },
            metadata: {
                key: "value",
            },
            script_snapshot: true,
            status: "succeeded",
            updated_by: "updated_by",
        });
    });

    test("cancel_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_by: "created_by",
            error: { key: "value" },
            input: { key: "value" },
            metadata: { key: "value" },
            script_snapshot: true,
            status: "succeeded",
            updated_by: "updated_by",
        };
        server
            .mockEndpoint()
            .post("/approval_policies/approval_policy_id/processes/process_id/cancel")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.approvalPolicies.processes.cancelById("approval_policy_id", "process_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_by: "created_by",
            error: {
                key: "value",
            },
            input: {
                key: "value",
            },
            metadata: {
                key: "value",
            },
            script_snapshot: true,
            status: "succeeded",
            updated_by: "updated_by",
        });
    });

    test("get_steps", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    approved_by: ["approved_by"],
                    object_id: "object_id",
                    rejected_by: "rejected_by",
                    required_approval_count: 1,
                    role_ids: ["role_ids"],
                    status: "waiting",
                    user_ids: ["user_ids"],
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/approval_policies/approval_policy_id/processes/process_id/steps")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.approvalPolicies.processes.getSteps("approval_policy_id", "process_id");
        expect(response).toEqual({
            data: [
                {
                    approved_by: ["approved_by"],
                    object_id: "object_id",
                    rejected_by: "rejected_by",
                    required_approval_count: 1,
                    role_ids: ["role_ids"],
                    status: "waiting",
                    user_ids: ["user_ids"],
                },
            ],
        });
    });
});
