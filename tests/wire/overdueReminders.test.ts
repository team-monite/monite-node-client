/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { MoniteClient } from "../../src/Client";

describe("OverdueReminders", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    name: "name",
                    terms: [{ body: "body", days_after: 1, subject: "subject" }],
                },
            ],
        };
        server.mockEndpoint().get("/overdue_reminders").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.overdueReminders.get();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    name: "name",
                    terms: [
                        {
                            body: "body",
                            days_after: 1,
                            subject: "subject",
                        },
                    ],
                },
            ],
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            name: "name",
            recipients: { bcc: ["bcc"], cc: ["cc"], to: ["to"] },
            terms: [{ body: "body", days_after: 1, subject: "subject" }],
        };
        server
            .mockEndpoint()
            .post("/overdue_reminders")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.overdueReminders.create({
            name: "name",
        });
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            name: "name",
            recipients: {
                bcc: ["bcc"],
                cc: ["cc"],
                to: ["to"],
            },
            terms: [
                {
                    body: "body",
                    days_after: 1,
                    subject: "subject",
                },
            ],
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            name: "name",
            recipients: { bcc: ["bcc"], cc: ["cc"], to: ["to"] },
            terms: [{ body: "body", days_after: 1, subject: "subject" }],
        };
        server
            .mockEndpoint()
            .get("/overdue_reminders/overdue_reminder_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.overdueReminders.getById("overdue_reminder_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            name: "name",
            recipients: {
                bcc: ["bcc"],
                cc: ["cc"],
                to: ["to"],
            },
            terms: [
                {
                    body: "body",
                    days_after: 1,
                    subject: "subject",
                },
            ],
        });
    });

    test("delete_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        server.mockEndpoint().delete("/overdue_reminders/overdue_reminder_id").respondWith().statusCode(200).build();

        const response = await client.overdueReminders.deleteById("overdue_reminder_id");
        expect(response).toEqual(undefined);
    });

    test("update_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            name: "name",
            recipients: { bcc: ["bcc"], cc: ["cc"], to: ["to"] },
            terms: [{ body: "body", days_after: 1, subject: "subject" }],
        };
        server
            .mockEndpoint()
            .patch("/overdue_reminders/overdue_reminder_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.overdueReminders.updateById("overdue_reminder_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            name: "name",
            recipients: {
                bcc: ["bcc"],
                cc: ["cc"],
                to: ["to"],
            },
            terms: [
                {
                    body: "body",
                    days_after: 1,
                    subject: "subject",
                },
            ],
        });
    });
});
