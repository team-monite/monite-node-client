/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { MoniteClient } from "../../src/Client";

describe("CounterpartEInvoicingCredentials", () => {
    test("get_counterparts_id_einvoicing_credentials", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [{ id: "id", network_identifier: "network_identifier", network_schema: "DE:VAT" }],
        };
        server
            .mockEndpoint()
            .get("/counterparts/counterpart_id/einvoicing_credentials")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response =
            await client.counterpartEInvoicingCredentials.getCounterpartsIdEinvoicingCredentials("counterpart_id");
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    network_identifier: "network_identifier",
                    network_schema: "DE:VAT",
                },
            ],
        });
    });

    test("post_counterparts_id_einvoicing_credentials", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { counterpart_vat_id_id: "14c84a34-282b-4fd8-8af6-86b5b5f2c212" };
        const rawResponseBody = { id: "id", network_identifier: "network_identifier", network_schema: "DE:VAT" };
        server
            .mockEndpoint()
            .post("/counterparts/counterpart_id/einvoicing_credentials")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.counterpartEInvoicingCredentials.postCounterpartsIdEinvoicingCredentials(
            "counterpart_id",
            {
                counterpart_vat_id_id: "14c84a34-282b-4fd8-8af6-86b5b5f2c212",
            },
        );
        expect(response).toEqual({
            id: "id",
            network_identifier: "network_identifier",
            network_schema: "DE:VAT",
        });
    });

    test("get_counterparts_id_einvoicing_credentials_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = { id: "id", network_identifier: "network_identifier", network_schema: "DE:VAT" };
        server
            .mockEndpoint()
            .get("/counterparts/counterpart_id/einvoicing_credentials/credential_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.counterpartEInvoicingCredentials.getCounterpartsIdEinvoicingCredentialsId(
            "credential_id",
            "counterpart_id",
        );
        expect(response).toEqual({
            id: "id",
            network_identifier: "network_identifier",
            network_schema: "DE:VAT",
        });
    });

    test("delete_counterparts_id_einvoicing_credentials_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        server
            .mockEndpoint()
            .delete("/counterparts/counterpart_id/einvoicing_credentials/credential_id")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.counterpartEInvoicingCredentials.deleteCounterpartsIdEinvoicingCredentialsId(
            "credential_id",
            "counterpart_id",
        );
        expect(response).toEqual(undefined);
    });

    test("patch_counterparts_id_einvoicing_credentials_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = { id: "id", network_identifier: "network_identifier", network_schema: "DE:VAT" };
        server
            .mockEndpoint()
            .patch("/counterparts/counterpart_id/einvoicing_credentials/credential_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.counterpartEInvoicingCredentials.patchCounterpartsIdEinvoicingCredentialsId(
            "credential_id",
            "counterpart_id",
        );
        expect(response).toEqual({
            id: "id",
            network_identifier: "network_identifier",
            network_schema: "DE:VAT",
        });
    });
});
