/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { MoniteClient } from "../../src/Client";

describe("ApprovalPolicies", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    created_by: "created_by",
                    description: "description",
                    ends_at: "2024-01-15T09:30:00Z",
                    name: "name",
                    script: [true],
                    starts_at: "2024-01-15T09:30:00Z",
                    status: "active",
                    trigger: true,
                    updated_by: "updated_by",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        };
        server.mockEndpoint().get("/approval_policies").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.approvalPolicies.get();
        expect(response).toEqual({
            data: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    created_by: "created_by",
                    description: "description",
                    ends_at: "2024-01-15T09:30:00Z",
                    name: "name",
                    script: [true],
                    starts_at: "2024-01-15T09:30:00Z",
                    status: "active",
                    trigger: true,
                    updated_by: "updated_by",
                },
            ],
            next_pagination_token: "next_pagination_token",
            prev_pagination_token: "prev_pagination_token",
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { name: "name", script: [true] };
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_by: "created_by",
            description: "description",
            ends_at: "2024-01-15T09:30:00Z",
            name: "name",
            script: [true],
            starts_at: "2024-01-15T09:30:00Z",
            status: "active",
            trigger: true,
            updated_by: "updated_by",
        };
        server
            .mockEndpoint()
            .post("/approval_policies")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.approvalPolicies.create({
            name: "name",
            script: [true],
        });
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_by: "created_by",
            description: "description",
            ends_at: "2024-01-15T09:30:00Z",
            name: "name",
            script: [true],
            starts_at: "2024-01-15T09:30:00Z",
            status: "active",
            trigger: true,
            updated_by: "updated_by",
        });
    });

    test("get_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_by: "created_by",
            description: "description",
            ends_at: "2024-01-15T09:30:00Z",
            name: "name",
            script: [true],
            starts_at: "2024-01-15T09:30:00Z",
            status: "active",
            trigger: true,
            updated_by: "updated_by",
        };
        server
            .mockEndpoint()
            .get("/approval_policies/approval_policy_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.approvalPolicies.getById("approval_policy_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_by: "created_by",
            description: "description",
            ends_at: "2024-01-15T09:30:00Z",
            name: "name",
            script: [true],
            starts_at: "2024-01-15T09:30:00Z",
            status: "active",
            trigger: true,
            updated_by: "updated_by",
        });
    });

    test("delete_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });

        server.mockEndpoint().delete("/approval_policies/approval_policy_id").respondWith().statusCode(200).build();

        const response = await client.approvalPolicies.deleteById("approval_policy_id");
        expect(response).toEqual(undefined);
    });

    test("update_by_id", async () => {
        const server = mockServerPool.createServer();
        const client = new MoniteClient({
            token: "test",
            moniteVersion: "test",
            moniteEntityId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_by: "created_by",
            description: "description",
            ends_at: "2024-01-15T09:30:00Z",
            name: "name",
            script: [true],
            starts_at: "2024-01-15T09:30:00Z",
            status: "active",
            trigger: true,
            updated_by: "updated_by",
        };
        server
            .mockEndpoint()
            .patch("/approval_policies/approval_policy_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.approvalPolicies.updateById("approval_policy_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            created_by: "created_by",
            description: "description",
            ends_at: "2024-01-15T09:30:00Z",
            name: "name",
            script: [true],
            starts_at: "2024-01-15T09:30:00Z",
            status: "active",
            trigger: true,
            updated_by: "updated_by",
        });
    });
});
